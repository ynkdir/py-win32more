name: Update SDK

on:
  schedule:
    - cron: "0 2 * * *" # Runs daily at 02:00 UTC
  workflow_dispatch:

jobs:
  update-sdk:
    name: "Update ${{ matrix.sdk.name }}"
    runs-on: windows-latest
    permissions:
      contents: write
      pull-requests: write

    strategy:
      matrix:
        sdk:
          - name: "Microsoft.WindowsAppSDK"
            min_version: "1.5"
            allow_prerelease: false
          - name: "Microsoft.Web.WebView2"
            min_version: "1.0.2651"
            allow_prerelease: false
          - name: "Microsoft.Windows.SDK.Win32Metadata"
            min_version: "63.0"
            allow_prerelease: true
          - name: "Microsoft.Windows.SDK.Contracts"
            min_version: "10.0.26100.4948"
            allow_prerelease: false
          - name: "Microsoft.Graphics.Win2D"
            min_version: "1.2.0"
            allow_prerelease: false

    steps:
    - name: Setup .NET
      uses: actions/setup-dotnet@v5
      with:
        dotnet-version: 8.x

    - name: Setup Python
      uses: actions/setup-python@v6
      with:
        python-version: "3.14"

    - name: git config
      run: |
        git config --global core.autocrlf false
        git config --global user.name "github-actions[bot]"
        git config --global user.email "github-actions[bot]@users.noreply.github.com"

    - name: Checkout win32more code
      uses: actions/checkout@v5
      with:
        path: win32more

    - name: Find new version and create pull request for it
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      working-directory: win32more
      run: |
        $name = "${{ matrix.sdk.name }}"
        $min_version = "${{ matrix.sdk.min_version }}"
        $allow_prerelease = $${{ matrix.sdk.allow_prerelease }}

        $min_version_info = [System.Version]$min_version

        $uri = "https://api.nuget.org/v3-flatcontainer/$($name.ToLower())/index.json"
        $response = Invoke-RestMethod -Uri $uri
        foreach ($version in $response.versions) {

          # Check new version

          if ($version -match "-" -and -not $allow_prerelease) {
            continue
          }

          $version_info = [System.Version]"$($version -replace '-.*', '')"
          if ($version_info -lt $min_version_info) {
            continue
          }

          if (Test-Path "packages/$name.$version") {
            continue
          }

          Write-Output "New version found: $name $version"


          # Build subpackage

          python scripts/build_subpackage.py --name $name --version $version
          if (-not $?) {
            throw "build failed"
          }


          # Commit changes

          # Checkout the branch, it if it exist, delete it.
          $branchName = "add-$name-$version"
          git fetch origin
          if (git branch --list $branchName) {
            git branch -D $branchName
          }

          git checkout -b $branchName
          git add "packages/$name.$version"
          git commit -m "Add $name $version"

          # Force push to overwrite the branch
          git push origin HEAD --force

          git switch main


          # Create Pull Request

          gh pr create `
            --title "Add $name $version" `
            --body "" `
            --base ${{ github.event.repository.default_branch }} `
            --head $branchName
        }
