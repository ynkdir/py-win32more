from __future__ import annotations
from win32more.win32.prelude import *
import win32more.Windows.Win32.Foundation
import win32more.Windows.Win32.Security.Authentication.Identity
import win32more.Windows.Win32.Security.Cryptography
import win32more.Windows.Win32.Security.Cryptography.Certificates
import win32more.Windows.Win32.System.Com
import win32more.Windows.Win32.System.Variant
ADDED_CERT_TYPE = Int32
XECT_EXTENSION_V1: win32more.Windows.Win32.Security.Cryptography.Certificates.ADDED_CERT_TYPE = 1
XECT_EXTENSION_V2: win32more.Windows.Win32.Security.Cryptography.Certificates.ADDED_CERT_TYPE = 2
AlgorithmFlags = Int32
AlgorithmFlagsNone: win32more.Windows.Win32.Security.Cryptography.Certificates.AlgorithmFlags = 0
AlgorithmFlagsWrap: win32more.Windows.Win32.Security.Cryptography.Certificates.AlgorithmFlags = 1
AlgorithmOperationFlags = Int32
XCN_NCRYPT_NO_OPERATION: win32more.Windows.Win32.Security.Cryptography.Certificates.AlgorithmOperationFlags = 0
XCN_NCRYPT_CIPHER_OPERATION: win32more.Windows.Win32.Security.Cryptography.Certificates.AlgorithmOperationFlags = 1
XCN_NCRYPT_HASH_OPERATION: win32more.Windows.Win32.Security.Cryptography.Certificates.AlgorithmOperationFlags = 2
XCN_NCRYPT_ASYMMETRIC_ENCRYPTION_OPERATION: win32more.Windows.Win32.Security.Cryptography.Certificates.AlgorithmOperationFlags = 4
XCN_NCRYPT_SECRET_AGREEMENT_OPERATION: win32more.Windows.Win32.Security.Cryptography.Certificates.AlgorithmOperationFlags = 8
XCN_NCRYPT_SIGNATURE_OPERATION: win32more.Windows.Win32.Security.Cryptography.Certificates.AlgorithmOperationFlags = 16
XCN_NCRYPT_RNG_OPERATION: win32more.Windows.Win32.Security.Cryptography.Certificates.AlgorithmOperationFlags = 32
XCN_NCRYPT_KEY_DERIVATION_OPERATION: win32more.Windows.Win32.Security.Cryptography.Certificates.AlgorithmOperationFlags = 64
XCN_NCRYPT_ANY_ASYMMETRIC_OPERATION: win32more.Windows.Win32.Security.Cryptography.Certificates.AlgorithmOperationFlags = 28
XCN_NCRYPT_PREFER_SIGNATURE_ONLY_OPERATION: win32more.Windows.Win32.Security.Cryptography.Certificates.AlgorithmOperationFlags = 2097152
XCN_NCRYPT_PREFER_NON_SIGNATURE_OPERATION: win32more.Windows.Win32.Security.Cryptography.Certificates.AlgorithmOperationFlags = 4194304
XCN_NCRYPT_EXACT_MATCH_OPERATION: win32more.Windows.Win32.Security.Cryptography.Certificates.AlgorithmOperationFlags = 8388608
XCN_NCRYPT_PREFERENCE_MASK_OPERATION: win32more.Windows.Win32.Security.Cryptography.Certificates.AlgorithmOperationFlags = 14680064
AlgorithmType = Int32
XCN_BCRYPT_UNKNOWN_INTERFACE: win32more.Windows.Win32.Security.Cryptography.Certificates.AlgorithmType = 0
XCN_BCRYPT_CIPHER_INTERFACE: win32more.Windows.Win32.Security.Cryptography.Certificates.AlgorithmType = 1
XCN_BCRYPT_HASH_INTERFACE: win32more.Windows.Win32.Security.Cryptography.Certificates.AlgorithmType = 2
XCN_BCRYPT_ASYMMETRIC_ENCRYPTION_INTERFACE: win32more.Windows.Win32.Security.Cryptography.Certificates.AlgorithmType = 3
XCN_BCRYPT_SIGNATURE_INTERFACE: win32more.Windows.Win32.Security.Cryptography.Certificates.AlgorithmType = 5
XCN_BCRYPT_SECRET_AGREEMENT_INTERFACE: win32more.Windows.Win32.Security.Cryptography.Certificates.AlgorithmType = 4
XCN_BCRYPT_RNG_INTERFACE: win32more.Windows.Win32.Security.Cryptography.Certificates.AlgorithmType = 6
XCN_BCRYPT_KEY_DERIVATION_INTERFACE: win32more.Windows.Win32.Security.Cryptography.Certificates.AlgorithmType = 7
AlternativeNameType = Int32
XCN_CERT_ALT_NAME_UNKNOWN: win32more.Windows.Win32.Security.Cryptography.Certificates.AlternativeNameType = 0
XCN_CERT_ALT_NAME_OTHER_NAME: win32more.Windows.Win32.Security.Cryptography.Certificates.AlternativeNameType = 1
XCN_CERT_ALT_NAME_RFC822_NAME: win32more.Windows.Win32.Security.Cryptography.Certificates.AlternativeNameType = 2
XCN_CERT_ALT_NAME_DNS_NAME: win32more.Windows.Win32.Security.Cryptography.Certificates.AlternativeNameType = 3
XCN_CERT_ALT_NAME_X400_ADDRESS: win32more.Windows.Win32.Security.Cryptography.Certificates.AlternativeNameType = 4
XCN_CERT_ALT_NAME_DIRECTORY_NAME: win32more.Windows.Win32.Security.Cryptography.Certificates.AlternativeNameType = 5
XCN_CERT_ALT_NAME_EDI_PARTY_NAME: win32more.Windows.Win32.Security.Cryptography.Certificates.AlternativeNameType = 6
XCN_CERT_ALT_NAME_URL: win32more.Windows.Win32.Security.Cryptography.Certificates.AlternativeNameType = 7
XCN_CERT_ALT_NAME_IP_ADDRESS: win32more.Windows.Win32.Security.Cryptography.Certificates.AlternativeNameType = 8
XCN_CERT_ALT_NAME_REGISTERED_ID: win32more.Windows.Win32.Security.Cryptography.Certificates.AlternativeNameType = 9
XCN_CERT_ALT_NAME_GUID: win32more.Windows.Win32.Security.Cryptography.Certificates.AlternativeNameType = 10
XCN_CERT_ALT_NAME_USER_PRINCIPLE_NAME: win32more.Windows.Win32.Security.Cryptography.Certificates.AlternativeNameType = 11
wszREGKEYNOSYSTEMCERTSVCPATH: String = 'CurrentControlSet\\Services\\CertSvc'
wszREGKEYCERTSVCPATH: String = 'SYSTEM\\CurrentControlSet\\Services\\CertSvc'
CA_DISP_INCOMPLETE: UInt32 = 0
CA_DISP_ERROR: UInt32 = 1
CA_DISP_REVOKED: UInt32 = 2
CA_DISP_VALID: UInt32 = 3
CA_DISP_INVALID: UInt32 = 4
CA_DISP_UNDER_SUBMISSION: UInt32 = 5
KRA_DISP_EXPIRED: UInt32 = 0
KRA_DISP_NOTFOUND: UInt32 = 1
KRA_DISP_REVOKED: UInt32 = 2
KRA_DISP_VALID: UInt32 = 3
KRA_DISP_INVALID: UInt32 = 4
KRA_DISP_UNTRUSTED: UInt32 = 5
KRA_DISP_NOTLOADED: UInt32 = 6
CA_ACCESS_MASKROLES: UInt32 = 255
CA_CRL_BASE: UInt32 = 1
CA_CRL_DELTA: UInt32 = 2
CA_CRL_REPUBLISH: UInt32 = 16
ICF_ALLOWFOREIGN: UInt32 = 65536
ICF_EXISTINGROW: UInt32 = 131072
IKF_OVERWRITE: UInt32 = 65536
wszOCSPCAPROP_CACERTIFICATE: String = 'CACertificate'
wszOCSPCAPROP_HASHALGORITHMID: String = 'HashAlgorithmId'
wszOCSPCAPROP_SIGNINGFLAGS: String = 'SigningFlags'
wszOCSPCAPROP_REMINDERDURATION: String = 'ReminderDuration'
wszOCSPCAPROP_SIGNINGCERTIFICATE: String = 'SigningCertificate'
wszOCSPCAPROP_CSPNAME: String = 'CSPName'
wszOCSPCAPROP_KEYSPEC: String = 'KeySpec'
wszOCSPCAPROP_ERRORCODE: String = 'ErrorCode'
wszOCSPCAPROP_PROVIDERCLSID: String = 'ProviderCLSID'
wszOCSPCAPROP_PROVIDERPROPERTIES: String = 'Provider'
wszOCSPCAPROP_LOCALREVOCATIONINFORMATION: String = 'LocalRevocationInformation'
wszOCSPCAPROP_SIGNINGCERTIFICATETEMPLATE: String = 'SigningCertificateTemplate'
wszOCSPCAPROP_CACONFIG: String = 'CAConfig'
wszOCSPPROP_LOGLEVEL: String = 'LogLevel'
wszOCSPPROP_DEBUG: String = 'Debug'
wszOCSPPROP_AUDITFILTER: String = 'AuditFilter'
wszOCSPPROP_ARRAYCONTROLLER: String = 'ArrayController'
wszOCSPPROP_ARRAYMEMBERS: String = 'ArrayMembers'
wszOCSPPROP_ENROLLPOLLINTERVAL: String = 'EnrollPollInterval'
wszOCSPISAPIPROP_VIRTUALROOTNAME: String = 'VirtualRootName'
wszOCSPISAPIPROP_NUMOFTHREADS: String = 'NumOfThreads'
wszOCSPISAPIPROP_NUMOFBACKENDCONNECTIONS: String = 'NumOfBackendConnections'
wszOCSPISAPIPROP_REFRESHRATE: String = 'RefreshRate'
wszOCSPISAPIPROP_MAXNUMOFCACHEENTRIES: String = 'MaxNumOfCacheEntries'
wszOCSPISAPIPROP_MAXAGE: String = 'MaxAge'
wszOCSPISAPIPROP_DEBUG: String = 'ISAPIDebug'
wszOCSPCOMMONPROP_REQFLAGS: String = 'RequestFlags'
wszOCSPCOMMONPROP_MAXINCOMINGMESSAGESIZE: String = 'MaxIncomingMessageSize'
wszOCSPCOMMONPROP_MAXNUMOFREQUESTENTRIES: String = 'MaxNumOfRequestEntries'
wszOCSPREVPROP_CRLURLTIMEOUT: String = 'CrlUrlTimeOut'
wszOCSPREVPROP_BASECRLURLS: String = 'BaseCrlUrls'
wszOCSPREVPROP_SERIALNUMBERSDIRS: String = 'IssuedSerialNumbersDirectories'
wszOCSPREVPROP_BASECRL: String = 'BaseCrl'
wszOCSPREVPROP_DELTACRLURLS: String = 'DeltaCrlUrls'
wszOCSPREVPROP_DELTACRL: String = 'DeltaCrl'
wszOCSPREVPROP_REFRESHTIMEOUT: String = 'RefreshTimeOut'
wszOCSPREVPROP_ERRORCODE: String = 'RevocationErrorCode'
szBACKUPANNOTATION: String = 'Cert Server Backup Interface'
szRESTOREANNOTATION: String = 'Cert Server Restore Interface'
CSBACKUP_TYPE_MASK: UInt32 = 3
CSRESTORE_TYPE_FULL: UInt32 = 1
CSRESTORE_TYPE_ONLINE: UInt32 = 2
CSRESTORE_TYPE_CATCHUP: UInt32 = 4
CSRESTORE_TYPE_MASK: UInt32 = 5
CSBACKUP_DISABLE_INCREMENTAL: UInt32 = 4294967295
CSBFT_DIRECTORY: UInt32 = 128
CSBFT_DATABASE_DIRECTORY: UInt32 = 64
CSBFT_LOG_DIRECTORY: UInt32 = 32
CSCONTROL_SHUTDOWN: UInt64 = 1
CSCONTROL_SUSPEND: UInt64 = 2
CSCONTROL_RESTART: UInt64 = 3
wszCONFIG_COMMONNAME: String = 'CommonName'
wszCONFIG_ORGUNIT: String = 'OrgUnit'
wszCONFIG_ORGANIZATION: String = 'Organization'
wszCONFIG_LOCALITY: String = 'Locality'
wszCONFIG_STATE: String = 'State'
wszCONFIG_COUNTRY: String = 'Country'
wszCONFIG_CONFIG: String = 'Config'
wszCONFIG_EXCHANGECERTIFICATE: String = 'ExchangeCertificate'
wszCONFIG_SIGNATURECERTIFICATE: String = 'SignatureCertificate'
wszCONFIG_DESCRIPTION: String = 'Description'
wszCONFIG_COMMENT: String = 'Comment'
wszCONFIG_SERVER: String = 'Server'
wszCONFIG_AUTHORITY: String = 'Authority'
wszCONFIG_SANITIZEDNAME: String = 'SanitizedName'
wszCONFIG_SHORTNAME: String = 'ShortName'
wszCONFIG_SANITIZEDSHORTNAME: String = 'SanitizedShortName'
wszCONFIG_FLAGS: String = 'Flags'
wszCONFIG_WEBENROLLMENTSERVERS: String = 'WebEnrollmentServers'
CAIF_DSENTRY: UInt32 = 1
CAIF_SHAREDFOLDERENTRY: UInt32 = 2
CAIF_REGISTRY: UInt32 = 4
CAIF_LOCAL: UInt32 = 8
CAIF_REGISTRYPARENT: UInt32 = 16
CR_IN_ENCODEANY: UInt32 = 255
CR_IN_ENCODEMASK: UInt32 = 255
CR_IN_FORMATANY: UInt32 = 0
CR_IN_PKCS10: UInt32 = 256
CR_IN_KEYGEN: UInt32 = 512
CR_IN_PKCS7: UInt32 = 768
CR_IN_CMC: UInt32 = 1024
CR_IN_CHALLENGERESPONSE: UInt32 = 1280
CR_IN_SIGNEDCERTIFICATETIMESTAMPLIST: UInt32 = 1536
CR_IN_FORMATMASK: UInt32 = 65280
CR_IN_SCEP: UInt32 = 65536
CR_IN_RPC: UInt32 = 131072
CR_IN_HTTP: UInt32 = 196608
CR_IN_FULLRESPONSE: UInt32 = 262144
CR_IN_CRLS: UInt32 = 524288
CR_IN_MACHINE: UInt32 = 1048576
CR_IN_ROBO: UInt32 = 2097152
CR_IN_CLIENTIDNONE: UInt32 = 4194304
CR_IN_CONNECTONLY: UInt32 = 8388608
CR_IN_RETURNCHALLENGE: UInt32 = 16777216
CR_IN_SCEPPOST: UInt32 = 33554432
CR_IN_CERTIFICATETRANSPARENCY: UInt32 = 67108864
CR_IN_PRESIGN: UInt32 = 134217728
CR_DISP_REVOKED: UInt32 = 6
CR_OUT_BASE64REQUESTHEADER: UInt32 = 3
CR_OUT_HEX: UInt32 = 4
CR_OUT_HEXASCII: UInt32 = 5
CR_OUT_BASE64X509CRLHEADER: UInt32 = 9
CR_OUT_HEXADDR: UInt32 = 10
CR_OUT_HEXASCIIADDR: UInt32 = 11
CR_OUT_HEXRAW: UInt32 = 12
CR_OUT_ENCODEMASK: UInt32 = 255
CR_OUT_CHAIN: UInt32 = 256
CR_OUT_CRLS: UInt32 = 512
CR_OUT_NOCRLF: UInt32 = 1073741824
CR_OUT_NOCR: UInt32 = 2147483648
CR_GEMT_DEFAULT: UInt32 = 0
CR_GEMT_HRESULT_STRING: UInt32 = 1
CR_GEMT_HTTP_ERROR: UInt32 = 2
CR_PROP_NONE: UInt32 = 0
CR_PROP_FILEVERSION: UInt32 = 1
CR_PROP_PRODUCTVERSION: UInt32 = 2
CR_PROP_EXITCOUNT: UInt32 = 3
CR_PROP_EXITDESCRIPTION: UInt32 = 4
CR_PROP_POLICYDESCRIPTION: UInt32 = 5
CR_PROP_CANAME: UInt32 = 6
CR_PROP_SANITIZEDCANAME: UInt32 = 7
CR_PROP_SHAREDFOLDER: UInt32 = 8
CR_PROP_PARENTCA: UInt32 = 9
CR_PROP_CATYPE: UInt32 = 10
CR_PROP_CASIGCERTCOUNT: UInt32 = 11
CR_PROP_CASIGCERT: UInt32 = 12
CR_PROP_CASIGCERTCHAIN: UInt32 = 13
CR_PROP_CAXCHGCERTCOUNT: UInt32 = 14
CR_PROP_CAXCHGCERT: UInt32 = 15
CR_PROP_CAXCHGCERTCHAIN: UInt32 = 16
CR_PROP_BASECRL: UInt32 = 17
CR_PROP_DELTACRL: UInt32 = 18
CR_PROP_CACERTSTATE: UInt32 = 19
CR_PROP_CRLSTATE: UInt32 = 20
CR_PROP_CAPROPIDMAX: UInt32 = 21
CR_PROP_DNSNAME: UInt32 = 22
CR_PROP_ROLESEPARATIONENABLED: UInt32 = 23
CR_PROP_KRACERTUSEDCOUNT: UInt32 = 24
CR_PROP_KRACERTCOUNT: UInt32 = 25
CR_PROP_KRACERT: UInt32 = 26
CR_PROP_KRACERTSTATE: UInt32 = 27
CR_PROP_ADVANCEDSERVER: UInt32 = 28
CR_PROP_TEMPLATES: UInt32 = 29
CR_PROP_BASECRLPUBLISHSTATUS: UInt32 = 30
CR_PROP_DELTACRLPUBLISHSTATUS: UInt32 = 31
CR_PROP_CASIGCERTCRLCHAIN: UInt32 = 32
CR_PROP_CAXCHGCERTCRLCHAIN: UInt32 = 33
CR_PROP_CACERTSTATUSCODE: UInt32 = 34
CR_PROP_CAFORWARDCROSSCERT: UInt32 = 35
CR_PROP_CABACKWARDCROSSCERT: UInt32 = 36
CR_PROP_CAFORWARDCROSSCERTSTATE: UInt32 = 37
CR_PROP_CABACKWARDCROSSCERTSTATE: UInt32 = 38
CR_PROP_CACERTVERSION: UInt32 = 39
CR_PROP_SANITIZEDCASHORTNAME: UInt32 = 40
CR_PROP_CERTCDPURLS: UInt32 = 41
CR_PROP_CERTAIAURLS: UInt32 = 42
CR_PROP_CERTAIAOCSPURLS: UInt32 = 43
CR_PROP_LOCALENAME: UInt32 = 44
CR_PROP_SUBJECTTEMPLATE_OIDS: UInt32 = 45
CR_PROP_CRLPARTITIONCOUNT: UInt32 = 46
CR_PROP_PARTITIONED_BASECRL: UInt32 = 47
CR_PROP_PARTITIONED_DELTACRL: UInt32 = 48
CR_PROP_PARTITIONED_BASECRLPUBLISHSTATUS: UInt32 = 49
CR_PROP_PARTITIONED_DELTACRLPUBLISHSTATUS: UInt32 = 50
CR_PROP_SCEPSERVERCERTS: UInt32 = 1000
CR_PROP_SCEPSERVERCAPABILITIES: UInt32 = 1001
CR_PROP_SCEPSERVERCERTSCHAIN: UInt32 = 1002
CR_PROP_SCEPMIN: UInt32 = 1000
CR_PROP_SCEPMAX: UInt32 = 1002
FR_PROP_CLAIMCHALLENGE: UInt32 = 22
EAN_NAMEOBJECTID: UInt32 = 2147483648
EANR_SUPPRESS_IA5CONVERSION: UInt32 = 2147483648
CERTENROLL_INDEX_BASE: UInt32 = 0
EXITEVENT_INVALID: UInt32 = 0
EXITEVENT_STARTUP: UInt32 = 128
EXITEVENT_CERTIMPORTED: UInt32 = 512
ENUMEXT_OBJECTID: UInt32 = 1
CMM_REFRESHONLY: UInt32 = 1
CMM_READONLY: UInt32 = 2
DBG_CERTSRV: UInt32 = 1
wszSERVICE_NAME: String = 'CertSvc'
wszREGKEYBASE: String = 'SYSTEM\\CurrentControlSet\\Services\\CertSvc'
wszREGKEYCONFIG: String = 'Configuration'
wszREGACTIVE: String = 'Active'
wszREGDIRECTORY: String = 'ConfigurationDirectory'
wszREGDBDIRECTORY: String = 'DBDirectory'
wszREGDBLOGDIRECTORY: String = 'DBLogDirectory'
wszREGDBSYSDIRECTORY: String = 'DBSystemDirectory'
wszREGDBTEMPDIRECTORY: String = 'DBTempDirectory'
wszREGDBSESSIONCOUNT: String = 'DBSessionCount'
wszREGDBMAXREADSESSIONCOUNT: String = 'DBMaxReadSessionCount'
wszREGDBFLAGS: String = 'DBFlags'
wszREGDBLASTFULLBACKUP: String = 'DBLastFullBackup'
wszREGDBLASTINCREMENTALBACKUP: String = 'DBLastIncrementalBackup'
wszREGDBLASTRECOVERY: String = 'DBLastRecovery'
wszREGWEBCLIENTCAMACHINE: String = 'WebClientCAMachine'
wszREGVERSION: String = 'Version'
wszREGWEBCLIENTCANAME: String = 'WebClientCAName'
wszREGWEBCLIENTCATYPE: String = 'WebClientCAType'
wszREGLDAPFLAGS: String = 'LDAPFlags'
wszREGCERTSRVDEBUG: String = 'Debug'
DBSESSIONCOUNTDEFAULT: UInt32 = 100
DBFLAGS_READONLY: UInt32 = 1
DBFLAGS_CREATEIFNEEDED: UInt32 = 2
DBFLAGS_CIRCULARLOGGING: UInt32 = 4
DBFLAGS_LAZYFLUSH: UInt32 = 8
DBFLAGS_MAXCACHESIZEX100: UInt32 = 16
DBFLAGS_CHECKPOINTDEPTH60MB: UInt32 = 32
DBFLAGS_LOGBUFFERSLARGE: UInt32 = 64
DBFLAGS_LOGBUFFERSHUGE: UInt32 = 128
DBFLAGS_LOGFILESIZE16MB: UInt32 = 256
DBFLAGS_MULTITHREADTRANSACTIONS: UInt32 = 512
DBFLAGS_DISABLESNAPSHOTBACKUP: UInt32 = 1024
DBFLAGS_ENABLEVOLATILEREQUESTS: UInt32 = 2048
LDAPF_SSLENABLE: UInt32 = 1
LDAPF_SIGNDISABLE: UInt32 = 2
CSVER_MAJOR_WIN2K: UInt32 = 1
CSVER_MINOR_WIN2K: UInt32 = 1
CSVER_MAJOR_WHISTLER: UInt32 = 2
CSVER_MINOR_WHISTLER_BETA2: UInt32 = 1
CSVER_MINOR_WHISTLER_BETA3: UInt32 = 2
CSVER_MAJOR_LONGHORN: UInt32 = 3
CSVER_MINOR_LONGHORN_BETA1: UInt32 = 1
CSVER_MAJOR_WIN7: UInt32 = 4
CSVER_MINOR_WIN7: UInt32 = 1
CSVER_MAJOR_WIN8: UInt32 = 5
CSVER_MINOR_WIN8: UInt32 = 1
CSVER_MAJOR_WINBLUE: UInt32 = 6
CSVER_MINOR_WINBLUE: UInt32 = 1
CSVER_MAJOR_THRESHOLD: UInt32 = 7
CSVER_MINOR_THRESHOLD: UInt32 = 1
CSVER_MAJOR: UInt32 = 7
CSVER_MINOR: UInt32 = 1
wszREGKEYRESTOREINPROGRESS: String = 'RestoreInProgress'
wszREGKEYDBPARAMETERS: String = 'DBParameters'
wszREGCADESCRIPTION: String = 'CADescription'
wszREGCACERTHASH: String = 'CACertHash'
wszREGCASERIALNUMBER: String = 'CACertSerialNumber'
wszREGCAXCHGCERTHASH: String = 'CAXchgCertHash'
wszREGKRACERTHASH: String = 'KRACertHash'
wszREGKRACERTCOUNT: String = 'KRACertCount'
wszREGKRAFLAGS: String = 'KRAFlags'
wszREGCATYPE: String = 'CAType'
wszREGCERTENROLLCOMPATIBLE: String = 'CertEnrollCompatible'
wszREGENFORCEX500NAMELENGTHS: String = 'EnforceX500NameLengths'
wszREGCOMMONNAME: String = 'CommonName'
wszREGCLOCKSKEWMINUTES: String = 'ClockSkewMinutes'
wszREGCRLNEXTPUBLISH: String = 'CRLNextPublish'
wszREGCRLPERIODSTRING: String = 'CRLPeriod'
wszREGCRLPERIODCOUNT: String = 'CRLPeriodUnits'
wszREGCRLOVERLAPPERIODSTRING: String = 'CRLOverlapPeriod'
wszREGCRLOVERLAPPERIODCOUNT: String = 'CRLOverlapUnits'
wszREGCRLDELTANEXTPUBLISH: String = 'CRLDeltaNextPublish'
wszREGCRLDELTAPERIODSTRING: String = 'CRLDeltaPeriod'
wszREGCRLDELTAPERIODCOUNT: String = 'CRLDeltaPeriodUnits'
wszREGCRLDELTAOVERLAPPERIODSTRING: String = 'CRLDeltaOverlapPeriod'
wszREGCRLDELTAOVERLAPPERIODCOUNT: String = 'CRLDeltaOverlapUnits'
wszREGCRLPUBLICATIONURLS: String = 'CRLPublicationURLs'
wszREGCACERTPUBLICATIONURLS: String = 'CACertPublicationURLs'
wszREGCRLMAXPARTITIONS: String = 'CRLMaxPartitions'
wszREGCRLSUSPENDEDPARTITIONS: String = 'CRLSuspendedPartitions'
wszREGCRLCURRENTPARTITION: String = 'CRLCurrentPartition'
wszREGCAXCHGVALIDITYPERIODSTRING: String = 'CAXchgValidityPeriod'
wszREGCAXCHGVALIDITYPERIODCOUNT: String = 'CAXchgValidityPeriodUnits'
wszREGCAXCHGOVERLAPPERIODSTRING: String = 'CAXchgOverlapPeriod'
wszREGCAXCHGOVERLAPPERIODCOUNT: String = 'CAXchgOverlapPeriodUnits'
wszREGCRLPATH_OLD: String = 'CRLPath'
wszREGCRLEDITFLAGS: String = 'CRLEditFlags'
wszREGCRLFLAGS: String = 'CRLFlags'
wszREGCRLATTEMPTREPUBLISH: String = 'CRLAttemptRepublish'
wszREGENABLED: String = 'Enabled'
wszREGFORCETELETEX: String = 'ForceTeletex'
wszREGLOGLEVEL: String = 'LogLevel'
wszREGHIGHSERIAL: String = 'HighSerial'
wszREGPOLICYFLAGS: String = 'PolicyFlags'
wszREGNAMESEPARATOR: String = 'SubjectNameSeparator'
wszREGSUBJECTTEMPLATE: String = 'SubjectTemplate'
wszREGCAUSEDS: String = 'UseDS'
wszREGVALIDITYPERIODSTRING: String = 'ValidityPeriod'
wszREGVALIDITYPERIODCOUNT: String = 'ValidityPeriodUnits'
wszREGPARENTCAMACHINE: String = 'ParentCAMachine'
wszREGPARENTCANAME: String = 'ParentCAName'
wszREGREQUESTFILENAME: String = 'RequestFileName'
wszREGREQUESTID: String = 'RequestId'
wszREGREQUESTKEYCONTAINER: String = 'RequestKeyContainer'
wszREGREQUESTKEYINDEX: String = 'RequestKeyIndex'
wszREGCASERVERNAME: String = 'CAServerName'
wszREGCACERTFILENAME: String = 'CACertFileName'
wszREGCASECURITY: String = 'Security'
wszREGAUDITFILTER: String = 'AuditFilter'
wszREGOFFICERRIGHTS: String = 'OfficerRights'
wszENROLLMENTAGENTRIGHTS: String = 'EnrollmentAgentRights'
wszREGMAXINCOMINGMESSAGESIZE: String = 'MaxIncomingMessageSize'
wszREGMAXINCOMINGALLOCSIZE: String = 'MaxIncomingAllocSize'
wszREGROLESEPARATIONENABLED: String = 'RoleSeparationEnabled'
wszREGALTERNATEPUBLISHDOMAINS: String = 'AlternatePublishDomains'
wszREGSETUPSTATUS: String = 'SetupStatus'
wszREGINTERFACEFLAGS: String = 'InterfaceFlags'
wszREGDSCONFIGDN: String = 'DSConfigDN'
wszREGDSDOMAINDN: String = 'DSDomainDN'
wszREGVIEWAGEMINUTES: String = 'ViewAgeMinutes'
wszREGVIEWIDLEMINUTES: String = 'ViewIdleMinutes'
wszREGEKPUBLISTDIRECTORIES: String = 'EndorsementKeyListDirectories'
wszCERTIFICATETRANSPARENCYFLAGS: String = 'CertificateTransparencyFlags'
wszREGMAXSCTLISTSIZE: String = 'MaxSCTListSize'
wszREGCERTIFICATETRANSPARENCYINFOOID: String = 'CTInformationExtensionOid'
wszREGPROCESSINGFLAGS: String = 'ProcessingFlags'
wszREGUSEDEFINEDCACERTINREQ: String = 'UseDefinedCACertInRequest'
wszREGENABLEDEKUFORDEFINEDCACERT: String = 'EnabledEKUForDefinedCACert'
wszREGEKUOIDSFORPUBLISHEXPIREDCERTINCRL: String = 'EKUOIDsForPublishExpiredCertInCRL'
wszCRTFILENAMEEXT: String = '.crt'
wszPFXFILENAMEEXT: String = '.p12'
wszDATFILENAMEEXT: String = '.dat'
wszLOGFILENAMEEXT: String = '.log'
wszDBFILENAMEEXT: String = '.edb'
szDBBASENAMEPARM: String = 'edb'
wszLOGPATH: String = 'CertLog'
wszDBBACKUPSUBDIR: String = 'DataBase'
wszDBBACKUPCERTBACKDAT: String = 'certbkxp.dat'
CCLOCKSKEWMINUTESDEFAULT: UInt32 = 10
CVIEWAGEMINUTESDEFAULT: UInt32 = 16
dwVALIDITYPERIODCOUNTDEFAULT_ROOT: UInt32 = 5
dwVALIDITYPERIODCOUNTDEFAULT_ENTERPRISE: UInt32 = 2
dwVALIDITYPERIODCOUNTDEFAULT_STANDALONE: UInt32 = 1
dwCAXCHGVALIDITYPERIODCOUNTDEFAULT: UInt32 = 1
dwCAXCHGOVERLAPPERIODCOUNTDEFAULT: UInt32 = 1
dwCRLPERIODCOUNTDEFAULT: UInt32 = 1
dwCRLOVERLAPPERIODCOUNTDEFAULT: UInt32 = 0
dwCRLDELTAPERIODCOUNTDEFAULT: UInt32 = 1
dwCRLDELTAOVERLAPPERIODCOUNTDEFAULT: UInt32 = 0
SETUP_SERVER_FLAG: UInt32 = 1
SETUP_CLIENT_FLAG: UInt32 = 2
SETUP_SUSPEND_FLAG: UInt32 = 4
SETUP_REQUEST_FLAG: UInt32 = 8
SETUP_ONLINE_FLAG: UInt32 = 16
SETUP_DENIED_FLAG: UInt32 = 32
SETUP_CREATEDB_FLAG: UInt32 = 64
SETUP_ATTEMPT_VROOT_CREATE: UInt32 = 128
SETUP_FORCECRL_FLAG: UInt32 = 256
SETUP_UPDATE_CAOBJECT_SVRTYPE: UInt32 = 512
SETUP_SERVER_UPGRADED_FLAG: UInt32 = 1024
SETUP_W2K_SECURITY_NOT_UPGRADED_FLAG: UInt32 = 2048
SETUP_SECURITY_CHANGED: UInt32 = 4096
SETUP_DCOM_SECURITY_UPDATED_FLAG: UInt32 = 8192
SETUP_SERVER_IS_UP_TO_DATE_FLAG: UInt32 = 16384
CRLF_DELTA_USE_OLDEST_UNEXPIRED_BASE: UInt32 = 1
CRLF_DELETE_EXPIRED_CRLS: UInt32 = 2
CRLF_CRLNUMBER_CRITICAL: UInt32 = 4
CRLF_REVCHECK_IGNORE_OFFLINE: UInt32 = 8
CRLF_IGNORE_INVALID_POLICIES: UInt32 = 16
CRLF_REBUILD_MODIFIED_SUBJECT_ONLY: UInt32 = 32
CRLF_SAVE_FAILED_CERTS: UInt32 = 64
CRLF_IGNORE_UNKNOWN_CMC_ATTRIBUTES: UInt32 = 128
CRLF_IGNORE_CROSS_CERT_TRUST_ERROR: UInt32 = 256
CRLF_PUBLISH_EXPIRED_CERT_CRLS: UInt32 = 512
CRLF_ENFORCE_ENROLLMENT_AGENT: UInt32 = 1024
CRLF_DISABLE_RDN_REORDER: UInt32 = 2048
CRLF_DISABLE_ROOT_CROSS_CERTS: UInt32 = 4096
CRLF_LOG_FULL_RESPONSE: UInt32 = 8192
CRLF_USE_XCHG_CERT_TEMPLATE: UInt32 = 16384
CRLF_USE_CROSS_CERT_TEMPLATE: UInt32 = 32768
CRLF_ALLOW_REQUEST_ATTRIBUTE_SUBJECT: UInt32 = 65536
CRLF_REVCHECK_IGNORE_NOREVCHECK: UInt32 = 131072
CRLF_PRESERVE_EXPIRED_CA_CERTS: UInt32 = 262144
CRLF_PRESERVE_REVOKED_CA_CERTS: UInt32 = 524288
CRLF_DISABLE_CHAIN_VERIFICATION: UInt32 = 1048576
CRLF_BUILD_ROOTCA_CRLENTRIES_BASEDONKEY: UInt32 = 2097152
CRLF_ENABLE_CRL_PARTITION: UInt32 = 4194304
CRLF_PARTITION_ZERO_EXCLUSIVE: UInt32 = 8388608
KRAF_ENABLEFOREIGN: UInt32 = 1
KRAF_SAVEBADREQUESTKEY: UInt32 = 2
KRAF_ENABLEARCHIVEALL: UInt32 = 4
KRAF_DISABLEUSEDEFAULTPROVIDER: UInt32 = 8
IF_LOCKICERTREQUEST: UInt32 = 1
IF_NOREMOTEICERTREQUEST: UInt32 = 2
IF_NOLOCALICERTREQUEST: UInt32 = 4
IF_NORPCICERTREQUEST: UInt32 = 8
IF_NOREMOTEICERTADMIN: UInt32 = 16
IF_NOLOCALICERTADMIN: UInt32 = 32
IF_NOREMOTEICERTADMINBACKUP: UInt32 = 64
IF_NOLOCALICERTADMINBACKUP: UInt32 = 128
IF_NOSNAPSHOTBACKUP: UInt32 = 256
IF_ENFORCEENCRYPTICERTREQUEST: UInt32 = 512
IF_ENFORCEENCRYPTICERTADMIN: UInt32 = 1024
IF_ENABLEEXITKEYRETRIEVAL: UInt32 = 2048
IF_ENABLEADMINASAUDITOR: UInt32 = 4096
IF_ENABLEPRESIGNSUPPORT: UInt32 = 8192
PROCFLG_NONE: UInt32 = 0
PROCFLG_ENFORCEGOODKEYS: UInt32 = 1
CSURL_SERVERPUBLISH: UInt32 = 1
CSURL_ADDTOCERTCDP: UInt32 = 2
CSURL_ADDTOFRESHESTCRL: UInt32 = 4
CSURL_ADDTOCRLCDP: UInt32 = 8
CSURL_PUBLISHRETRY: UInt32 = 16
CSURL_ADDTOCERTOCSP: UInt32 = 32
CSURL_SERVERPUBLISHDELTA: UInt32 = 64
CSURL_ADDTOIDP: UInt32 = 128
wszREGKEYCSP: String = 'CSP'
wszREGKEYENCRYPTIONCSP: String = 'EncryptionCSP'
wszREGKEYEXITMODULES: String = 'ExitModules'
wszREGKEYPOLICYMODULES: String = 'PolicyModules'
wszSECUREDATTRIBUTES: String = 'SignedAttributes'
wszzDEFAULTSIGNEDATTRIBUTES: String = 'RequesterName\x00'
wszREGBACKUPLOGDIRECTORY: String = 'BackupLogDirectory'
wszREGCHECKPOINTFILE: String = 'CheckPointFile'
wszREGHIGHLOGNUMBER: String = 'HighLogNumber'
wszREGLOWLOGNUMBER: String = 'LowLogNumber'
wszREGLOGPATH: String = 'LogPath'
wszREGRESTOREMAPCOUNT: String = 'RestoreMapCount'
wszREGRESTOREMAP: String = 'RestoreMap'
wszREGDATABASERECOVERED: String = 'DatabaseRecovered'
wszREGRESTORESTATUS: String = 'RestoreStatus'
wszREGB2ICERTMANAGEMODULE: String = 'ICertManageModule'
wszREGSP4DEFAULTCONFIGURATION: String = 'DefaultConfiguration'
wszREGSP4KEYSETNAME: String = 'KeySetName'
wszREGSP4SUBJECTNAMESEPARATOR: String = 'SubjectNameSeparator'
wszREGSP4NAMES: String = 'Names'
wszREGSP4QUERIES: String = 'Queries'
wszREGNETSCAPECERTTYPE: String = 'NetscapeCertType'
wszNETSCAPEREVOCATIONTYPE: String = 'Netscape'
wszREGPROVIDERTYPE: String = 'ProviderType'
wszREGPROVIDER: String = 'Provider'
wszHASHALGORITHM: String = 'HashAlgorithm'
wszENCRYPTIONALGORITHM: String = 'EncryptionAlgorithm'
wszMACHINEKEYSET: String = 'MachineKeyset'
wszREGKEYSIZE: String = 'KeySize'
wszREGSYMMETRICKEYSIZE: String = 'SymmetricKeySize'
wszCNGPUBLICKEYALGORITHM: String = 'CNGPublicKeyAlgorithm'
wszCNGHASHALGORITHM: String = 'CNGHashAlgorithm'
wszCNGENCRYPTIONALGORITHM: String = 'CNGEncryptionAlgorithm'
wszREGALTERNATESIGNATUREALGORITHM: String = 'AlternateSignatureAlgorithm'
szNAMESEPARATORDEFAULT: String = '\n'
wszPERIODYEARS: String = 'Years'
wszPERIODMONTHS: String = 'Months'
wszPERIODWEEKS: String = 'Weeks'
wszPERIODDAYS: String = 'Days'
wszPERIODHOURS: String = 'Hours'
wszPERIODMINUTES: String = 'Minutes'
wszPERIODSECONDS: String = 'Seconds'
wszREGISSUERCERTURLFLAGS: String = 'IssuerCertURLFlags'
wszREGEDITFLAGS: String = 'EditFlags'
wszREGUPNMAP: String = 'UPNMap'
wszREGSUBJECTALTNAME: String = 'SubjectAltName'
wszREGSUBJECTALTNAME2: String = 'SubjectAltName2'
wszREGREQUESTDISPOSITION: String = 'RequestDisposition'
wszREGCAPATHLENGTH: String = 'CAPathLength'
wszREGREVOCATIONTYPE: String = 'RevocationType'
wszREGLDAPREVOCATIONCRLURL_OLD: String = 'LDAPRevocationCRLURL'
wszREGREVOCATIONCRLURL_OLD: String = 'RevocationCRLURL'
wszREGFTPREVOCATIONCRLURL_OLD: String = 'FTPRevocationCRLURL'
wszREGFILEREVOCATIONCRLURL_OLD: String = 'FileRevocationCRLURL'
wszREGREVOCATIONURL: String = 'RevocationURL'
wszREGLDAPISSUERCERTURL_OLD: String = 'LDAPIssuerCertURL'
wszREGISSUERCERTURL_OLD: String = 'IssuerCertURL'
wszREGFTPISSUERCERTURL_OLD: String = 'FTPIssuerCertURL'
wszREGFILEISSUERCERTURL_OLD: String = 'FileIssuerCertURL'
wszREGENABLEREQUESTEXTENSIONLIST: String = 'EnableRequestExtensionList'
wszREGENABLEENROLLEEREQUESTEXTENSIONLIST: String = 'EnableEnrolleeRequestExtensionList'
wszREGDISABLEEXTENSIONLIST: String = 'DisableExtensionList'
wszREGEKUOIDSFORVOLATILEREQUESTS: String = 'EKUOIDsforVolatileRequests'
wszREGLDAPSESSIONOPTIONS: String = 'LDAPSessionOptions'
wszLDAPSESSIONOPTIONVALUE: String = 'LDAPSessionOptionValue'
wszREGDEFAULTSMIME: String = 'DefaultSMIME'
CAPATHLENGTH_INFINITE: UInt32 = 4294967295
REQDISP_PENDING: UInt32 = 0
REQDISP_ISSUE: UInt32 = 1
REQDISP_DENY: UInt32 = 2
REQDISP_USEREQUESTATTRIBUTE: UInt32 = 3
REQDISP_MASK: UInt32 = 255
REQDISP_PENDINGFIRST: UInt32 = 256
REQDISP_DEFAULT_ENTERPRISE: UInt32 = 1
REVEXT_CDPLDAPURL_OLD: UInt32 = 1
REVEXT_CDPHTTPURL_OLD: UInt32 = 2
REVEXT_CDPFTPURL_OLD: UInt32 = 4
REVEXT_CDPFILEURL_OLD: UInt32 = 8
REVEXT_CDPURLMASK_OLD: UInt32 = 255
REVEXT_CDPENABLE: UInt32 = 256
REVEXT_ASPENABLE: UInt32 = 512
REVEXT_DEFAULT_NODS: UInt32 = 256
REVEXT_DEFAULT_DS: UInt32 = 256
ISSCERT_LDAPURL_OLD: UInt32 = 1
ISSCERT_HTTPURL_OLD: UInt32 = 2
ISSCERT_FTPURL_OLD: UInt32 = 4
ISSCERT_FILEURL_OLD: UInt32 = 8
ISSCERT_URLMASK_OLD: UInt32 = 255
ISSCERT_ENABLE: UInt32 = 256
ISSCERT_DEFAULT_NODS: UInt32 = 256
ISSCERT_DEFAULT_DS: UInt32 = 256
EDITF_ENABLEREQUESTEXTENSIONS: UInt32 = 1
EDITF_REQUESTEXTENSIONLIST: UInt32 = 2
EDITF_DISABLEEXTENSIONLIST: UInt32 = 4
EDITF_ADDOLDKEYUSAGE: UInt32 = 8
EDITF_ADDOLDCERTTYPE: UInt32 = 16
EDITF_ATTRIBUTEENDDATE: UInt32 = 32
EDITF_BASICCONSTRAINTSCRITICAL: UInt32 = 64
EDITF_BASICCONSTRAINTSCA: UInt32 = 128
EDITF_ENABLEAKIKEYID: UInt32 = 256
EDITF_ATTRIBUTECA: UInt32 = 512
EDITF_IGNOREREQUESTERGROUP: UInt32 = 1024
EDITF_ENABLEAKIISSUERNAME: UInt32 = 2048
EDITF_ENABLEAKIISSUERSERIAL: UInt32 = 4096
EDITF_ENABLEAKICRITICAL: UInt32 = 8192
EDITF_SERVERUPGRADED: UInt32 = 16384
EDITF_ATTRIBUTEEKU: UInt32 = 32768
EDITF_ENABLEDEFAULTSMIME: UInt32 = 65536
EDITF_EMAILOPTIONAL: UInt32 = 131072
EDITF_ATTRIBUTESUBJECTALTNAME2: UInt32 = 262144
EDITF_ENABLELDAPREFERRALS: UInt32 = 524288
EDITF_ENABLECHASECLIENTDC: UInt32 = 1048576
EDITF_AUDITCERTTEMPLATELOAD: UInt32 = 2097152
EDITF_DISABLEOLDOSCNUPN: UInt32 = 4194304
EDITF_DISABLELDAPPACKAGELIST: UInt32 = 8388608
EDITF_ENABLEUPNMAP: UInt32 = 16777216
EDITF_ENABLEOCSPREVNOCHECK: UInt32 = 33554432
EDITF_ENABLERENEWONBEHALFOF: UInt32 = 67108864
EDITF_ENABLEKEYENCIPHERMENTCACERT: UInt32 = 134217728
wszREGLDAPREVOCATIONDN_OLD: String = 'LDAPRevocationDN'
wszREGLDAPREVOCATIONDNTEMPLATE_OLD: String = 'LDAPRevocationDNTemplate'
wszCRLPUBLISHRETRYCOUNT: String = 'CRLPublishRetryCount'
wszREGCERTPUBLISHFLAGS: String = 'PublishCertFlags'
EXITPUB_FILE: UInt32 = 1
EXITPUB_ACTIVEDIRECTORY: UInt32 = 2
EXITPUB_REMOVEOLDCERTS: UInt32 = 16
EXITPUB_DEFAULT_ENTERPRISE: UInt32 = 2
EXITPUB_DEFAULT_STANDALONE: UInt32 = 1
wszCLASS_CERTADMIN: String = 'CertificateAuthority.Admin'
wszCLASS_CERTCONFIG: String = 'CertificateAuthority.Config'
wszCLASS_CERTGETCONFIG: String = 'CertificateAuthority.GetConfig'
wszCLASS_CERTENCODE: String = 'CertificateAuthority.Encode'
wszCLASS_CERTDBMEM: String = 'CertificateAuthority.DBMem'
wszCLASS_CERTREQUEST: String = 'CertificateAuthority.Request'
wszCLASS_CERTSERVEREXIT: String = 'CertificateAuthority.ServerExit'
wszCLASS_CERTSERVERPOLICY: String = 'CertificateAuthority.ServerPolicy'
wszCLASS_CERTVIEW: String = 'CertificateAuthority.View'
wszMICROSOFTCERTMODULE_PREFIX: String = 'CertificateAuthority_MicrosoftDefault'
wszCERTMANAGE_SUFFIX: String = 'Manage'
wszCERTEXITMODULE_POSTFIX: String = '.Exit'
wszCERTPOLICYMODULE_POSTFIX: String = '.Policy'
wszCAPOLICYFILE: String = 'CAPolicy.inf'
wszINFSECTION_CDP: String = 'CRLDistributionPoint'
wszINFSECTION_AIA: String = 'AuthorityInformationAccess'
wszINFSECTION_EKU: String = 'EnhancedKeyUsageExtension'
wszINFSECTION_CCDP: String = 'CrossCertificateDistributionPointsExtension'
wszINFSECTION_CERTSERVER: String = 'certsrv_server'
wszINFKEY_RENEWALKEYLENGTH: String = 'RenewalKeyLength'
wszINFKEY_RENEWALVALIDITYPERIODSTRING: String = 'RenewalValidityPeriod'
wszINFKEY_RENEWALVALIDITYPERIODCOUNT: String = 'RenewalValidityPeriodUnits'
wszINFKEY_UTF8: String = 'UTF8'
wszINFKEY_CRLPERIODSTRING: String = 'CRLPeriod'
wszINFKEY_CRLPERIODCOUNT: String = 'CRLPeriodUnits'
wszINFKEY_CRLDELTAPERIODSTRING: String = 'CRLDeltaPeriod'
wszINFKEY_CRLDELTAPERIODCOUNT: String = 'CRLDeltaPeriodUnits'
wszINFKEY_LOADDEFAULTTEMPLATES: String = 'LoadDefaultTemplates'
wszINFKEY_ENABLEKEYCOUNTING: String = 'EnableKeyCounting'
wszINFKEY_FORCEUTF8: String = 'ForceUTF8'
wszINFKEY_ALTERNATESIGNATUREALGORITHM: String = 'AlternateSignatureAlgorithm'
wszINFKEY_SHOWALLCSPS: String = 'ShowAllCSPs'
wszINFKEY_CRITICAL: String = 'Critical'
wszINFKEY_EMPTY: String = 'Empty'
wszINFKEY_CCDPSYNCDELTATIME: String = 'SyncDeltaTime'
wszINFSECTION_CAPOLICY: String = 'CAPolicy'
wszINFSECTION_POLICYSTATEMENT: String = 'PolicyStatementExtension'
wszINFSECTION_APPLICATIONPOLICYSTATEMENT: String = 'ApplicationPolicyStatementExtension'
wszINFKEY_POLICIES: String = 'Policies'
wszINFKEY_OID: String = 'OID'
wszINFKEY_NOTICE: String = 'Notice'
wszINFKEY_FLAGS: String = 'Flags'
wszINFSECTION_REQUESTATTRIBUTES: String = 'RequestAttributes'
wszINFSECTION_NAMECONSTRAINTS: String = 'NameConstraintsExtension'
wszINFKEY_INCLUDE: String = 'Include'
wszINFKEY_EXCLUDE: String = 'Exclude'
wszINFKEY_SUBTREE: String = 'SubTree'
wszINFKEY_UPN: String = 'UPN'
wszINFKEY_EMAIL: String = 'EMail'
wszINFKEY_DNS: String = 'DNS'
wszINFKEY_DIRECTORYNAME: String = 'DirectoryName'
wszINFKEY_URL: String = 'URL'
wszINFKEY_IPADDRESS: String = 'IPAddress'
wszINFKEY_REGISTEREDID: String = 'RegisteredId'
wszINFKEY_OTHERNAME: String = 'OtherName'
wszINFSECTION_POLICYMAPPINGS: String = 'PolicyMappingsExtension'
wszINFSECTION_APPLICATIONPOLICYMAPPINGS: String = 'ApplicationPolicyMappingsExtension'
wszINFSECTION_POLICYCONSTRAINTS: String = 'PolicyConstraintsExtension'
wszINFSECTION_APPLICATIONPOLICYCONSTRAINTS: String = 'ApplicationPolicyConstraintsExtension'
wszINFKEY_REQUIREEXPLICITPOLICY: String = 'RequireExplicitPolicy'
wszINFKEY_INHIBITPOLICYMAPPING: String = 'InhibitPolicyMapping'
wszINFSECTION_BASICCONSTRAINTS: String = 'BasicConstraintsExtension'
wszINFKEY_PATHLENGTH: String = 'PathLength'
wszINFSECTION_EXTENSIONS: String = 'Extensions'
wszINFSECTION_PROPERTIES: String = 'Properties'
wszINFKEY_CONTINUE: String = '_continue_'
wszINFSECTION_NEWREQUEST: String = 'NewRequest'
wszINFKEY_SUBJECT: String = 'Subject'
wszINFKEY_SUBJECTNAMEFLAGS: String = 'SubjectNameFlags'
wszINFKEY_X500NAMEFLAGS: String = 'X500NameFlags'
wszINFKEY_EXPORTABLE: String = 'Exportable'
wszINFKEY_EXPORTABLEENCRYPTED: String = 'ExportableEncrypted'
wszINFKEY_HASHALGORITHM: String = 'HashAlgorithm'
wszINFKEY_KEYALGORITHM: String = 'KeyAlgorithm'
wszINFKEY_KEYALGORITHMPARMETERS: String = 'KeyAlgorithmParameters'
wszINFKEY_KEYCONTAINER: String = 'KeyContainer'
wszINFKEY_READERNAME: String = 'ReaderName'
wszINFKEY_KEYLENGTH: String = 'KeyLength'
wszINFKEY_LEGACYKEYSPEC: String = 'KeySpec'
wszINFKEY_KEYUSAGEEXTENSION: String = 'KeyUsage'
wszINFKEY_KEYUSAGEPROPERTY: String = 'KeyUsageProperty'
wszINFKEY_MACHINEKEYSET: String = 'MachineKeySet'
wszINFKEY_PRIVATEKEYARCHIVE: String = 'PrivateKeyArchive'
wszINFKEY_ENCRYPTIONALGORITHM: String = 'EncryptionAlgorithm'
wszINFKEY_ENCRYPTIONLENGTH: String = 'EncryptionLength'
wszINFKEY_PROVIDERNAME: String = 'ProviderName'
wszINFKEY_PROVIDERTYPE: String = 'ProviderType'
wszINFKEY_RENEWALCERT: String = 'RenewalCert'
wszINFKEY_REQUESTTYPE: String = 'RequestType'
wszINFKEY_SECURITYDESCRIPTOR: String = 'SecurityDescriptor'
wszINFKEY_SILENT: String = 'Silent'
wszINFKEY_SMIME: String = 'SMIME'
wszINFKEY_SUPPRESSDEFAULTS: String = 'SuppressDefaults'
wszINFKEY_USEEXISTINGKEY: String = 'UseExistingKeySet'
wszINFKEY_USERPROTECTED: String = 'UserProtected'
wszINFKEY_KEYPROTECTION: String = 'KeyProtection'
wszINFKEY_UICONTEXTMESSAGE: String = 'UIContextMessage'
wszINFKEY_FRIENDLYNAME: String = 'FriendlyName'
wszINFKEY_NOTBEFORE: String = 'NotBefore'
wszINFKEY_NOTAFTER: String = 'NotAfter'
wszINFKEY_ATTESTPRIVATEKEY: String = 'AttestPrivateKey'
wszINFKEY_PUBLICKEY: String = 'PublicKey'
wszINFKEY_PUBLICKEYPARAMETERS: String = 'PublicKeyParameters'
wszINFKEY_ECCKEYPARAMETERS: String = 'EccKeyParameters'
wszINFKEY_ECCKEYPARAMETERS_P: String = 'EccKeyParameters_P'
wszINFKEY_ECCKEYPARAMETERS_A: String = 'EccKeyParameters_A'
wszINFKEY_ECCKEYPARAMETERS_B: String = 'EccKeyParameters_B'
wszINFKEY_ECCKEYPARAMETERS_SEED: String = 'EccKeyParameters_Seed'
wszINFKEY_ECCKEYPARAMETERS_BASE: String = 'EccKeyParameters_Base'
wszINFKEY_ECCKEYPARAMETERS_ORDER: String = 'EccKeyParameters_Order'
wszINFKEY_ECCKEYPARAMETERS_COFACTOR: String = 'EccKeyParameters_Cofactor'
wszINFKEY_ECCKEYPARAMETERSTYPE: String = 'EccKeyParametersType'
wszINFKEY_SERIALNUMBER: String = 'SerialNumber'
wszINFKEY_CATHUMBPRINT: String = 'CAThumbprint'
wszINFKEY_CACERTS: String = 'CACerts'
wszINFKEY_CACAPABILITIES: String = 'CACapabilities'
wszINFKEY_CHALLENGEPASSWORD: String = 'ChallengePassword'
wszINFVALUE_REQUESTTYPE_PKCS10: String = 'PKCS10'
wszINFVALUE_REQUESTTYPE_PKCS7: String = 'PKCS7'
wszINFVALUE_REQUESTTYPE_CMC: String = 'CMC'
wszINFVALUE_REQUESTTYPE_CERT: String = 'Cert'
wszINFVALUE_REQUESTTYPE_SCEP: String = 'SCEP'
wszINFVALUE_ENDORSEMENTKEY: String = 'EndorsementKey'
wszREGEXITSMTPKEY: String = 'SMTP'
wszREGEXITSMTPTEMPLATES: String = 'Templates'
wszREGEXITSMTPEVENTFILTER: String = 'EventFilter'
wszREGEXITSMTPSERVER: String = 'SMTPServer'
wszREGEXITSMTPAUTHENTICATE: String = 'SMTPAuthenticate'
wszREGEXITDENIEDKEY: String = 'Denied'
wszREGEXITISSUEDKEY: String = 'Issued'
wszREGEXITPENDINGKEY: String = 'Pending'
wszREGEXITREVOKEDKEY: String = 'Revoked'
wszREGEXITCRLISSUEDKEY: String = 'CRLIssued'
wszREGEXITSHUTDOWNKEY: String = 'Shutdown'
wszREGEXITSTARTUPKEY: String = 'Startup'
wszREGEXITIMPORTEDKEY: String = 'Imported'
wszREGEXITSMTPFROM: String = 'From'
wszREGEXITSMTPTO: String = 'To'
wszREGEXITSMTPCC: String = 'Cc'
wszREGEXITTITLEFORMAT: String = 'TitleFormat'
wszREGEXITTITLEARG: String = 'TitleArg'
wszREGEXITBODYFORMAT: String = 'BodyFormat'
wszREGEXITBODYARG: String = 'BodyArg'
wszREGEXITPROPNOTFOUND: String = '???'
wszREGKEYENROLLMENT: String = 'Software\\Microsoft\\Cryptography\\AutoEnrollment'
wszREGKEYGROUPPOLICYENROLLMENT: String = 'Software\\Policies\\Microsoft\\Cryptography\\AutoEnrollment'
wszREGMAXPENDINGREQUESTDAYS: String = 'MaxPendingRequestDays'
wszREGAELOGLEVEL_OLD: String = 'AEEventLogLevel'
wszREGENROLLFLAGS: String = 'EnrollFlags'
wszREGVERIFYFLAGS: String = 'VerifyFlags'
wszREGUNICODE: String = 'Unicode'
wszREGAIKCLOUDCAURL: String = 'AIKCloudCAURL'
wszREGAIKKEYALGORITHM: String = 'AIKKeyAlgorithm'
wszREGAIKKEYLENGTH: String = 'AIKKeyLength'
wszREGPRESERVESCEPDUMMYCERTS: String = 'PreserveSCEPDummyCerts'
wszREGALLPROVIDERS: String = 'All'
TP_MACHINEPOLICY: UInt32 = 1
wszREGKEYREPAIR: String = 'KeyRepair'
KR_ENABLE_MACHINE: UInt32 = 1
KR_ENABLE_USER: UInt32 = 2
CONFIGURATION_STATUS_PARENT_REG_PATH: String = 'Software\\Microsoft\\ADCS'
CONFIGURATION_STATUS_REG_VALUE_NAME: String = 'ConfigurationStatus'
CONFIGURATION_REG_EPTOKENCHECKVALUE: String = 'EPTokenCheckValue'
EP_TOKENCHECK_DEFAULT_VALUE: UInt32 = 2
CONFIGURATION_REG_DISABLE_HTTPSONLY: String = 'DisableHTTPSOnly'
wszPROPDISTINGUISHEDNAME: String = 'DistinguishedName'
wszPROPRAWNAME: String = 'RawName'
wszPROPCOUNTRY: String = 'Country'
wszPROPORGANIZATION: String = 'Organization'
wszPROPORGUNIT: String = 'OrgUnit'
wszPROPCOMMONNAME: String = 'CommonName'
wszPROPLOCALITY: String = 'Locality'
wszPROPSTATE: String = 'State'
wszPROPTITLE: String = 'Title'
wszPROPGIVENNAME: String = 'GivenName'
wszPROPINITIALS: String = 'Initials'
wszPROPSURNAME: String = 'SurName'
wszPROPDOMAINCOMPONENT: String = 'DomainComponent'
wszPROPEMAIL: String = 'EMail'
wszPROPSTREETADDRESS: String = 'StreetAddress'
wszPROPUNSTRUCTUREDNAME: String = 'UnstructuredName'
wszPROPUNSTRUCTUREDADDRESS: String = 'UnstructuredAddress'
wszPROPDEVICESERIALNUMBER: String = 'DeviceSerialNumber'
wszPROPSUBJECTDOT: String = 'Subject.'
wszPROPREQUESTDOT: String = 'Request.'
wszPROPREQUESTREQUESTID: String = 'RequestID'
wszPROPREQUESTRAWREQUEST: String = 'RawRequest'
wszPROPREQUESTRAWARCHIVEDKEY: String = 'RawArchivedKey'
wszPROPREQUESTARCHIVEDKEY: String = 'ArchivedKey'
wszPROPREQUESTKEYRECOVERYHASHES: String = 'KeyRecoveryHashes'
wszPROPREQUESTRAWOLDCERTIFICATE: String = 'RawOldCertificate'
wszPROPREQUESTATTRIBUTES: String = 'RequestAttributes'
wszPROPREQUESTTYPE: String = 'RequestType'
wszPROPREQUESTFLAGS: String = 'RequestFlags'
wszPROPREQUESTSTATUSCODE: String = 'StatusCode'
wszPROPREQUESTDISPOSITION: String = 'Disposition'
wszPROPREQUESTDISPOSITIONMESSAGE: String = 'DispositionMessage'
wszPROPREQUESTSUBMITTEDWHEN: String = 'SubmittedWhen'
wszPROPREQUESTRESOLVEDWHEN: String = 'ResolvedWhen'
wszPROPREQUESTREVOKEDWHEN: String = 'RevokedWhen'
wszPROPREQUESTREVOKEDEFFECTIVEWHEN: String = 'RevokedEffectiveWhen'
wszPROPREQUESTREVOKEDREASON: String = 'RevokedReason'
wszPROPREQUESTERNAME: String = 'RequesterName'
wszPROPCALLERNAME: String = 'CallerName'
wszPROPSIGNERPOLICIES: String = 'SignerPolicies'
wszPROPSIGNERAPPLICATIONPOLICIES: String = 'SignerApplicationPolicies'
wszPROPOFFICER: String = 'Officer'
wszPROPPUBLISHEXPIREDCERTINCRL: String = 'PublishExpiredCertInCRL'
wszPROPREQUESTERNAMEFROMOLDCERTIFICATE: String = 'RequesterNameFromOldCertificate'
wszPROPATTESTATIONCHALLENGE: String = 'AttestationChallenge'
wszPROPENDORSEMENTKEYHASH: String = 'EndorsementKeyHash'
wszPROPENDORSEMENTCERTIFICATEHASH: String = 'EndorsementCertificateHash'
wszPROPRAWPRECERTIFICATE: String = 'RawPrecertificate'
wszPROPCRLPARTITIONINDEX: String = 'CRLPartitionIndex'
wszPROPCHALLENGE: String = 'Challenge'
wszPROPEXPECTEDCHALLENGE: String = 'ExpectedChallenge'
wszPROPDISPOSITION: String = 'Disposition'
wszPROPDISPOSITIONDENY: String = 'Deny'
wszPROPDISPOSITIONPENDING: String = 'Pending'
wszPROPVALIDITYPERIODSTRING: String = 'ValidityPeriod'
wszPROPVALIDITYPERIODCOUNT: String = 'ValidityPeriodUnits'
wszPROPEXPIRATIONDATE: String = 'ExpirationDate'
wszPROPCERTTYPE: String = 'CertType'
wszPROPCERTTEMPLATE: String = 'CertificateTemplate'
wszPROPCERTUSAGE: String = 'CertificateUsage'
wszPROPREQUESTOSVERSION: String = 'RequestOSVersion'
wszPROPREQUESTCSPPROVIDER: String = 'RequestCSPProvider'
wszPROPEXITCERTFILE: String = 'CertFile'
wszPROPCLIENTBROWSERMACHINE: String = 'cbm'
wszPROPCERTCLIENTMACHINE: String = 'ccm'
wszPROPCLIENTDCDNS: String = 'cdc'
wszPROPREQUESTMACHINEDNS: String = 'rmd'
wszPROPSUBJECTALTNAME2: String = 'san'
wszPROPDNS: String = 'dns'
wszPROPDN: String = 'dn'
wszPROPURL: String = 'url'
wszPROPIPADDRESS: String = 'ipaddress'
wszPROPGUID: String = 'guid'
wszPROPOID: String = 'oid'
wszPROPUPN: String = 'upn'
szPROPASNTAG: String = '{asn}'
wszPROPCRITICALTAG: String = '{critical}'
wszPROPUTF8TAG: String = '{utf8}'
wszPROPOCTETTAG: String = '{octet}'
wszPROPHEXTAG: String = '{hex}'
wszPROPTEXTTAG: String = '{text}'
wszPROPDECIMALTAG: String = '{decimal}'
wszPROPFILETAG: String = '{file}'
wszAT_EKCERTINF: String = '@EKCert'
wszAT_TESTROOT: String = '@TestRoot'
wszPROPCATYPE: String = 'CAType'
wszPROPSANITIZEDCANAME: String = 'SanitizedCAName'
wszPROPSANITIZEDSHORTNAME: String = 'SanitizedShortName'
wszPROPMACHINEDNSNAME: String = 'MachineDNSName'
wszPROPMODULEREGLOC: String = 'ModuleRegistryLocation'
wszPROPUSEDS: String = 'fUseDS'
wszPROPDELTACRLSDISABLED: String = 'fDeltaCRLsDisabled'
wszPROPSERVERUPGRADED: String = 'fServerUpgraded'
wszPROPCONFIGDN: String = 'ConfigDN'
wszPROPDOMAINDN: String = 'DomainDN'
wszPROPLOGLEVEL: String = 'LogLevel'
wszPROPSESSIONCOUNT: String = 'SessionCount'
wszPROPTEMPLATECHANGESEQUENCENUMBER: String = 'TemplateChangeSequenceNumber'
wszPROPVOLATILEMODE: String = 'VolatileMode'
wszLOCALIZEDTIMEPERIODUNITS: String = 'LocalizedTimePeriodUnits'
wszPROPREQUESTERCAACCESS: String = 'RequesterCAAccess'
wszPROPUSERDN: String = 'UserDN'
wszPROPKEYARCHIVED: String = 'KeyArchived'
wszPROPCERTCOUNT: String = 'CertCount'
wszPROPRAWCACERTIFICATE: String = 'RawCACertificate'
wszPROPCERTSTATE: String = 'CertState'
wszPROPCERTSUFFIX: String = 'CertSuffix'
wszPROPRAWCRL: String = 'RawCRL'
wszPROPRAWDELTACRL: String = 'RawDeltaCRL'
wszPROPCRLINDEX: String = 'CRLIndex'
wszPROPCRLSTATE: String = 'CRLState'
wszPROPCRLSUFFIX: String = 'CRLSuffix'
wszPROPEVENTLOGTERSE: String = 'EventLogTerse'
wszPROPEVENTLOGERROR: String = 'EventLogError'
wszPROPEVENTLOGWARNING: String = 'EventLogWarning'
wszPROPEVENTLOGVERBOSE: String = 'EventLogVerbose'
wszPROPEVENTLOGEXHAUSTIVE: String = 'EventLogExhaustive'
wszPROPDCNAME: String = 'DCName'
wszPROPCROSSFOREST: String = 'CrossForest'
wszPROPREQUESTERSAMNAME: String = 'RequesterSAMName'
wszPROPREQUESTERUPN: String = 'RequesterUPN'
wszPROPREQUESTERDN: String = 'RequesterDN'
wszPROPSEAUDITID: String = 'SEAuditId'
wszPROPSEAUDITFILTER: String = 'SEAuditFilter'
wszPROPCERTIFICATEREQUESTID: String = 'RequestID'
wszPROPRAWCERTIFICATE: String = 'RawCertificate'
wszPROPCERTIFICATEHASH: String = 'CertificateHash'
wszPROPCERTIFICATETEMPLATE: String = 'CertificateTemplate'
wszPROPCERTIFICATEENROLLMENTFLAGS: String = 'EnrollmentFlags'
wszPROPCERTIFICATEGENERALFLAGS: String = 'GeneralFlags'
wszPROPCERTIFICATEPRIVATEKEYFLAGS: String = 'PrivatekeyFlags'
wszPROPCERTIFICATESERIALNUMBER: String = 'SerialNumber'
wszPROPCERTIFICATENOTBEFOREDATE: String = 'NotBefore'
wszPROPCERTIFICATENOTAFTERDATE: String = 'NotAfter'
wszPROPCERTIFICATESUBJECTKEYIDENTIFIER: String = 'SubjectKeyIdentifier'
wszPROPCERTIFICATERAWPUBLICKEY: String = 'RawPublicKey'
wszPROPCERTIFICATEPUBLICKEYLENGTH: String = 'PublicKeyLength'
wszPROPCERTIFICATEPUBLICKEYALGORITHM: String = 'PublicKeyAlgorithm'
wszPROPCERTIFICATERAWPUBLICKEYALGORITHMPARAMETERS: String = 'RawPublicKeyAlgorithmParameters'
wszPROPCERTIFICATEUPN: String = 'UPN'
wszPROPCERTIFICATETYPE: String = 'CertificateType'
wszPROPCERTIFICATERAWSMIMECAPABILITIES: String = 'RawSMIMECapabilities'
wszPROPNAMETYPE: String = 'NameType'
EXTENSION_CRITICAL_FLAG: UInt32 = 1
EXTENSION_DISABLE_FLAG: UInt32 = 2
EXTENSION_DELETE_FLAG: UInt32 = 4
EXTENSION_POLICY_MASK: UInt32 = 65535
EXTENSION_ORIGIN_REQUEST: UInt32 = 65536
EXTENSION_ORIGIN_POLICY: UInt32 = 131072
EXTENSION_ORIGIN_ADMIN: UInt32 = 196608
EXTENSION_ORIGIN_SERVER: UInt32 = 262144
EXTENSION_ORIGIN_RENEWALCERT: UInt32 = 327680
EXTENSION_ORIGIN_IMPORTEDCERT: UInt32 = 393216
EXTENSION_ORIGIN_PKCS7: UInt32 = 458752
EXTENSION_ORIGIN_CMC: UInt32 = 524288
EXTENSION_ORIGIN_CACERT: UInt32 = 589824
EXTENSION_ORIGIN_MASK: UInt32 = 983040
wszPROPEXTREQUESTID: String = 'ExtensionRequestId'
wszPROPEXTNAME: String = 'ExtensionName'
wszPROPEXTFLAGS: String = 'ExtensionFlags'
wszPROPEXTRAWVALUE: String = 'ExtensionRawValue'
wszPROPATTRIBREQUESTID: String = 'AttributeRequestId'
wszPROPATTRIBNAME: String = 'AttributeName'
wszPROPATTRIBVALUE: String = 'AttributeValue'
wszPROPCRLROWID: String = 'CRLRowId'
wszPROPCRLNUMBER: String = 'CRLNumber'
wszPROPCRLMINBASE: String = 'CRLMinBase'
wszPROPCRLNAMEID: String = 'CRLNameId'
wszPROPCRLCOUNT: String = 'CRLCount'
wszPROPCRLTHISUPDATE: String = 'CRLThisUpdate'
wszPROPCRLNEXTUPDATE: String = 'CRLNextUpdate'
wszPROPCRLTHISPUBLISH: String = 'CRLThisPublish'
wszPROPCRLNEXTPUBLISH: String = 'CRLNextPublish'
wszPROPCRLEFFECTIVE: String = 'CRLEffective'
wszPROPCRLPROPAGATIONCOMPLETE: String = 'CRLPropagationComplete'
wszPROPCRLLASTPUBLISHED: String = 'CRLLastPublished'
wszPROPCRLPUBLISHATTEMPTS: String = 'CRLPublishAttempts'
wszPROPCRLPUBLISHFLAGS: String = 'CRLPublishFlags'
wszPROPCRLPUBLISHSTATUSCODE: String = 'CRLPublishStatusCode'
wszPROPCRLPUBLISHERROR: String = 'CRLPublishError'
wszPROPCRLRAWCRL: String = 'CRLRawCRL'
CPF_BASE: UInt32 = 1
CPF_DELTA: UInt32 = 2
CPF_COMPLETE: UInt32 = 4
CPF_SHADOW: UInt32 = 8
CPF_CASTORE_ERROR: UInt32 = 16
CPF_BADURL_ERROR: UInt32 = 32
CPF_MANUAL: UInt32 = 64
CPF_SIGNATURE_ERROR: UInt32 = 128
CPF_LDAP_ERROR: UInt32 = 256
CPF_FILE_ERROR: UInt32 = 512
CPF_FTP_ERROR: UInt32 = 1024
CPF_HTTP_ERROR: UInt32 = 2048
CPF_POSTPONED_BASE_LDAP_ERROR: UInt32 = 4096
CPF_POSTPONED_BASE_FILE_ERROR: UInt32 = 8192
PROPTYPE_MASK: UInt32 = 255
PROPCALLER_SERVER: UInt32 = 256
PROPCALLER_POLICY: UInt32 = 512
PROPCALLER_EXIT: UInt32 = 768
PROPCALLER_ADMIN: UInt32 = 1024
PROPCALLER_REQUEST: UInt32 = 1280
PROPCALLER_MASK: UInt32 = 3840
PROPFLAGS_INDEXED: UInt32 = 65536
CR_FLG_FORCETELETEX: UInt32 = 1
CR_FLG_RENEWAL: UInt32 = 2
CR_FLG_FORCEUTF8: UInt32 = 4
CR_FLG_CAXCHGCERT: UInt32 = 8
CR_FLG_ENROLLONBEHALFOF: UInt32 = 16
CR_FLG_SUBJECTUNMODIFIED: UInt32 = 32
CR_FLG_VALIDENCRYPTEDKEYHASH: UInt32 = 64
CR_FLG_CACROSSCERT: UInt32 = 128
CR_FLG_ENFORCEUTF8: UInt32 = 256
CR_FLG_DEFINEDCACERT: UInt32 = 512
CR_FLG_CHALLENGEPENDING: UInt32 = 1024
CR_FLG_CHALLENGESATISFIED: UInt32 = 2048
CR_FLG_TRUSTONUSE: UInt32 = 4096
CR_FLG_TRUSTEKCERT: UInt32 = 8192
CR_FLG_TRUSTEKKEY: UInt32 = 16384
CR_FLG_PUBLISHERROR: UInt32 = 2147483648
DB_DISP_ACTIVE: UInt32 = 8
DB_DISP_PENDING: UInt32 = 9
DB_DISP_QUEUE_MAX: UInt32 = 9
DB_DISP_FOREIGN: UInt32 = 12
DB_DISP_CA_CERT: UInt32 = 15
DB_DISP_CA_CERT_CHAIN: UInt32 = 16
DB_DISP_KRA_CERT: UInt32 = 17
DB_DISP_LOG_MIN: UInt32 = 20
DB_DISP_ISSUED: UInt32 = 20
DB_DISP_REVOKED: UInt32 = 21
DB_DISP_LOG_FAILED_MIN: UInt32 = 30
DB_DISP_ERROR: UInt32 = 30
DB_DISP_DENIED: UInt32 = 31
VR_PENDING: UInt32 = 0
VR_INSTANT_OK: UInt32 = 1
VR_INSTANT_BAD: UInt32 = 2
wszCERT_TYPE: String = 'RequestType'
wszCERT_TYPE_CLIENT: String = 'Client'
wszCERT_TYPE_SERVER: String = 'Server'
wszCERT_TYPE_CODESIGN: String = 'CodeSign'
wszCERT_TYPE_CUSTOMER: String = 'SetCustomer'
wszCERT_TYPE_MERCHANT: String = 'SetMerchant'
wszCERT_TYPE_PAYMENT: String = 'SetPayment'
wszCERT_VERSION: String = 'Version'
wszCERT_VERSION_1: String = '1'
wszCERT_VERSION_2: String = '2'
wszCERT_VERSION_3: String = '3'
CV_OUT_HEXRAW: UInt32 = 12
CV_OUT_ENCODEMASK: UInt32 = 255
CV_OUT_NOCRLF: UInt32 = 1073741824
CV_OUT_NOCR: UInt32 = 2147483648
CVR_SEEK_NONE: UInt32 = 0
CVR_SEEK_MASK: UInt32 = 255
CVR_SEEK_NODELTA: UInt32 = 4096
CVR_SORT_NONE: UInt32 = 0
CVR_SORT_ASCEND: UInt32 = 1
CVR_SORT_DESCEND: UInt32 = 2
CV_COLUMN_EXTENSION_DEFAULT: Int32 = -4
CV_COLUMN_ATTRIBUTE_DEFAULT: Int32 = -5
CV_COLUMN_CRL_DEFAULT: Int32 = -6
CV_COLUMN_LOG_REVOKED_DEFAULT: Int32 = -7
CVRC_TABLE_MASK: UInt32 = 61440
CVRC_TABLE_SHIFT: UInt32 = 12
CRYPT_ENUM_ALL_PROVIDERS: UInt32 = 1
XEPR_ENUM_FIRST: Int32 = -1
XEPR_DATE: UInt32 = 5
XEPR_TEMPLATENAME: UInt32 = 6
XEPR_VERSION: UInt32 = 7
XEPR_V1TEMPLATENAME: UInt32 = 9
XEPR_V2TEMPLATEOID: UInt32 = 16
XEKL_KEYSIZE_DEFAULT: UInt32 = 4
XECP_STRING_PROPERTY: UInt32 = 1
XECI_DISABLE: UInt32 = 0
XECI_XENROLL: UInt32 = 1
XECI_AUTOENROLL: UInt32 = 2
XECI_REQWIZARD: UInt32 = 3
XECI_CERTREQ: UInt32 = 4
wszCMM_PROP_NAME: String = 'Name'
wszCMM_PROP_DESCRIPTION: String = 'Description'
wszCMM_PROP_COPYRIGHT: String = 'Copyright'
wszCMM_PROP_FILEVER: String = 'File Version'
wszCMM_PROP_PRODUCTVER: String = 'Product Version'
wszCMM_PROP_DISPLAY_HWND: String = 'HWND'
wszCMM_PROP_ISMULTITHREADED: String = 'IsMultiThreaded'
@winfunctype('certadm.dll')
def CertSrvIsServerOnlineW(pwszServerName: win32more.Windows.Win32.Foundation.PWSTR, pfServerOnline: POINTER(win32more.Windows.Win32.Foundation.BOOL)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
@winfunctype('certadm.dll')
def CertSrvBackupGetDynamicFileListW(hbc: VoidPtr, ppwszzFileList: POINTER(win32more.Windows.Win32.Foundation.PWSTR), pcbSize: POINTER(UInt32)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
@winfunctype('certadm.dll')
def CertSrvBackupPrepareW(pwszServerName: win32more.Windows.Win32.Foundation.PWSTR, grbitJet: UInt32, dwBackupFlags: win32more.Windows.Win32.Security.Cryptography.Certificates.CSBACKUP_TYPE, phbc: POINTER(VoidPtr)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
@winfunctype('certadm.dll')
def CertSrvBackupGetDatabaseNamesW(hbc: VoidPtr, ppwszzAttachmentInformation: POINTER(win32more.Windows.Win32.Foundation.PWSTR), pcbSize: POINTER(UInt32)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
@winfunctype('certadm.dll')
def CertSrvBackupOpenFileW(hbc: VoidPtr, pwszAttachmentName: win32more.Windows.Win32.Foundation.PWSTR, cbReadHintSize: UInt32, pliFileSize: POINTER(Int64)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
@winfunctype('certadm.dll')
def CertSrvBackupRead(hbc: VoidPtr, pvBuffer: VoidPtr, cbBuffer: UInt32, pcbRead: POINTER(UInt32)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
@winfunctype('certadm.dll')
def CertSrvBackupClose(hbc: VoidPtr) -> win32more.Windows.Win32.Foundation.HRESULT: ...
@winfunctype('certadm.dll')
def CertSrvBackupGetBackupLogsW(hbc: VoidPtr, ppwszzBackupLogFiles: POINTER(win32more.Windows.Win32.Foundation.PWSTR), pcbSize: POINTER(UInt32)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
@winfunctype('certadm.dll')
def CertSrvBackupTruncateLogs(hbc: VoidPtr) -> win32more.Windows.Win32.Foundation.HRESULT: ...
@winfunctype('certadm.dll')
def CertSrvBackupEnd(hbc: VoidPtr) -> win32more.Windows.Win32.Foundation.HRESULT: ...
@winfunctype('certadm.dll')
def CertSrvBackupFree(pv: VoidPtr) -> Void: ...
@winfunctype('certadm.dll')
def CertSrvRestoreGetDatabaseLocationsW(hbc: VoidPtr, ppwszzDatabaseLocationList: POINTER(win32more.Windows.Win32.Foundation.PWSTR), pcbSize: POINTER(UInt32)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
@winfunctype('certadm.dll')
def CertSrvRestorePrepareW(pwszServerName: win32more.Windows.Win32.Foundation.PWSTR, dwRestoreFlags: UInt32, phbc: POINTER(VoidPtr)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
@winfunctype('certadm.dll')
def CertSrvRestoreRegisterW(hbc: VoidPtr, pwszCheckPointFilePath: win32more.Windows.Win32.Foundation.PWSTR, pwszLogPath: win32more.Windows.Win32.Foundation.PWSTR, rgrstmap: POINTER(win32more.Windows.Win32.Security.Cryptography.Certificates.CSEDB_RSTMAPW), crstmap: Int32, pwszBackupLogPath: win32more.Windows.Win32.Foundation.PWSTR, genLow: UInt32, genHigh: UInt32) -> win32more.Windows.Win32.Foundation.HRESULT: ...
@winfunctype('certadm.dll')
def CertSrvRestoreRegisterThroughFile(hbc: VoidPtr, pwszCheckPointFilePath: win32more.Windows.Win32.Foundation.PWSTR, pwszLogPath: win32more.Windows.Win32.Foundation.PWSTR, rgrstmap: POINTER(win32more.Windows.Win32.Security.Cryptography.Certificates.CSEDB_RSTMAPW), crstmap: Int32, pwszBackupLogPath: win32more.Windows.Win32.Foundation.PWSTR, genLow: UInt32, genHigh: UInt32) -> win32more.Windows.Win32.Foundation.HRESULT: ...
@winfunctype('certadm.dll')
def CertSrvRestoreRegisterComplete(hbc: VoidPtr, hrRestoreState: win32more.Windows.Win32.Foundation.HRESULT) -> win32more.Windows.Win32.Foundation.HRESULT: ...
@winfunctype('certadm.dll')
def CertSrvRestoreEnd(hbc: VoidPtr) -> win32more.Windows.Win32.Foundation.HRESULT: ...
@winfunctype('certadm.dll')
def CertSrvServerControlW(pwszServerName: win32more.Windows.Win32.Foundation.PWSTR, dwControlFlags: UInt32, pcbOut: POINTER(UInt32), ppbOut: POINTER(POINTER(Byte))) -> win32more.Windows.Win32.Foundation.HRESULT: ...
@winfunctype('certpoleng.dll')
def PstGetTrustAnchors(pTargetName: POINTER(win32more.Windows.Win32.Foundation.UNICODE_STRING), cCriteria: UInt32, rgpCriteria: POINTER(win32more.Windows.Win32.Security.Cryptography.CERT_SELECT_CRITERIA), ppTrustedIssuers: POINTER(POINTER(win32more.Windows.Win32.Security.Authentication.Identity.SecPkgContext_IssuerListInfoEx))) -> win32more.Windows.Win32.Foundation.NTSTATUS: ...
@winfunctype('certpoleng.dll')
def PstGetTrustAnchorsEx(pTargetName: POINTER(win32more.Windows.Win32.Foundation.UNICODE_STRING), cCriteria: UInt32, rgpCriteria: POINTER(win32more.Windows.Win32.Security.Cryptography.CERT_SELECT_CRITERIA), pCertContext: POINTER(win32more.Windows.Win32.Security.Cryptography.CERT_CONTEXT), ppTrustedIssuers: POINTER(POINTER(win32more.Windows.Win32.Security.Authentication.Identity.SecPkgContext_IssuerListInfoEx))) -> win32more.Windows.Win32.Foundation.NTSTATUS: ...
@winfunctype('certpoleng.dll')
def PstGetCertificateChain(pCert: POINTER(win32more.Windows.Win32.Security.Cryptography.CERT_CONTEXT), pTrustedIssuers: POINTER(win32more.Windows.Win32.Security.Authentication.Identity.SecPkgContext_IssuerListInfoEx), ppCertChainContext: POINTER(POINTER(win32more.Windows.Win32.Security.Cryptography.CERT_CHAIN_CONTEXT))) -> win32more.Windows.Win32.Foundation.NTSTATUS: ...
@winfunctype('certpoleng.dll')
def PstGetCertificates(pTargetName: POINTER(win32more.Windows.Win32.Foundation.UNICODE_STRING), cCriteria: UInt32, rgpCriteria: POINTER(win32more.Windows.Win32.Security.Cryptography.CERT_SELECT_CRITERIA), bIsClient: win32more.Windows.Win32.Foundation.BOOL, pdwCertChainContextCount: POINTER(UInt32), ppCertChainContexts: POINTER(POINTER(POINTER(win32more.Windows.Win32.Security.Cryptography.CERT_CHAIN_CONTEXT)))) -> win32more.Windows.Win32.Foundation.NTSTATUS: ...
@winfunctype('certpoleng.dll')
def PstAcquirePrivateKey(pCert: POINTER(win32more.Windows.Win32.Security.Cryptography.CERT_CONTEXT)) -> win32more.Windows.Win32.Foundation.NTSTATUS: ...
@winfunctype('certpoleng.dll')
def PstValidate(pTargetName: POINTER(win32more.Windows.Win32.Foundation.UNICODE_STRING), bIsClient: win32more.Windows.Win32.Foundation.BOOL, pRequestedIssuancePolicy: POINTER(win32more.Windows.Win32.Security.Cryptography.CERT_USAGE_MATCH), phAdditionalCertStore: POINTER(win32more.Windows.Win32.Security.Cryptography.HCERTSTORE), pCert: POINTER(win32more.Windows.Win32.Security.Cryptography.CERT_CONTEXT), pProvGUID: POINTER(Guid)) -> win32more.Windows.Win32.Foundation.NTSTATUS: ...
@winfunctype('certpoleng.dll')
def PstMapCertificate(pCert: POINTER(win32more.Windows.Win32.Security.Cryptography.CERT_CONTEXT), pTokenInformationType: POINTER(win32more.Windows.Win32.Security.Authentication.Identity.LSA_TOKEN_INFORMATION_TYPE), ppTokenInformation: POINTER(VoidPtr)) -> win32more.Windows.Win32.Foundation.NTSTATUS: ...
@winfunctype('certpoleng.dll')
def PstGetUserNameForCertificate(pCertContext: POINTER(win32more.Windows.Win32.Security.Cryptography.CERT_CONTEXT), UserName: POINTER(win32more.Windows.Win32.Foundation.UNICODE_STRING)) -> win32more.Windows.Win32.Foundation.NTSTATUS: ...
class CAINFO(Structure):
    cbSize: UInt32
    CAType: win32more.Windows.Win32.Security.Cryptography.Certificates.ENUM_CATYPES
    cCASignatureCerts: UInt32
    cCAExchangeCerts: UInt32
    cExitModules: UInt32
    lPropIdMax: Int32
    lRoleSeparationEnabled: Int32
    cKRACertUsedCount: UInt32
    cKRACertCount: UInt32
    fAdvancedServer: UInt32
CAlternativeName = Guid('{884e2013-217d-11da-b2a4-000e7bbb2b09}')
CAlternativeNames = Guid('{884e2014-217d-11da-b2a4-000e7bbb2b09}')
CBinaryConverter = Guid('{884e2002-217d-11da-b2a4-000e7bbb2b09}')
CCertAdmin = Guid('{37eabaf0-7fb6-11d0-8817-00a0c903b83c}')
CCertConfig = Guid('{372fce38-4324-11d0-8810-00a0c903b83c}')
CCertEncodeAltName = Guid('{1cfc4cda-1271-11d1-9bd4-00c04fb683fa}')
CCertEncodeBitString = Guid('{6d6b3cd8-1278-11d1-9bd4-00c04fb683fa}')
CCertEncodeCRLDistInfo = Guid('{01fa60a0-bbff-11d0-8825-00a0c903b83c}')
CCertEncodeDateArray = Guid('{301f77b0-a470-11d0-8821-00a0c903b83c}')
CCertEncodeLongArray = Guid('{4e0680a0-a0a2-11d0-8821-00a0c903b83c}')
CCertEncodeStringArray = Guid('{19a76fe0-7494-11d0-8816-00a0c903b83c}')
CCertGetConfig = Guid('{c6cc49b0-ce17-11d0-8833-00a0c903b83c}')
CCertProperties = Guid('{884e202f-217d-11da-b2a4-000e7bbb2b09}')
CCertProperty = Guid('{884e202e-217d-11da-b2a4-000e7bbb2b09}')
CCertPropertyArchived = Guid('{884e2037-217d-11da-b2a4-000e7bbb2b09}')
CCertPropertyArchivedKeyHash = Guid('{884e203b-217d-11da-b2a4-000e7bbb2b09}')
CCertPropertyAutoEnroll = Guid('{884e2032-217d-11da-b2a4-000e7bbb2b09}')
CCertPropertyBackedUp = Guid('{884e2038-217d-11da-b2a4-000e7bbb2b09}')
CCertPropertyDescription = Guid('{884e2031-217d-11da-b2a4-000e7bbb2b09}')
CCertPropertyEnrollment = Guid('{884e2039-217d-11da-b2a4-000e7bbb2b09}')
CCertPropertyEnrollmentPolicyServer = Guid('{884e204c-217d-11da-b2a4-000e7bbb2b09}')
CCertPropertyFriendlyName = Guid('{884e2030-217d-11da-b2a4-000e7bbb2b09}')
CCertPropertyKeyProvInfo = Guid('{884e2036-217d-11da-b2a4-000e7bbb2b09}')
CCertPropertyRenewal = Guid('{884e203a-217d-11da-b2a4-000e7bbb2b09}')
CCertPropertyRequestOriginator = Guid('{884e2033-217d-11da-b2a4-000e7bbb2b09}')
CCertPropertySHA1Hash = Guid('{884e2034-217d-11da-b2a4-000e7bbb2b09}')
CCertRequest = Guid('{98aff3f0-5524-11d0-8812-00a0c903b83c}')
CCertServerExit = Guid('{4c4a5e40-732c-11d0-8816-00a0c903b83c}')
CCertServerPolicy = Guid('{aa000926-ffbe-11cf-8800-00a0c903b83c}')
CCertView = Guid('{a12d0f7a-1e84-11d1-9bd6-00c04fb683fa}')
CCertificateAttestationChallenge = Guid('{1362ada1-eb60-456a-b6e1-118050db741b}')
CCertificatePolicies = Guid('{884e201f-217d-11da-b2a4-000e7bbb2b09}')
CCertificatePolicy = Guid('{884e201e-217d-11da-b2a4-000e7bbb2b09}')
CCryptAttribute = Guid('{884e202c-217d-11da-b2a4-000e7bbb2b09}')
CCryptAttributes = Guid('{884e202d-217d-11da-b2a4-000e7bbb2b09}')
CCspInformation = Guid('{884e2007-217d-11da-b2a4-000e7bbb2b09}')
CCspInformations = Guid('{884e2008-217d-11da-b2a4-000e7bbb2b09}')
CCspStatus = Guid('{884e2009-217d-11da-b2a4-000e7bbb2b09}')
CERTADMIN_GET_ROLES_FLAGS = UInt32
CA_ACCESS_ADMIN: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTADMIN_GET_ROLES_FLAGS = 1
CA_ACCESS_AUDITOR: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTADMIN_GET_ROLES_FLAGS = 4
CA_ACCESS_ENROLL: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTADMIN_GET_ROLES_FLAGS = 512
CA_ACCESS_OFFICER: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTADMIN_GET_ROLES_FLAGS = 2
CA_ACCESS_OPERATOR: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTADMIN_GET_ROLES_FLAGS = 8
CA_ACCESS_READ: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTADMIN_GET_ROLES_FLAGS = 256
CERTENROLL_OBJECTID = Int32
XCN_OID_NONE: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 0
XCN_OID_RSA: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 1
XCN_OID_PKCS: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 2
XCN_OID_RSA_HASH: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 3
XCN_OID_RSA_ENCRYPT: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 4
XCN_OID_PKCS_1: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 5
XCN_OID_PKCS_2: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 6
XCN_OID_PKCS_3: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 7
XCN_OID_PKCS_4: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 8
XCN_OID_PKCS_5: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 9
XCN_OID_PKCS_6: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 10
XCN_OID_PKCS_7: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 11
XCN_OID_PKCS_8: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 12
XCN_OID_PKCS_9: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 13
XCN_OID_PKCS_10: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 14
XCN_OID_PKCS_12: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 15
XCN_OID_RSA_RSA: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 16
XCN_OID_RSA_MD2RSA: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 17
XCN_OID_RSA_MD4RSA: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 18
XCN_OID_RSA_MD5RSA: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 19
XCN_OID_RSA_SHA1RSA: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 20
XCN_OID_RSA_SETOAEP_RSA: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 21
XCN_OID_RSA_DH: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 22
XCN_OID_RSA_data: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 23
XCN_OID_RSA_signedData: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 24
XCN_OID_RSA_envelopedData: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 25
XCN_OID_RSA_signEnvData: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 26
XCN_OID_RSA_digestedData: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 27
XCN_OID_RSA_hashedData: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 28
XCN_OID_RSA_encryptedData: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 29
XCN_OID_RSA_emailAddr: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 30
XCN_OID_RSA_unstructName: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 31
XCN_OID_RSA_contentType: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 32
XCN_OID_RSA_messageDigest: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 33
XCN_OID_RSA_signingTime: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 34
XCN_OID_RSA_counterSign: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 35
XCN_OID_RSA_challengePwd: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 36
XCN_OID_RSA_unstructAddr: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 37
XCN_OID_RSA_extCertAttrs: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 38
XCN_OID_RSA_certExtensions: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 39
XCN_OID_RSA_SMIMECapabilities: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 40
XCN_OID_RSA_preferSignedData: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 41
XCN_OID_RSA_SMIMEalg: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 42
XCN_OID_RSA_SMIMEalgESDH: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 43
XCN_OID_RSA_SMIMEalgCMS3DESwrap: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 44
XCN_OID_RSA_SMIMEalgCMSRC2wrap: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 45
XCN_OID_RSA_MD2: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 46
XCN_OID_RSA_MD4: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 47
XCN_OID_RSA_MD5: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 48
XCN_OID_RSA_RC2CBC: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 49
XCN_OID_RSA_RC4: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 50
XCN_OID_RSA_DES_EDE3_CBC: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 51
XCN_OID_RSA_RC5_CBCPad: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 52
XCN_OID_ANSI_X942: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 53
XCN_OID_ANSI_X942_DH: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 54
XCN_OID_X957: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 55
XCN_OID_X957_DSA: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 56
XCN_OID_X957_SHA1DSA: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 57
XCN_OID_DS: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 58
XCN_OID_DSALG: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 59
XCN_OID_DSALG_CRPT: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 60
XCN_OID_DSALG_HASH: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 61
XCN_OID_DSALG_SIGN: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 62
XCN_OID_DSALG_RSA: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 63
XCN_OID_OIW: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 64
XCN_OID_OIWSEC: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 65
XCN_OID_OIWSEC_md4RSA: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 66
XCN_OID_OIWSEC_md5RSA: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 67
XCN_OID_OIWSEC_md4RSA2: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 68
XCN_OID_OIWSEC_desECB: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 69
XCN_OID_OIWSEC_desCBC: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 70
XCN_OID_OIWSEC_desOFB: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 71
XCN_OID_OIWSEC_desCFB: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 72
XCN_OID_OIWSEC_desMAC: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 73
XCN_OID_OIWSEC_rsaSign: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 74
XCN_OID_OIWSEC_dsa: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 75
XCN_OID_OIWSEC_shaDSA: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 76
XCN_OID_OIWSEC_mdc2RSA: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 77
XCN_OID_OIWSEC_shaRSA: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 78
XCN_OID_OIWSEC_dhCommMod: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 79
XCN_OID_OIWSEC_desEDE: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 80
XCN_OID_OIWSEC_sha: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 81
XCN_OID_OIWSEC_mdc2: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 82
XCN_OID_OIWSEC_dsaComm: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 83
XCN_OID_OIWSEC_dsaCommSHA: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 84
XCN_OID_OIWSEC_rsaXchg: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 85
XCN_OID_OIWSEC_keyHashSeal: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 86
XCN_OID_OIWSEC_md2RSASign: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 87
XCN_OID_OIWSEC_md5RSASign: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 88
XCN_OID_OIWSEC_sha1: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 89
XCN_OID_OIWSEC_dsaSHA1: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 90
XCN_OID_OIWSEC_dsaCommSHA1: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 91
XCN_OID_OIWSEC_sha1RSASign: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 92
XCN_OID_OIWDIR: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 93
XCN_OID_OIWDIR_CRPT: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 94
XCN_OID_OIWDIR_HASH: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 95
XCN_OID_OIWDIR_SIGN: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 96
XCN_OID_OIWDIR_md2: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 97
XCN_OID_OIWDIR_md2RSA: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 98
XCN_OID_INFOSEC: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 99
XCN_OID_INFOSEC_sdnsSignature: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 100
XCN_OID_INFOSEC_mosaicSignature: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 101
XCN_OID_INFOSEC_sdnsConfidentiality: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 102
XCN_OID_INFOSEC_mosaicConfidentiality: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 103
XCN_OID_INFOSEC_sdnsIntegrity: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 104
XCN_OID_INFOSEC_mosaicIntegrity: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 105
XCN_OID_INFOSEC_sdnsTokenProtection: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 106
XCN_OID_INFOSEC_mosaicTokenProtection: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 107
XCN_OID_INFOSEC_sdnsKeyManagement: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 108
XCN_OID_INFOSEC_mosaicKeyManagement: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 109
XCN_OID_INFOSEC_sdnsKMandSig: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 110
XCN_OID_INFOSEC_mosaicKMandSig: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 111
XCN_OID_INFOSEC_SuiteASignature: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 112
XCN_OID_INFOSEC_SuiteAConfidentiality: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 113
XCN_OID_INFOSEC_SuiteAIntegrity: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 114
XCN_OID_INFOSEC_SuiteATokenProtection: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 115
XCN_OID_INFOSEC_SuiteAKeyManagement: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 116
XCN_OID_INFOSEC_SuiteAKMandSig: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 117
XCN_OID_INFOSEC_mosaicUpdatedSig: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 118
XCN_OID_INFOSEC_mosaicKMandUpdSig: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 119
XCN_OID_INFOSEC_mosaicUpdatedInteg: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 120
XCN_OID_COMMON_NAME: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 121
XCN_OID_SUR_NAME: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 122
XCN_OID_DEVICE_SERIAL_NUMBER: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 123
XCN_OID_COUNTRY_NAME: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 124
XCN_OID_LOCALITY_NAME: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 125
XCN_OID_STATE_OR_PROVINCE_NAME: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 126
XCN_OID_STREET_ADDRESS: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 127
XCN_OID_ORGANIZATION_NAME: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 128
XCN_OID_ORGANIZATIONAL_UNIT_NAME: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 129
XCN_OID_TITLE: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 130
XCN_OID_DESCRIPTION: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 131
XCN_OID_SEARCH_GUIDE: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 132
XCN_OID_BUSINESS_CATEGORY: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 133
XCN_OID_POSTAL_ADDRESS: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 134
XCN_OID_POSTAL_CODE: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 135
XCN_OID_POST_OFFICE_BOX: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 136
XCN_OID_PHYSICAL_DELIVERY_OFFICE_NAME: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 137
XCN_OID_TELEPHONE_NUMBER: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 138
XCN_OID_TELEX_NUMBER: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 139
XCN_OID_TELETEXT_TERMINAL_IDENTIFIER: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 140
XCN_OID_FACSIMILE_TELEPHONE_NUMBER: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 141
XCN_OID_X21_ADDRESS: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 142
XCN_OID_INTERNATIONAL_ISDN_NUMBER: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 143
XCN_OID_REGISTERED_ADDRESS: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 144
XCN_OID_DESTINATION_INDICATOR: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 145
XCN_OID_PREFERRED_DELIVERY_METHOD: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 146
XCN_OID_PRESENTATION_ADDRESS: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 147
XCN_OID_SUPPORTED_APPLICATION_CONTEXT: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 148
XCN_OID_MEMBER: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 149
XCN_OID_OWNER: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 150
XCN_OID_ROLE_OCCUPANT: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 151
XCN_OID_SEE_ALSO: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 152
XCN_OID_USER_PASSWORD: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 153
XCN_OID_USER_CERTIFICATE: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 154
XCN_OID_CA_CERTIFICATE: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 155
XCN_OID_AUTHORITY_REVOCATION_LIST: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 156
XCN_OID_CERTIFICATE_REVOCATION_LIST: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 157
XCN_OID_CROSS_CERTIFICATE_PAIR: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 158
XCN_OID_GIVEN_NAME: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 159
XCN_OID_INITIALS: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 160
XCN_OID_DN_QUALIFIER: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 161
XCN_OID_DOMAIN_COMPONENT: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 162
XCN_OID_PKCS_12_FRIENDLY_NAME_ATTR: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 163
XCN_OID_PKCS_12_LOCAL_KEY_ID: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 164
XCN_OID_PKCS_12_KEY_PROVIDER_NAME_ATTR: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 165
XCN_OID_LOCAL_MACHINE_KEYSET: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 166
XCN_OID_PKCS_12_EXTENDED_ATTRIBUTES: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 167
XCN_OID_KEYID_RDN: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 168
XCN_OID_AUTHORITY_KEY_IDENTIFIER: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 169
XCN_OID_KEY_ATTRIBUTES: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 170
XCN_OID_CERT_POLICIES_95: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 171
XCN_OID_KEY_USAGE_RESTRICTION: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 172
XCN_OID_SUBJECT_ALT_NAME: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 173
XCN_OID_ISSUER_ALT_NAME: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 174
XCN_OID_BASIC_CONSTRAINTS: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 175
XCN_OID_KEY_USAGE: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 176
XCN_OID_PRIVATEKEY_USAGE_PERIOD: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 177
XCN_OID_BASIC_CONSTRAINTS2: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 178
XCN_OID_CERT_POLICIES: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 179
XCN_OID_ANY_CERT_POLICY: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 180
XCN_OID_AUTHORITY_KEY_IDENTIFIER2: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 181
XCN_OID_SUBJECT_KEY_IDENTIFIER: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 182
XCN_OID_SUBJECT_ALT_NAME2: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 183
XCN_OID_ISSUER_ALT_NAME2: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 184
XCN_OID_CRL_REASON_CODE: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 185
XCN_OID_REASON_CODE_HOLD: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 186
XCN_OID_CRL_DIST_POINTS: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 187
XCN_OID_ENHANCED_KEY_USAGE: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 188
XCN_OID_CRL_NUMBER: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 189
XCN_OID_DELTA_CRL_INDICATOR: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 190
XCN_OID_ISSUING_DIST_POINT: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 191
XCN_OID_FRESHEST_CRL: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 192
XCN_OID_NAME_CONSTRAINTS: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 193
XCN_OID_POLICY_MAPPINGS: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 194
XCN_OID_LEGACY_POLICY_MAPPINGS: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 195
XCN_OID_POLICY_CONSTRAINTS: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 196
XCN_OID_RENEWAL_CERTIFICATE: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 197
XCN_OID_ENROLLMENT_NAME_VALUE_PAIR: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 198
XCN_OID_ENROLLMENT_CSP_PROVIDER: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 199
XCN_OID_OS_VERSION: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 200
XCN_OID_ENROLLMENT_AGENT: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 201
XCN_OID_PKIX: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 202
XCN_OID_PKIX_PE: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 203
XCN_OID_AUTHORITY_INFO_ACCESS: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 204
XCN_OID_BIOMETRIC_EXT: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 205
XCN_OID_LOGOTYPE_EXT: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 206
XCN_OID_CERT_EXTENSIONS: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 207
XCN_OID_NEXT_UPDATE_LOCATION: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 208
XCN_OID_REMOVE_CERTIFICATE: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 209
XCN_OID_CROSS_CERT_DIST_POINTS: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 210
XCN_OID_CTL: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 211
XCN_OID_SORTED_CTL: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 212
XCN_OID_SERIALIZED: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 213
XCN_OID_NT_PRINCIPAL_NAME: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 214
XCN_OID_PRODUCT_UPDATE: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 215
XCN_OID_ANY_APPLICATION_POLICY: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 216
XCN_OID_AUTO_ENROLL_CTL_USAGE: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 217
XCN_OID_ENROLL_CERTTYPE_EXTENSION: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 218
XCN_OID_CERT_MANIFOLD: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 219
XCN_OID_CERTSRV_CA_VERSION: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 220
XCN_OID_CERTSRV_PREVIOUS_CERT_HASH: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 221
XCN_OID_CRL_VIRTUAL_BASE: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 222
XCN_OID_CRL_NEXT_PUBLISH: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 223
XCN_OID_KP_CA_EXCHANGE: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 224
XCN_OID_KP_KEY_RECOVERY_AGENT: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 225
XCN_OID_CERTIFICATE_TEMPLATE: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 226
XCN_OID_ENTERPRISE_OID_ROOT: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 227
XCN_OID_RDN_DUMMY_SIGNER: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 228
XCN_OID_APPLICATION_CERT_POLICIES: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 229
XCN_OID_APPLICATION_POLICY_MAPPINGS: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 230
XCN_OID_APPLICATION_POLICY_CONSTRAINTS: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 231
XCN_OID_ARCHIVED_KEY_ATTR: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 232
XCN_OID_CRL_SELF_CDP: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 233
XCN_OID_REQUIRE_CERT_CHAIN_POLICY: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 234
XCN_OID_ARCHIVED_KEY_CERT_HASH: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 235
XCN_OID_ISSUED_CERT_HASH: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 236
XCN_OID_DS_EMAIL_REPLICATION: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 237
XCN_OID_REQUEST_CLIENT_INFO: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 238
XCN_OID_ENCRYPTED_KEY_HASH: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 239
XCN_OID_CERTSRV_CROSSCA_VERSION: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 240
XCN_OID_NTDS_REPLICATION: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 241
XCN_OID_SUBJECT_DIR_ATTRS: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 242
XCN_OID_PKIX_KP: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 243
XCN_OID_PKIX_KP_SERVER_AUTH: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 244
XCN_OID_PKIX_KP_CLIENT_AUTH: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 245
XCN_OID_PKIX_KP_CODE_SIGNING: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 246
XCN_OID_PKIX_KP_EMAIL_PROTECTION: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 247
XCN_OID_PKIX_KP_IPSEC_END_SYSTEM: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 248
XCN_OID_PKIX_KP_IPSEC_TUNNEL: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 249
XCN_OID_PKIX_KP_IPSEC_USER: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 250
XCN_OID_PKIX_KP_TIMESTAMP_SIGNING: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 251
XCN_OID_PKIX_KP_OCSP_SIGNING: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 252
XCN_OID_PKIX_OCSP_NOCHECK: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 253
XCN_OID_IPSEC_KP_IKE_INTERMEDIATE: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 254
XCN_OID_KP_CTL_USAGE_SIGNING: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 255
XCN_OID_KP_TIME_STAMP_SIGNING: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 256
XCN_OID_SERVER_GATED_CRYPTO: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 257
XCN_OID_SGC_NETSCAPE: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 258
XCN_OID_KP_EFS: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 259
XCN_OID_EFS_RECOVERY: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 260
XCN_OID_WHQL_CRYPTO: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 261
XCN_OID_NT5_CRYPTO: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 262
XCN_OID_OEM_WHQL_CRYPTO: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 263
XCN_OID_EMBEDDED_NT_CRYPTO: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 264
XCN_OID_ROOT_LIST_SIGNER: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 265
XCN_OID_KP_QUALIFIED_SUBORDINATION: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 266
XCN_OID_KP_KEY_RECOVERY: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 267
XCN_OID_KP_DOCUMENT_SIGNING: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 268
XCN_OID_KP_LIFETIME_SIGNING: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 269
XCN_OID_KP_MOBILE_DEVICE_SOFTWARE: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 270
XCN_OID_KP_SMART_DISPLAY: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 271
XCN_OID_KP_CSP_SIGNATURE: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 272
XCN_OID_DRM: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 273
XCN_OID_DRM_INDIVIDUALIZATION: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 274
XCN_OID_LICENSES: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 275
XCN_OID_LICENSE_SERVER: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 276
XCN_OID_KP_SMARTCARD_LOGON: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 277
XCN_OID_YESNO_TRUST_ATTR: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 278
XCN_OID_PKIX_POLICY_QUALIFIER_CPS: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 279
XCN_OID_PKIX_POLICY_QUALIFIER_USERNOTICE: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 280
XCN_OID_CERT_POLICIES_95_QUALIFIER1: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 281
XCN_OID_PKIX_ACC_DESCR: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 282
XCN_OID_PKIX_OCSP: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 283
XCN_OID_PKIX_CA_ISSUERS: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 284
XCN_OID_VERISIGN_PRIVATE_6_9: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 285
XCN_OID_VERISIGN_ONSITE_JURISDICTION_HASH: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 286
XCN_OID_VERISIGN_BITSTRING_6_13: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 287
XCN_OID_VERISIGN_ISS_STRONG_CRYPTO: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 288
XCN_OID_NETSCAPE: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 289
XCN_OID_NETSCAPE_CERT_EXTENSION: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 290
XCN_OID_NETSCAPE_CERT_TYPE: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 291
XCN_OID_NETSCAPE_BASE_URL: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 292
XCN_OID_NETSCAPE_REVOCATION_URL: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 293
XCN_OID_NETSCAPE_CA_REVOCATION_URL: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 294
XCN_OID_NETSCAPE_CERT_RENEWAL_URL: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 295
XCN_OID_NETSCAPE_CA_POLICY_URL: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 296
XCN_OID_NETSCAPE_SSL_SERVER_NAME: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 297
XCN_OID_NETSCAPE_COMMENT: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 298
XCN_OID_NETSCAPE_DATA_TYPE: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 299
XCN_OID_NETSCAPE_CERT_SEQUENCE: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 300
XCN_OID_CT_PKI_DATA: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 301
XCN_OID_CT_PKI_RESPONSE: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 302
XCN_OID_PKIX_NO_SIGNATURE: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 303
XCN_OID_CMC: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 304
XCN_OID_CMC_STATUS_INFO: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 305
XCN_OID_CMC_IDENTIFICATION: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 306
XCN_OID_CMC_IDENTITY_PROOF: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 307
XCN_OID_CMC_DATA_RETURN: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 308
XCN_OID_CMC_TRANSACTION_ID: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 309
XCN_OID_CMC_SENDER_NONCE: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 310
XCN_OID_CMC_RECIPIENT_NONCE: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 311
XCN_OID_CMC_ADD_EXTENSIONS: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 312
XCN_OID_CMC_ENCRYPTED_POP: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 313
XCN_OID_CMC_DECRYPTED_POP: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 314
XCN_OID_CMC_LRA_POP_WITNESS: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 315
XCN_OID_CMC_GET_CERT: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 316
XCN_OID_CMC_GET_CRL: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 317
XCN_OID_CMC_REVOKE_REQUEST: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 318
XCN_OID_CMC_REG_INFO: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 319
XCN_OID_CMC_RESPONSE_INFO: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 320
XCN_OID_CMC_QUERY_PENDING: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 321
XCN_OID_CMC_ID_POP_LINK_RANDOM: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 322
XCN_OID_CMC_ID_POP_LINK_WITNESS: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 323
XCN_OID_CMC_ID_CONFIRM_CERT_ACCEPTANCE: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 324
XCN_OID_CMC_ADD_ATTRIBUTES: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 325
XCN_OID_LOYALTY_OTHER_LOGOTYPE: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 326
XCN_OID_BACKGROUND_OTHER_LOGOTYPE: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 327
XCN_OID_PKIX_OCSP_BASIC_SIGNED_RESPONSE: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 328
XCN_OID_PKCS_7_DATA: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 329
XCN_OID_PKCS_7_SIGNED: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 330
XCN_OID_PKCS_7_ENVELOPED: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 331
XCN_OID_PKCS_7_SIGNEDANDENVELOPED: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 332
XCN_OID_PKCS_7_DIGESTED: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 333
XCN_OID_PKCS_7_ENCRYPTED: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 334
XCN_OID_PKCS_9_CONTENT_TYPE: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 335
XCN_OID_PKCS_9_MESSAGE_DIGEST: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 336
XCN_OID_CERT_PROP_ID_PREFIX: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 337
XCN_OID_CERT_KEY_IDENTIFIER_PROP_ID: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 338
XCN_OID_CERT_ISSUER_SERIAL_NUMBER_MD5_HASH_PROP_ID: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 339
XCN_OID_CERT_SUBJECT_NAME_MD5_HASH_PROP_ID: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 340
XCN_OID_CERT_MD5_HASH_PROP_ID: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 341
XCN_OID_RSA_SHA256RSA: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 342
XCN_OID_RSA_SHA384RSA: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 343
XCN_OID_RSA_SHA512RSA: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 344
XCN_OID_NIST_sha256: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 345
XCN_OID_NIST_sha384: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 346
XCN_OID_NIST_sha512: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 347
XCN_OID_RSA_MGF1: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 348
XCN_OID_ECC_PUBLIC_KEY: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 349
XCN_OID_ECDSA_SHA1: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 350
XCN_OID_ECDSA_SPECIFIED: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 351
XCN_OID_ANY_ENHANCED_KEY_USAGE: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 352
XCN_OID_RSA_SSA_PSS: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 353
XCN_OID_ATTR_SUPPORTED_ALGORITHMS: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 355
XCN_OID_ATTR_TPM_SECURITY_ASSERTIONS: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 356
XCN_OID_ATTR_TPM_SPECIFICATION: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 357
XCN_OID_CERT_DISALLOWED_FILETIME_PROP_ID: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 358
XCN_OID_CERT_SIGNATURE_HASH_PROP_ID: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 359
XCN_OID_CERT_STRONG_KEY_OS_1: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 360
XCN_OID_CERT_STRONG_KEY_OS_CURRENT: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 361
XCN_OID_CERT_STRONG_KEY_OS_PREFIX: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 362
XCN_OID_CERT_STRONG_SIGN_OS_1: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 363
XCN_OID_CERT_STRONG_SIGN_OS_CURRENT: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 364
XCN_OID_CERT_STRONG_SIGN_OS_PREFIX: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 365
XCN_OID_DH_SINGLE_PASS_STDDH_SHA1_KDF: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 366
XCN_OID_DH_SINGLE_PASS_STDDH_SHA256_KDF: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 367
XCN_OID_DH_SINGLE_PASS_STDDH_SHA384_KDF: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 368
XCN_OID_DISALLOWED_HASH: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 369
XCN_OID_DISALLOWED_LIST: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 370
XCN_OID_ECC_CURVE_P256: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 371
XCN_OID_ECC_CURVE_P384: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 372
XCN_OID_ECC_CURVE_P521: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 373
XCN_OID_ECDSA_SHA256: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 374
XCN_OID_ECDSA_SHA384: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 375
XCN_OID_ECDSA_SHA512: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 376
XCN_OID_ENROLL_CAXCHGCERT_HASH: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 377
XCN_OID_ENROLL_EK_INFO: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 378
XCN_OID_ENROLL_EKPUB_CHALLENGE: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 379
XCN_OID_ENROLL_EKVERIFYCERT: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 380
XCN_OID_ENROLL_EKVERIFYCREDS: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 381
XCN_OID_ENROLL_EKVERIFYKEY: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 382
XCN_OID_EV_RDN_COUNTRY: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 383
XCN_OID_EV_RDN_LOCALE: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 384
XCN_OID_EV_RDN_STATE_OR_PROVINCE: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 385
XCN_OID_INHIBIT_ANY_POLICY: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 386
XCN_OID_INTERNATIONALIZED_EMAIL_ADDRESS: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 387
XCN_OID_KP_KERNEL_MODE_CODE_SIGNING: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 388
XCN_OID_KP_KERNEL_MODE_HAL_EXTENSION_SIGNING: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 389
XCN_OID_KP_KERNEL_MODE_TRUSTED_BOOT_SIGNING: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 390
XCN_OID_KP_TPM_AIK_CERTIFICATE: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 391
XCN_OID_KP_TPM_EK_CERTIFICATE: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 392
XCN_OID_KP_TPM_PLATFORM_CERTIFICATE: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 393
XCN_OID_NIST_AES128_CBC: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 394
XCN_OID_NIST_AES128_WRAP: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 395
XCN_OID_NIST_AES192_CBC: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 396
XCN_OID_NIST_AES192_WRAP: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 397
XCN_OID_NIST_AES256_CBC: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 398
XCN_OID_NIST_AES256_WRAP: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 399
XCN_OID_PKCS_12_PbeIds: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 400
XCN_OID_PKCS_12_pbeWithSHA1And128BitRC2: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 401
XCN_OID_PKCS_12_pbeWithSHA1And128BitRC4: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 402
XCN_OID_PKCS_12_pbeWithSHA1And2KeyTripleDES: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 403
XCN_OID_PKCS_12_pbeWithSHA1And3KeyTripleDES: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 404
XCN_OID_PKCS_12_pbeWithSHA1And40BitRC2: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 405
XCN_OID_PKCS_12_pbeWithSHA1And40BitRC4: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 406
XCN_OID_PKCS_12_PROTECTED_PASSWORD_SECRET_BAG_TYPE_ID: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 407
XCN_OID_PKINIT_KP_KDC: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 408
XCN_OID_PKIX_CA_REPOSITORY: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 409
XCN_OID_PKIX_OCSP_NONCE: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 410
XCN_OID_PKIX_TIME_STAMPING: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 411
XCN_OID_QC_EU_COMPLIANCE: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 412
XCN_OID_QC_SSCD: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 413
XCN_OID_QC_STATEMENTS_EXT: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 414
XCN_OID_RDN_TPM_MANUFACTURER: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 415
XCN_OID_RDN_TPM_MODEL: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 416
XCN_OID_RDN_TPM_VERSION: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 417
XCN_OID_REVOKED_LIST_SIGNER: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 418
XCN_OID_RFC3161_counterSign: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 419
XCN_OID_ROOT_PROGRAM_AUTO_UPDATE_CA_REVOCATION: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 420
XCN_OID_ROOT_PROGRAM_AUTO_UPDATE_END_REVOCATION: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 421
XCN_OID_ROOT_PROGRAM_FLAGS: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 422
XCN_OID_ROOT_PROGRAM_NO_OCSP_FAILOVER_TO_CRL: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 423
XCN_OID_RSA_PSPECIFIED: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 424
XCN_OID_RSAES_OAEP: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 425
XCN_OID_SUBJECT_INFO_ACCESS: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 426
XCN_OID_TIMESTAMP_TOKEN: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 427
XCN_OID_ENROLL_SCEP_ERROR: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 428
XCN_OIDVerisign_MessageType: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 429
XCN_OIDVerisign_PkiStatus: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 430
XCN_OIDVerisign_FailInfo: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 431
XCN_OIDVerisign_SenderNonce: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 432
XCN_OIDVerisign_RecipientNonce: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 433
XCN_OIDVerisign_TransactionID: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 434
XCN_OID_ENROLL_ATTESTATION_CHALLENGE: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 435
XCN_OID_ENROLL_ATTESTATION_STATEMENT: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 436
XCN_OID_ENROLL_ENCRYPTION_ALGORITHM: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 437
XCN_OID_ENROLL_KSP_NAME: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID = 438
CERTENROLL_PROPERTYID = Int32
XCN_PROPERTYID_NONE: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_PROPERTYID = 0
XCN_CERT_KEY_PROV_HANDLE_PROP_ID: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_PROPERTYID = 1
XCN_CERT_KEY_PROV_INFO_PROP_ID: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_PROPERTYID = 2
XCN_CERT_SHA1_HASH_PROP_ID: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_PROPERTYID = 3
XCN_CERT_MD5_HASH_PROP_ID: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_PROPERTYID = 4
XCN_CERT_HASH_PROP_ID: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_PROPERTYID = 3
XCN_CERT_KEY_CONTEXT_PROP_ID: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_PROPERTYID = 5
XCN_CERT_KEY_SPEC_PROP_ID: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_PROPERTYID = 6
XCN_CERT_IE30_RESERVED_PROP_ID: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_PROPERTYID = 7
XCN_CERT_PUBKEY_HASH_RESERVED_PROP_ID: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_PROPERTYID = 8
XCN_CERT_ENHKEY_USAGE_PROP_ID: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_PROPERTYID = 9
XCN_CERT_CTL_USAGE_PROP_ID: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_PROPERTYID = 9
XCN_CERT_NEXT_UPDATE_LOCATION_PROP_ID: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_PROPERTYID = 10
XCN_CERT_FRIENDLY_NAME_PROP_ID: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_PROPERTYID = 11
XCN_CERT_PVK_FILE_PROP_ID: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_PROPERTYID = 12
XCN_CERT_DESCRIPTION_PROP_ID: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_PROPERTYID = 13
XCN_CERT_ACCESS_STATE_PROP_ID: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_PROPERTYID = 14
XCN_CERT_SIGNATURE_HASH_PROP_ID: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_PROPERTYID = 15
XCN_CERT_SMART_CARD_DATA_PROP_ID: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_PROPERTYID = 16
XCN_CERT_EFS_PROP_ID: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_PROPERTYID = 17
XCN_CERT_FORTEZZA_DATA_PROP_ID: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_PROPERTYID = 18
XCN_CERT_ARCHIVED_PROP_ID: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_PROPERTYID = 19
XCN_CERT_KEY_IDENTIFIER_PROP_ID: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_PROPERTYID = 20
XCN_CERT_AUTO_ENROLL_PROP_ID: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_PROPERTYID = 21
XCN_CERT_PUBKEY_ALG_PARA_PROP_ID: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_PROPERTYID = 22
XCN_CERT_CROSS_CERT_DIST_POINTS_PROP_ID: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_PROPERTYID = 23
XCN_CERT_ISSUER_PUBLIC_KEY_MD5_HASH_PROP_ID: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_PROPERTYID = 24
XCN_CERT_SUBJECT_PUBLIC_KEY_MD5_HASH_PROP_ID: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_PROPERTYID = 25
XCN_CERT_ENROLLMENT_PROP_ID: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_PROPERTYID = 26
XCN_CERT_DATE_STAMP_PROP_ID: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_PROPERTYID = 27
XCN_CERT_ISSUER_SERIAL_NUMBER_MD5_HASH_PROP_ID: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_PROPERTYID = 28
XCN_CERT_SUBJECT_NAME_MD5_HASH_PROP_ID: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_PROPERTYID = 29
XCN_CERT_EXTENDED_ERROR_INFO_PROP_ID: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_PROPERTYID = 30
XCN_CERT_RENEWAL_PROP_ID: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_PROPERTYID = 64
XCN_CERT_ARCHIVED_KEY_HASH_PROP_ID: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_PROPERTYID = 65
XCN_CERT_AUTO_ENROLL_RETRY_PROP_ID: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_PROPERTYID = 66
XCN_CERT_AIA_URL_RETRIEVED_PROP_ID: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_PROPERTYID = 67
XCN_CERT_AUTHORITY_INFO_ACCESS_PROP_ID: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_PROPERTYID = 68
XCN_CERT_BACKED_UP_PROP_ID: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_PROPERTYID = 69
XCN_CERT_OCSP_RESPONSE_PROP_ID: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_PROPERTYID = 70
XCN_CERT_REQUEST_ORIGINATOR_PROP_ID: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_PROPERTYID = 71
XCN_CERT_SOURCE_LOCATION_PROP_ID: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_PROPERTYID = 72
XCN_CERT_SOURCE_URL_PROP_ID: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_PROPERTYID = 73
XCN_CERT_NEW_KEY_PROP_ID: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_PROPERTYID = 74
XCN_CERT_OCSP_CACHE_PREFIX_PROP_ID: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_PROPERTYID = 75
XCN_CERT_SMART_CARD_ROOT_INFO_PROP_ID: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_PROPERTYID = 76
XCN_CERT_NO_AUTO_EXPIRE_CHECK_PROP_ID: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_PROPERTYID = 77
XCN_CERT_NCRYPT_KEY_HANDLE_PROP_ID: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_PROPERTYID = 78
XCN_CERT_HCRYPTPROV_OR_NCRYPT_KEY_HANDLE_PROP_ID: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_PROPERTYID = 79
XCN_CERT_SUBJECT_INFO_ACCESS_PROP_ID: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_PROPERTYID = 80
XCN_CERT_CA_OCSP_AUTHORITY_INFO_ACCESS_PROP_ID: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_PROPERTYID = 81
XCN_CERT_CA_DISABLE_CRL_PROP_ID: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_PROPERTYID = 82
XCN_CERT_ROOT_PROGRAM_CERT_POLICIES_PROP_ID: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_PROPERTYID = 83
XCN_CERT_ROOT_PROGRAM_NAME_CONSTRAINTS_PROP_ID: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_PROPERTYID = 84
XCN_CERT_SUBJECT_OCSP_AUTHORITY_INFO_ACCESS_PROP_ID: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_PROPERTYID = 85
XCN_CERT_SUBJECT_DISABLE_CRL_PROP_ID: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_PROPERTYID = 86
XCN_CERT_CEP_PROP_ID: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_PROPERTYID = 87
XCN_CERT_SIGN_HASH_CNG_ALG_PROP_ID: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_PROPERTYID = 89
XCN_CERT_SCARD_PIN_ID_PROP_ID: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_PROPERTYID = 90
XCN_CERT_SCARD_PIN_INFO_PROP_ID: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_PROPERTYID = 91
XCN_CERT_SUBJECT_PUB_KEY_BIT_LENGTH_PROP_ID: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_PROPERTYID = 92
XCN_CERT_PUB_KEY_CNG_ALG_BIT_LENGTH_PROP_ID: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_PROPERTYID = 93
XCN_CERT_ISSUER_PUB_KEY_BIT_LENGTH_PROP_ID: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_PROPERTYID = 94
XCN_CERT_ISSUER_CHAIN_SIGN_HASH_CNG_ALG_PROP_ID: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_PROPERTYID = 95
XCN_CERT_ISSUER_CHAIN_PUB_KEY_CNG_ALG_BIT_LENGTH_PROP_ID: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_PROPERTYID = 96
XCN_CERT_NO_EXPIRE_NOTIFICATION_PROP_ID: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_PROPERTYID = 97
XCN_CERT_AUTH_ROOT_SHA256_HASH_PROP_ID: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_PROPERTYID = 98
XCN_CERT_NCRYPT_KEY_HANDLE_TRANSFER_PROP_ID: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_PROPERTYID = 99
XCN_CERT_HCRYPTPROV_TRANSFER_PROP_ID: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_PROPERTYID = 100
XCN_CERT_SMART_CARD_READER_PROP_ID: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_PROPERTYID = 101
XCN_CERT_SEND_AS_TRUSTED_ISSUER_PROP_ID: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_PROPERTYID = 102
XCN_CERT_KEY_REPAIR_ATTEMPTED_PROP_ID: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_PROPERTYID = 103
XCN_CERT_DISALLOWED_FILETIME_PROP_ID: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_PROPERTYID = 104
XCN_CERT_ROOT_PROGRAM_CHAIN_POLICIES_PROP_ID: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_PROPERTYID = 105
XCN_CERT_SMART_CARD_READER_NON_REMOVABLE_PROP_ID: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_PROPERTYID = 106
XCN_CERT_SHA256_HASH_PROP_ID: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_PROPERTYID = 107
XCN_CERT_SCEP_SERVER_CERTS_PROP_ID: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_PROPERTYID = 108
XCN_CERT_SCEP_RA_SIGNATURE_CERT_PROP_ID: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_PROPERTYID = 109
XCN_CERT_SCEP_RA_ENCRYPTION_CERT_PROP_ID: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_PROPERTYID = 110
XCN_CERT_SCEP_CA_CERT_PROP_ID: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_PROPERTYID = 111
XCN_CERT_SCEP_SIGNER_CERT_PROP_ID: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_PROPERTYID = 112
XCN_CERT_SCEP_NONCE_PROP_ID: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_PROPERTYID = 113
XCN_CERT_SCEP_ENCRYPT_HASH_CNG_ALG_PROP_ID: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_PROPERTYID = 114
XCN_CERT_SCEP_FLAGS_PROP_ID: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_PROPERTYID = 115
XCN_CERT_SCEP_GUID_PROP_ID: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_PROPERTYID = 116
XCN_CERT_SERIALIZABLE_KEY_CONTEXT_PROP_ID: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_PROPERTYID = 117
XCN_CERT_ISOLATED_KEY_PROP_ID: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_PROPERTYID = 118
XCN_CERT_SERIAL_CHAIN_PROP_ID: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_PROPERTYID = 119
XCN_CERT_KEY_CLASSIFICATION_PROP_ID: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_PROPERTYID = 120
XCN_CERT_DISALLOWED_ENHKEY_USAGE_PROP_ID: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_PROPERTYID = 122
XCN_CERT_NONCOMPLIANT_ROOT_URL_PROP_ID: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_PROPERTYID = 123
XCN_CERT_PIN_SHA256_HASH_PROP_ID: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_PROPERTYID = 124
XCN_CERT_CLR_DELETE_KEY_PROP_ID: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_PROPERTYID = 125
XCN_CERT_NOT_BEFORE_FILETIME_PROP_ID: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_PROPERTYID = 126
XCN_CERT_CERT_NOT_BEFORE_ENHKEY_USAGE_PROP_ID: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_PROPERTYID = 127
XCN_CERT_FIRST_RESERVED_PROP_ID: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_PROPERTYID = 130
XCN_CERT_LAST_RESERVED_PROP_ID: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_PROPERTYID = 32767
XCN_CERT_FIRST_USER_PROP_ID: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_PROPERTYID = 32768
XCN_CERT_LAST_USER_PROP_ID: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_PROPERTYID = 65535
XCN_CERT_STORE_LOCALIZED_NAME_PROP_ID: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_PROPERTYID = 4096
class CERTTRANSBLOB(Structure):
    cb: UInt32
    pb: POINTER(Byte)
class CERTVIEWRESTRICTION(Structure):
    ColumnIndex: UInt32
    SeekOperator: Int32
    SortOrder: Int32
    pbValue: POINTER(Byte)
    cbValue: UInt32
CERT_ALT_NAME = Int32
CERT_ALT_NAME_RFC822_NAME: win32more.Windows.Win32.Security.Cryptography.Certificates.CERT_ALT_NAME = 2
CERT_ALT_NAME_DNS_NAME: win32more.Windows.Win32.Security.Cryptography.Certificates.CERT_ALT_NAME = 3
CERT_ALT_NAME_URL: win32more.Windows.Win32.Security.Cryptography.Certificates.CERT_ALT_NAME = 7
CERT_ALT_NAME_REGISTERED_ID: win32more.Windows.Win32.Security.Cryptography.Certificates.CERT_ALT_NAME = 9
CERT_ALT_NAME_DIRECTORY_NAME: win32more.Windows.Win32.Security.Cryptography.Certificates.CERT_ALT_NAME = 5
CERT_ALT_NAME_IP_ADDRESS: win32more.Windows.Win32.Security.Cryptography.Certificates.CERT_ALT_NAME = 8
CERT_ALT_NAME_OTHER_NAME: win32more.Windows.Win32.Security.Cryptography.Certificates.CERT_ALT_NAME = 1
CERT_CREATE_REQUEST_FLAGS = Int32
XECR_CMC: win32more.Windows.Win32.Security.Cryptography.Certificates.CERT_CREATE_REQUEST_FLAGS = 3
XECR_PKCS10_V1_5: win32more.Windows.Win32.Security.Cryptography.Certificates.CERT_CREATE_REQUEST_FLAGS = 4
XECR_PKCS10_V2_0: win32more.Windows.Win32.Security.Cryptography.Certificates.CERT_CREATE_REQUEST_FLAGS = 1
XECR_PKCS7: win32more.Windows.Win32.Security.Cryptography.Certificates.CERT_CREATE_REQUEST_FLAGS = 2
CERT_DELETE_ROW_FLAGS = Int32
CDR_EXPIRED: win32more.Windows.Win32.Security.Cryptography.Certificates.CERT_DELETE_ROW_FLAGS = 1
CDR_REQUEST_LAST_CHANGED: win32more.Windows.Win32.Security.Cryptography.Certificates.CERT_DELETE_ROW_FLAGS = 2
CERT_EXIT_EVENT_MASK = UInt32
EXITEVENT_CERTDENIED: win32more.Windows.Win32.Security.Cryptography.Certificates.CERT_EXIT_EVENT_MASK = 4
EXITEVENT_CERTISSUED: win32more.Windows.Win32.Security.Cryptography.Certificates.CERT_EXIT_EVENT_MASK = 1
EXITEVENT_CERTPENDING: win32more.Windows.Win32.Security.Cryptography.Certificates.CERT_EXIT_EVENT_MASK = 2
EXITEVENT_CERTRETRIEVEPENDING: win32more.Windows.Win32.Security.Cryptography.Certificates.CERT_EXIT_EVENT_MASK = 16
EXITEVENT_CERTREVOKED: win32more.Windows.Win32.Security.Cryptography.Certificates.CERT_EXIT_EVENT_MASK = 8
EXITEVENT_CRLISSUED: win32more.Windows.Win32.Security.Cryptography.Certificates.CERT_EXIT_EVENT_MASK = 32
EXITEVENT_SHUTDOWN: win32more.Windows.Win32.Security.Cryptography.Certificates.CERT_EXIT_EVENT_MASK = 64
CERT_GET_CONFIG_FLAGS = Int32
CC_DEFAULTCONFIG: win32more.Windows.Win32.Security.Cryptography.Certificates.CERT_GET_CONFIG_FLAGS = 0
CC_FIRSTCONFIG: win32more.Windows.Win32.Security.Cryptography.Certificates.CERT_GET_CONFIG_FLAGS = 2
CC_LOCALACTIVECONFIG: win32more.Windows.Win32.Security.Cryptography.Certificates.CERT_GET_CONFIG_FLAGS = 4
CC_LOCALCONFIG: win32more.Windows.Win32.Security.Cryptography.Certificates.CERT_GET_CONFIG_FLAGS = 3
CC_UIPICKCONFIG: win32more.Windows.Win32.Security.Cryptography.Certificates.CERT_GET_CONFIG_FLAGS = 1
CC_UIPICKCONFIGSKIPLOCALCA: win32more.Windows.Win32.Security.Cryptography.Certificates.CERT_GET_CONFIG_FLAGS = 5
CERT_IMPORT_FLAGS = Int32
CR_IN_BASE64HEADER: win32more.Windows.Win32.Security.Cryptography.Certificates.CERT_IMPORT_FLAGS = 0
CR_IN_BASE64: win32more.Windows.Win32.Security.Cryptography.Certificates.CERT_IMPORT_FLAGS = 1
CR_IN_BINARY: win32more.Windows.Win32.Security.Cryptography.Certificates.CERT_IMPORT_FLAGS = 2
CERT_PROPERTY_TYPE = Int32
PROPTYPE_BINARY: win32more.Windows.Win32.Security.Cryptography.Certificates.CERT_PROPERTY_TYPE = 3
PROPTYPE_DATE: win32more.Windows.Win32.Security.Cryptography.Certificates.CERT_PROPERTY_TYPE = 2
PROPTYPE_LONG: win32more.Windows.Win32.Security.Cryptography.Certificates.CERT_PROPERTY_TYPE = 1
PROPTYPE_STRING: win32more.Windows.Win32.Security.Cryptography.Certificates.CERT_PROPERTY_TYPE = 4
CERT_REQUEST_OUT_TYPE = Int32
CR_OUT_BASE64HEADER: win32more.Windows.Win32.Security.Cryptography.Certificates.CERT_REQUEST_OUT_TYPE = 0
CR_OUT_BASE64: win32more.Windows.Win32.Security.Cryptography.Certificates.CERT_REQUEST_OUT_TYPE = 1
CR_OUT_BINARY: win32more.Windows.Win32.Security.Cryptography.Certificates.CERT_REQUEST_OUT_TYPE = 2
CERT_VIEW_COLUMN_INDEX = Int32
CV_COLUMN_LOG_DEFAULT: win32more.Windows.Win32.Security.Cryptography.Certificates.CERT_VIEW_COLUMN_INDEX = -2
CV_COLUMN_LOG_FAILED_DEFAULT: win32more.Windows.Win32.Security.Cryptography.Certificates.CERT_VIEW_COLUMN_INDEX = -3
CV_COLUMN_QUEUE_DEFAULT: win32more.Windows.Win32.Security.Cryptography.Certificates.CERT_VIEW_COLUMN_INDEX = -1
CERT_VIEW_SEEK_OPERATOR_FLAGS = Int32
CVR_SEEK_EQ: win32more.Windows.Win32.Security.Cryptography.Certificates.CERT_VIEW_SEEK_OPERATOR_FLAGS = 1
CVR_SEEK_LE: win32more.Windows.Win32.Security.Cryptography.Certificates.CERT_VIEW_SEEK_OPERATOR_FLAGS = 4
CVR_SEEK_LT: win32more.Windows.Win32.Security.Cryptography.Certificates.CERT_VIEW_SEEK_OPERATOR_FLAGS = 2
CVR_SEEK_GE: win32more.Windows.Win32.Security.Cryptography.Certificates.CERT_VIEW_SEEK_OPERATOR_FLAGS = 8
CVR_SEEK_GT: win32more.Windows.Win32.Security.Cryptography.Certificates.CERT_VIEW_SEEK_OPERATOR_FLAGS = 16
CEnroll = Guid('{43f8f289-7a20-11d0-8f06-00c04fc295e1}')
CEnroll2 = Guid('{127698e4-e730-4e5c-a2b1-21490a70c8a1}')
CObjectId = Guid('{884e2000-217d-11da-b2a4-000e7bbb2b09}')
CObjectIds = Guid('{884e2001-217d-11da-b2a4-000e7bbb2b09}')
CPolicyQualifier = Guid('{884e201c-217d-11da-b2a4-000e7bbb2b09}')
CPolicyQualifiers = Guid('{884e201d-217d-11da-b2a4-000e7bbb2b09}')
CRLRevocationReason = Int32
XCN_CRL_REASON_UNSPECIFIED: win32more.Windows.Win32.Security.Cryptography.Certificates.CRLRevocationReason = 0
XCN_CRL_REASON_KEY_COMPROMISE: win32more.Windows.Win32.Security.Cryptography.Certificates.CRLRevocationReason = 1
XCN_CRL_REASON_CA_COMPROMISE: win32more.Windows.Win32.Security.Cryptography.Certificates.CRLRevocationReason = 2
XCN_CRL_REASON_AFFILIATION_CHANGED: win32more.Windows.Win32.Security.Cryptography.Certificates.CRLRevocationReason = 3
XCN_CRL_REASON_SUPERSEDED: win32more.Windows.Win32.Security.Cryptography.Certificates.CRLRevocationReason = 4
XCN_CRL_REASON_CESSATION_OF_OPERATION: win32more.Windows.Win32.Security.Cryptography.Certificates.CRLRevocationReason = 5
XCN_CRL_REASON_CERTIFICATE_HOLD: win32more.Windows.Win32.Security.Cryptography.Certificates.CRLRevocationReason = 6
XCN_CRL_REASON_REMOVE_FROM_CRL: win32more.Windows.Win32.Security.Cryptography.Certificates.CRLRevocationReason = 8
XCN_CRL_REASON_PRIVILEGE_WITHDRAWN: win32more.Windows.Win32.Security.Cryptography.Certificates.CRLRevocationReason = 9
XCN_CRL_REASON_AA_COMPROMISE: win32more.Windows.Win32.Security.Cryptography.Certificates.CRLRevocationReason = 10
CR_DISP = UInt32
CR_DISP_DENIED: win32more.Windows.Win32.Security.Cryptography.Certificates.CR_DISP = 2
CR_DISP_ERROR: win32more.Windows.Win32.Security.Cryptography.Certificates.CR_DISP = 1
CR_DISP_INCOMPLETE: win32more.Windows.Win32.Security.Cryptography.Certificates.CR_DISP = 0
CR_DISP_ISSUED: win32more.Windows.Win32.Security.Cryptography.Certificates.CR_DISP = 3
CR_DISP_ISSUED_OUT_OF_BAND: win32more.Windows.Win32.Security.Cryptography.Certificates.CR_DISP = 4
CR_DISP_UNDER_SUBMISSION: win32more.Windows.Win32.Security.Cryptography.Certificates.CR_DISP = 5
CSBACKUP_TYPE = UInt32
CSBACKUP_TYPE_FULL: win32more.Windows.Win32.Security.Cryptography.Certificates.CSBACKUP_TYPE = 1
CSBACKUP_TYPE_LOGS_ONLY: win32more.Windows.Win32.Security.Cryptography.Certificates.CSBACKUP_TYPE = 2
class CSEDB_RSTMAPW(Structure):
    pwszDatabaseName: win32more.Windows.Win32.Foundation.PWSTR
    pwszNewDatabaseName: win32more.Windows.Win32.Foundation.PWSTR
CSignerCertificate = Guid('{884e203d-217d-11da-b2a4-000e7bbb2b09}')
CSmimeCapabilities = Guid('{884e201a-217d-11da-b2a4-000e7bbb2b09}')
CSmimeCapability = Guid('{884e2019-217d-11da-b2a4-000e7bbb2b09}')
CVRC_COLUMN = Int32
CVRC_COLUMN_SCHEMA: win32more.Windows.Win32.Security.Cryptography.Certificates.CVRC_COLUMN = 0
CVRC_COLUMN_RESULT: win32more.Windows.Win32.Security.Cryptography.Certificates.CVRC_COLUMN = 1
CVRC_COLUMN_VALUE: win32more.Windows.Win32.Security.Cryptography.Certificates.CVRC_COLUMN = 2
CVRC_COLUMN_MASK: win32more.Windows.Win32.Security.Cryptography.Certificates.CVRC_COLUMN = 4095
CVRC_TABLE = Int32
CVRC_TABLE_ATTRIBUTES: win32more.Windows.Win32.Security.Cryptography.Certificates.CVRC_TABLE = 16384
CVRC_TABLE_CRL: win32more.Windows.Win32.Security.Cryptography.Certificates.CVRC_TABLE = 20480
CVRC_TABLE_EXTENSIONS: win32more.Windows.Win32.Security.Cryptography.Certificates.CVRC_TABLE = 12288
CVRC_TABLE_REQCERT: win32more.Windows.Win32.Security.Cryptography.Certificates.CVRC_TABLE = 0
CX500DistinguishedName = Guid('{884e2003-217d-11da-b2a4-000e7bbb2b09}')
CX509Attribute = Guid('{884e2022-217d-11da-b2a4-000e7bbb2b09}')
CX509AttributeArchiveKey = Guid('{884e2027-217d-11da-b2a4-000e7bbb2b09}')
CX509AttributeArchiveKeyHash = Guid('{884e2028-217d-11da-b2a4-000e7bbb2b09}')
CX509AttributeClientId = Guid('{884e2025-217d-11da-b2a4-000e7bbb2b09}')
CX509AttributeCspProvider = Guid('{884e202b-217d-11da-b2a4-000e7bbb2b09}')
CX509AttributeExtensions = Guid('{884e2024-217d-11da-b2a4-000e7bbb2b09}')
CX509AttributeOSVersion = Guid('{884e202a-217d-11da-b2a4-000e7bbb2b09}')
CX509AttributeRenewalCertificate = Guid('{884e2026-217d-11da-b2a4-000e7bbb2b09}')
CX509Attributes = Guid('{884e2023-217d-11da-b2a4-000e7bbb2b09}')
CX509CertificateRequestCertificate = Guid('{884e2043-217d-11da-b2a4-000e7bbb2b09}')
CX509CertificateRequestCmc = Guid('{884e2045-217d-11da-b2a4-000e7bbb2b09}')
CX509CertificateRequestPkcs10 = Guid('{884e2042-217d-11da-b2a4-000e7bbb2b09}')
CX509CertificateRequestPkcs7 = Guid('{884e2044-217d-11da-b2a4-000e7bbb2b09}')
CX509CertificateRevocationList = Guid('{884e2060-217d-11da-b2a4-000e7bbb2b09}')
CX509CertificateRevocationListEntries = Guid('{884e205f-217d-11da-b2a4-000e7bbb2b09}')
CX509CertificateRevocationListEntry = Guid('{884e205e-217d-11da-b2a4-000e7bbb2b09}')
CX509CertificateTemplateADWritable = Guid('{8336e323-2e6a-4a04-937c-548f681839b3}')
CX509EndorsementKey = Guid('{11a25a1d-b9a3-4edd-af83-3b59adbed361}')
CX509Enrollment = Guid('{884e2046-217d-11da-b2a4-000e7bbb2b09}')
CX509EnrollmentHelper = Guid('{884e2050-217d-11da-b2a4-000e7bbb2b09}')
CX509EnrollmentPolicyActiveDirectory = Guid('{91f39027-217f-11da-b2a4-000e7bbb2b09}')
CX509EnrollmentPolicyWebService = Guid('{91f39028-217f-11da-b2a4-000e7bbb2b09}')
CX509EnrollmentWebClassFactory = Guid('{884e2049-217d-11da-b2a4-000e7bbb2b09}')
CX509Extension = Guid('{884e200d-217d-11da-b2a4-000e7bbb2b09}')
CX509ExtensionAlternativeNames = Guid('{884e2015-217d-11da-b2a4-000e7bbb2b09}')
CX509ExtensionAuthorityKeyIdentifier = Guid('{884e2018-217d-11da-b2a4-000e7bbb2b09}')
CX509ExtensionBasicConstraints = Guid('{884e2016-217d-11da-b2a4-000e7bbb2b09}')
CX509ExtensionCertificatePolicies = Guid('{884e2020-217d-11da-b2a4-000e7bbb2b09}')
CX509ExtensionEnhancedKeyUsage = Guid('{884e2010-217d-11da-b2a4-000e7bbb2b09}')
CX509ExtensionKeyUsage = Guid('{884e200f-217d-11da-b2a4-000e7bbb2b09}')
CX509ExtensionMSApplicationPolicies = Guid('{884e2021-217d-11da-b2a4-000e7bbb2b09}')
CX509ExtensionSmimeCapabilities = Guid('{884e201b-217d-11da-b2a4-000e7bbb2b09}')
CX509ExtensionSubjectKeyIdentifier = Guid('{884e2017-217d-11da-b2a4-000e7bbb2b09}')
CX509ExtensionTemplate = Guid('{884e2012-217d-11da-b2a4-000e7bbb2b09}')
CX509ExtensionTemplateName = Guid('{884e2011-217d-11da-b2a4-000e7bbb2b09}')
CX509Extensions = Guid('{884e200e-217d-11da-b2a4-000e7bbb2b09}')
CX509MachineEnrollmentFactory = Guid('{884e2051-217d-11da-b2a4-000e7bbb2b09}')
CX509NameValuePair = Guid('{884e203f-217d-11da-b2a4-000e7bbb2b09}')
CX509PolicyServerListManager = Guid('{91f39029-217f-11da-b2a4-000e7bbb2b09}')
CX509PolicyServerUrl = Guid('{91f3902a-217f-11da-b2a4-000e7bbb2b09}')
CX509PrivateKey = Guid('{884e200c-217d-11da-b2a4-000e7bbb2b09}')
CX509PublicKey = Guid('{884e200b-217d-11da-b2a4-000e7bbb2b09}')
CX509SCEPEnrollment = Guid('{884e2061-217d-11da-b2a4-000e7bbb2b09}')
CX509SCEPEnrollmentHelper = Guid('{884e2062-217d-11da-b2a4-000e7bbb2b09}')
CommitTemplateFlags = Int32
CommitFlagSaveTemplateGenerateOID: win32more.Windows.Win32.Security.Cryptography.Certificates.CommitTemplateFlags = 1
CommitFlagSaveTemplateUseCurrentOID: win32more.Windows.Win32.Security.Cryptography.Certificates.CommitTemplateFlags = 2
CommitFlagSaveTemplateOverwrite: win32more.Windows.Win32.Security.Cryptography.Certificates.CommitTemplateFlags = 3
CommitFlagDeleteTemplate: win32more.Windows.Win32.Security.Cryptography.Certificates.CommitTemplateFlags = 4
DelayRetryAction = Int32
DelayRetryUnknown: win32more.Windows.Win32.Security.Cryptography.Certificates.DelayRetryAction = 0
DelayRetryNone: win32more.Windows.Win32.Security.Cryptography.Certificates.DelayRetryAction = 1
DelayRetryShort: win32more.Windows.Win32.Security.Cryptography.Certificates.DelayRetryAction = 2
DelayRetryLong: win32more.Windows.Win32.Security.Cryptography.Certificates.DelayRetryAction = 3
DelayRetrySuccess: win32more.Windows.Win32.Security.Cryptography.Certificates.DelayRetryAction = 4
DelayRetryPastSuccess: win32more.Windows.Win32.Security.Cryptography.Certificates.DelayRetryAction = 5
ENUM_CATYPES = Int32
ENUM_ENTERPRISE_ROOTCA: win32more.Windows.Win32.Security.Cryptography.Certificates.ENUM_CATYPES = 0
ENUM_ENTERPRISE_SUBCA: win32more.Windows.Win32.Security.Cryptography.Certificates.ENUM_CATYPES = 1
ENUM_STANDALONE_ROOTCA: win32more.Windows.Win32.Security.Cryptography.Certificates.ENUM_CATYPES = 3
ENUM_STANDALONE_SUBCA: win32more.Windows.Win32.Security.Cryptography.Certificates.ENUM_CATYPES = 4
ENUM_UNKNOWN_CA: win32more.Windows.Win32.Security.Cryptography.Certificates.ENUM_CATYPES = 5
ENUM_CERT_COLUMN_VALUE_FLAGS = Int32
CV_OUT_BASE64: win32more.Windows.Win32.Security.Cryptography.Certificates.ENUM_CERT_COLUMN_VALUE_FLAGS = 1
CV_OUT_BASE64HEADER: win32more.Windows.Win32.Security.Cryptography.Certificates.ENUM_CERT_COLUMN_VALUE_FLAGS = 0
CV_OUT_BASE64REQUESTHEADER: win32more.Windows.Win32.Security.Cryptography.Certificates.ENUM_CERT_COLUMN_VALUE_FLAGS = 3
CV_OUT_BASE64X509CRLHEADER: win32more.Windows.Win32.Security.Cryptography.Certificates.ENUM_CERT_COLUMN_VALUE_FLAGS = 9
CV_OUT_BINARY: win32more.Windows.Win32.Security.Cryptography.Certificates.ENUM_CERT_COLUMN_VALUE_FLAGS = 2
CV_OUT_HEX: win32more.Windows.Win32.Security.Cryptography.Certificates.ENUM_CERT_COLUMN_VALUE_FLAGS = 4
CV_OUT_HEXADDR: win32more.Windows.Win32.Security.Cryptography.Certificates.ENUM_CERT_COLUMN_VALUE_FLAGS = 10
CV_OUT_HEXASCII: win32more.Windows.Win32.Security.Cryptography.Certificates.ENUM_CERT_COLUMN_VALUE_FLAGS = 5
CV_OUT_HEXASCIIADDR: win32more.Windows.Win32.Security.Cryptography.Certificates.ENUM_CERT_COLUMN_VALUE_FLAGS = 11
EncodingType = Int32
XCN_CRYPT_STRING_BASE64HEADER: win32more.Windows.Win32.Security.Cryptography.Certificates.EncodingType = 0
XCN_CRYPT_STRING_BASE64: win32more.Windows.Win32.Security.Cryptography.Certificates.EncodingType = 1
XCN_CRYPT_STRING_BINARY: win32more.Windows.Win32.Security.Cryptography.Certificates.EncodingType = 2
XCN_CRYPT_STRING_BASE64REQUESTHEADER: win32more.Windows.Win32.Security.Cryptography.Certificates.EncodingType = 3
XCN_CRYPT_STRING_HEX: win32more.Windows.Win32.Security.Cryptography.Certificates.EncodingType = 4
XCN_CRYPT_STRING_HEXASCII: win32more.Windows.Win32.Security.Cryptography.Certificates.EncodingType = 5
XCN_CRYPT_STRING_BASE64_ANY: win32more.Windows.Win32.Security.Cryptography.Certificates.EncodingType = 6
XCN_CRYPT_STRING_ANY: win32more.Windows.Win32.Security.Cryptography.Certificates.EncodingType = 7
XCN_CRYPT_STRING_HEX_ANY: win32more.Windows.Win32.Security.Cryptography.Certificates.EncodingType = 8
XCN_CRYPT_STRING_BASE64X509CRLHEADER: win32more.Windows.Win32.Security.Cryptography.Certificates.EncodingType = 9
XCN_CRYPT_STRING_HEXADDR: win32more.Windows.Win32.Security.Cryptography.Certificates.EncodingType = 10
XCN_CRYPT_STRING_HEXASCIIADDR: win32more.Windows.Win32.Security.Cryptography.Certificates.EncodingType = 11
XCN_CRYPT_STRING_HEXRAW: win32more.Windows.Win32.Security.Cryptography.Certificates.EncodingType = 12
XCN_CRYPT_STRING_BASE64URI: win32more.Windows.Win32.Security.Cryptography.Certificates.EncodingType = 13
XCN_CRYPT_STRING_ENCODEMASK: win32more.Windows.Win32.Security.Cryptography.Certificates.EncodingType = 255
XCN_CRYPT_STRING_CHAIN: win32more.Windows.Win32.Security.Cryptography.Certificates.EncodingType = 256
XCN_CRYPT_STRING_TEXT: win32more.Windows.Win32.Security.Cryptography.Certificates.EncodingType = 512
XCN_CRYPT_STRING_PERCENTESCAPE: win32more.Windows.Win32.Security.Cryptography.Certificates.EncodingType = 134217728
XCN_CRYPT_STRING_HASHDATA: win32more.Windows.Win32.Security.Cryptography.Certificates.EncodingType = 268435456
XCN_CRYPT_STRING_STRICT: win32more.Windows.Win32.Security.Cryptography.Certificates.EncodingType = 536870912
XCN_CRYPT_STRING_NOCRLF: win32more.Windows.Win32.Security.Cryptography.Certificates.EncodingType = 1073741824
XCN_CRYPT_STRING_NOCR: win32more.Windows.Win32.Security.Cryptography.Certificates.EncodingType = -2147483648
EnrollmentCAProperty = Int32
CAPropCommonName: win32more.Windows.Win32.Security.Cryptography.Certificates.EnrollmentCAProperty = 1
CAPropDistinguishedName: win32more.Windows.Win32.Security.Cryptography.Certificates.EnrollmentCAProperty = 2
CAPropSanitizedName: win32more.Windows.Win32.Security.Cryptography.Certificates.EnrollmentCAProperty = 3
CAPropSanitizedShortName: win32more.Windows.Win32.Security.Cryptography.Certificates.EnrollmentCAProperty = 4
CAPropDNSName: win32more.Windows.Win32.Security.Cryptography.Certificates.EnrollmentCAProperty = 5
CAPropCertificateTypes: win32more.Windows.Win32.Security.Cryptography.Certificates.EnrollmentCAProperty = 6
CAPropCertificate: win32more.Windows.Win32.Security.Cryptography.Certificates.EnrollmentCAProperty = 7
CAPropDescription: win32more.Windows.Win32.Security.Cryptography.Certificates.EnrollmentCAProperty = 8
CAPropWebServers: win32more.Windows.Win32.Security.Cryptography.Certificates.EnrollmentCAProperty = 9
CAPropSiteName: win32more.Windows.Win32.Security.Cryptography.Certificates.EnrollmentCAProperty = 10
CAPropSecurity: win32more.Windows.Win32.Security.Cryptography.Certificates.EnrollmentCAProperty = 11
CAPropRenewalOnly: win32more.Windows.Win32.Security.Cryptography.Certificates.EnrollmentCAProperty = 12
EnrollmentDisplayStatus = Int32
DisplayNo: win32more.Windows.Win32.Security.Cryptography.Certificates.EnrollmentDisplayStatus = 0
DisplayYes: win32more.Windows.Win32.Security.Cryptography.Certificates.EnrollmentDisplayStatus = 1
EnrollmentEnrollStatus = Int32
Enrolled: win32more.Windows.Win32.Security.Cryptography.Certificates.EnrollmentEnrollStatus = 1
EnrollPended: win32more.Windows.Win32.Security.Cryptography.Certificates.EnrollmentEnrollStatus = 2
EnrollUIDeferredEnrollmentRequired: win32more.Windows.Win32.Security.Cryptography.Certificates.EnrollmentEnrollStatus = 4
EnrollError: win32more.Windows.Win32.Security.Cryptography.Certificates.EnrollmentEnrollStatus = 16
EnrollUnknown: win32more.Windows.Win32.Security.Cryptography.Certificates.EnrollmentEnrollStatus = 32
EnrollSkipped: win32more.Windows.Win32.Security.Cryptography.Certificates.EnrollmentEnrollStatus = 64
EnrollDenied: win32more.Windows.Win32.Security.Cryptography.Certificates.EnrollmentEnrollStatus = 256
EnrollmentPolicyFlags = Int32
DisableGroupPolicyList: win32more.Windows.Win32.Security.Cryptography.Certificates.EnrollmentPolicyFlags = 2
DisableUserServerList: win32more.Windows.Win32.Security.Cryptography.Certificates.EnrollmentPolicyFlags = 4
EnrollmentPolicyServerPropertyFlags = Int32
DefaultNone: win32more.Windows.Win32.Security.Cryptography.Certificates.EnrollmentPolicyServerPropertyFlags = 0
DefaultPolicyServer: win32more.Windows.Win32.Security.Cryptography.Certificates.EnrollmentPolicyServerPropertyFlags = 1
EnrollmentSelectionStatus = Int32
SelectedNo: win32more.Windows.Win32.Security.Cryptography.Certificates.EnrollmentSelectionStatus = 0
SelectedYes: win32more.Windows.Win32.Security.Cryptography.Certificates.EnrollmentSelectionStatus = 1
EnrollmentTemplateProperty = Int32
TemplatePropCommonName: win32more.Windows.Win32.Security.Cryptography.Certificates.EnrollmentTemplateProperty = 1
TemplatePropFriendlyName: win32more.Windows.Win32.Security.Cryptography.Certificates.EnrollmentTemplateProperty = 2
TemplatePropEKUs: win32more.Windows.Win32.Security.Cryptography.Certificates.EnrollmentTemplateProperty = 3
TemplatePropCryptoProviders: win32more.Windows.Win32.Security.Cryptography.Certificates.EnrollmentTemplateProperty = 4
TemplatePropMajorRevision: win32more.Windows.Win32.Security.Cryptography.Certificates.EnrollmentTemplateProperty = 5
TemplatePropDescription: win32more.Windows.Win32.Security.Cryptography.Certificates.EnrollmentTemplateProperty = 6
TemplatePropKeySpec: win32more.Windows.Win32.Security.Cryptography.Certificates.EnrollmentTemplateProperty = 7
TemplatePropSchemaVersion: win32more.Windows.Win32.Security.Cryptography.Certificates.EnrollmentTemplateProperty = 8
TemplatePropMinorRevision: win32more.Windows.Win32.Security.Cryptography.Certificates.EnrollmentTemplateProperty = 9
TemplatePropRASignatureCount: win32more.Windows.Win32.Security.Cryptography.Certificates.EnrollmentTemplateProperty = 10
TemplatePropMinimumKeySize: win32more.Windows.Win32.Security.Cryptography.Certificates.EnrollmentTemplateProperty = 11
TemplatePropOID: win32more.Windows.Win32.Security.Cryptography.Certificates.EnrollmentTemplateProperty = 12
TemplatePropSupersede: win32more.Windows.Win32.Security.Cryptography.Certificates.EnrollmentTemplateProperty = 13
TemplatePropRACertificatePolicies: win32more.Windows.Win32.Security.Cryptography.Certificates.EnrollmentTemplateProperty = 14
TemplatePropRAEKUs: win32more.Windows.Win32.Security.Cryptography.Certificates.EnrollmentTemplateProperty = 15
TemplatePropCertificatePolicies: win32more.Windows.Win32.Security.Cryptography.Certificates.EnrollmentTemplateProperty = 16
TemplatePropV1ApplicationPolicy: win32more.Windows.Win32.Security.Cryptography.Certificates.EnrollmentTemplateProperty = 17
TemplatePropAsymmetricAlgorithm: win32more.Windows.Win32.Security.Cryptography.Certificates.EnrollmentTemplateProperty = 18
TemplatePropKeySecurityDescriptor: win32more.Windows.Win32.Security.Cryptography.Certificates.EnrollmentTemplateProperty = 19
TemplatePropSymmetricAlgorithm: win32more.Windows.Win32.Security.Cryptography.Certificates.EnrollmentTemplateProperty = 20
TemplatePropSymmetricKeyLength: win32more.Windows.Win32.Security.Cryptography.Certificates.EnrollmentTemplateProperty = 21
TemplatePropHashAlgorithm: win32more.Windows.Win32.Security.Cryptography.Certificates.EnrollmentTemplateProperty = 22
TemplatePropKeyUsage: win32more.Windows.Win32.Security.Cryptography.Certificates.EnrollmentTemplateProperty = 23
TemplatePropEnrollmentFlags: win32more.Windows.Win32.Security.Cryptography.Certificates.EnrollmentTemplateProperty = 24
TemplatePropSubjectNameFlags: win32more.Windows.Win32.Security.Cryptography.Certificates.EnrollmentTemplateProperty = 25
TemplatePropPrivateKeyFlags: win32more.Windows.Win32.Security.Cryptography.Certificates.EnrollmentTemplateProperty = 26
TemplatePropGeneralFlags: win32more.Windows.Win32.Security.Cryptography.Certificates.EnrollmentTemplateProperty = 27
TemplatePropSecurityDescriptor: win32more.Windows.Win32.Security.Cryptography.Certificates.EnrollmentTemplateProperty = 28
TemplatePropExtensions: win32more.Windows.Win32.Security.Cryptography.Certificates.EnrollmentTemplateProperty = 29
TemplatePropValidityPeriod: win32more.Windows.Win32.Security.Cryptography.Certificates.EnrollmentTemplateProperty = 30
TemplatePropRenewalPeriod: win32more.Windows.Win32.Security.Cryptography.Certificates.EnrollmentTemplateProperty = 31
@winfunctype_pointer
def FNCERTSRVBACKUPCLOSE(hbc: VoidPtr) -> win32more.Windows.Win32.Foundation.HRESULT: ...
@winfunctype_pointer
def FNCERTSRVBACKUPEND(hbc: VoidPtr) -> win32more.Windows.Win32.Foundation.HRESULT: ...
@winfunctype_pointer
def FNCERTSRVBACKUPFREE(pv: VoidPtr) -> Void: ...
@winfunctype_pointer
def FNCERTSRVBACKUPGETBACKUPLOGSW(hbc: VoidPtr, ppwszzBackupLogFiles: POINTER(POINTER(UInt16)), pcbSize: POINTER(UInt32)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
@winfunctype_pointer
def FNCERTSRVBACKUPGETDATABASENAMESW(hbc: VoidPtr, ppwszzAttachmentInformation: POINTER(POINTER(UInt16)), pcbSize: POINTER(UInt32)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
@winfunctype_pointer
def FNCERTSRVBACKUPGETDYNAMICFILELISTW(hbc: VoidPtr, ppwszzFileList: POINTER(POINTER(UInt16)), pcbSize: POINTER(UInt32)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
@winfunctype_pointer
def FNCERTSRVBACKUPOPENFILEW(hbc: VoidPtr, pwszAttachmentName: win32more.Windows.Win32.Foundation.PWSTR, cbReadHintSize: UInt32, pliFileSize: POINTER(Int64)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
@winfunctype_pointer
def FNCERTSRVBACKUPPREPAREW(pwszServerName: win32more.Windows.Win32.Foundation.PWSTR, grbitJet: UInt32, dwBackupFlags: UInt32, phbc: POINTER(VoidPtr)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
@winfunctype_pointer
def FNCERTSRVBACKUPREAD(hbc: VoidPtr, pvBuffer: VoidPtr, cbBuffer: UInt32, pcbRead: POINTER(UInt32)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
@winfunctype_pointer
def FNCERTSRVBACKUPTRUNCATELOGS(hbc: VoidPtr) -> win32more.Windows.Win32.Foundation.HRESULT: ...
@winfunctype_pointer
def FNCERTSRVISSERVERONLINEW(pwszServerName: win32more.Windows.Win32.Foundation.PWSTR, pfServerOnline: POINTER(win32more.Windows.Win32.Foundation.BOOL)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
@winfunctype_pointer
def FNCERTSRVRESTOREEND(hbc: VoidPtr) -> win32more.Windows.Win32.Foundation.HRESULT: ...
@winfunctype_pointer
def FNCERTSRVRESTOREGETDATABASELOCATIONSW(hbc: VoidPtr, ppwszzDatabaseLocationList: POINTER(POINTER(UInt16)), pcbSize: POINTER(UInt32)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
@winfunctype_pointer
def FNCERTSRVRESTOREPREPAREW(pwszServerName: win32more.Windows.Win32.Foundation.PWSTR, dwRestoreFlags: UInt32, phbc: POINTER(VoidPtr)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
@winfunctype_pointer
def FNCERTSRVRESTOREREGISTERCOMPLETE(hbc: VoidPtr, hrRestoreState: win32more.Windows.Win32.Foundation.HRESULT) -> win32more.Windows.Win32.Foundation.HRESULT: ...
@winfunctype_pointer
def FNCERTSRVRESTOREREGISTERW(hbc: VoidPtr, pwszCheckPointFilePath: win32more.Windows.Win32.Foundation.PWSTR, pwszLogPath: win32more.Windows.Win32.Foundation.PWSTR, rgrstmap: POINTER(win32more.Windows.Win32.Security.Cryptography.Certificates.CSEDB_RSTMAPW), crstmap: Int32, pwszBackupLogPath: win32more.Windows.Win32.Foundation.PWSTR, genLow: UInt32, genHigh: UInt32) -> win32more.Windows.Win32.Foundation.HRESULT: ...
@winfunctype_pointer
def FNCERTSRVSERVERCONTROLW(pwszServerName: win32more.Windows.Win32.Foundation.PWSTR, dwControlFlags: UInt32, pcbOut: POINTER(UInt32), ppbOut: POINTER(POINTER(Byte))) -> win32more.Windows.Win32.Foundation.HRESULT: ...
@winfunctype_pointer
def FNIMPORTPFXTOPROVIDER(hWndParent: win32more.Windows.Win32.Foundation.HWND, pbPFX: POINTER(Byte), cbPFX: UInt32, ImportFlags: win32more.Windows.Win32.Security.Cryptography.Certificates.ImportPFXFlags, pwszPassword: win32more.Windows.Win32.Foundation.PWSTR, pwszProviderName: win32more.Windows.Win32.Foundation.PWSTR, pwszReaderName: win32more.Windows.Win32.Foundation.PWSTR, pwszContainerNamePrefix: win32more.Windows.Win32.Foundation.PWSTR, pwszPin: win32more.Windows.Win32.Foundation.PWSTR, pwszFriendlyName: win32more.Windows.Win32.Foundation.PWSTR, pcCertOut: POINTER(UInt32), prgpCertOut: POINTER(POINTER(POINTER(win32more.Windows.Win32.Security.Cryptography.CERT_CONTEXT)))) -> win32more.Windows.Win32.Foundation.HRESULT: ...
@winfunctype_pointer
def FNIMPORTPFXTOPROVIDERFREEDATA(cCert: UInt32, rgpCert: POINTER(POINTER(win32more.Windows.Win32.Security.Cryptography.CERT_CONTEXT))) -> Void: ...
FULL_RESPONSE_PROPERTY_ID = Int32
FR_PROP_NONE: win32more.Windows.Win32.Security.Cryptography.Certificates.FULL_RESPONSE_PROPERTY_ID = 0
FR_PROP_FULLRESPONSE: win32more.Windows.Win32.Security.Cryptography.Certificates.FULL_RESPONSE_PROPERTY_ID = 1
FR_PROP_STATUSINFOCOUNT: win32more.Windows.Win32.Security.Cryptography.Certificates.FULL_RESPONSE_PROPERTY_ID = 2
FR_PROP_BODYPARTSTRING: win32more.Windows.Win32.Security.Cryptography.Certificates.FULL_RESPONSE_PROPERTY_ID = 3
FR_PROP_STATUS: win32more.Windows.Win32.Security.Cryptography.Certificates.FULL_RESPONSE_PROPERTY_ID = 4
FR_PROP_STATUSSTRING: win32more.Windows.Win32.Security.Cryptography.Certificates.FULL_RESPONSE_PROPERTY_ID = 5
FR_PROP_OTHERINFOCHOICE: win32more.Windows.Win32.Security.Cryptography.Certificates.FULL_RESPONSE_PROPERTY_ID = 6
FR_PROP_FAILINFO: win32more.Windows.Win32.Security.Cryptography.Certificates.FULL_RESPONSE_PROPERTY_ID = 7
FR_PROP_PENDINFOTOKEN: win32more.Windows.Win32.Security.Cryptography.Certificates.FULL_RESPONSE_PROPERTY_ID = 8
FR_PROP_PENDINFOTIME: win32more.Windows.Win32.Security.Cryptography.Certificates.FULL_RESPONSE_PROPERTY_ID = 9
FR_PROP_ISSUEDCERTIFICATEHASH: win32more.Windows.Win32.Security.Cryptography.Certificates.FULL_RESPONSE_PROPERTY_ID = 10
FR_PROP_ISSUEDCERTIFICATE: win32more.Windows.Win32.Security.Cryptography.Certificates.FULL_RESPONSE_PROPERTY_ID = 11
FR_PROP_ISSUEDCERTIFICATECHAIN: win32more.Windows.Win32.Security.Cryptography.Certificates.FULL_RESPONSE_PROPERTY_ID = 12
FR_PROP_ISSUEDCERTIFICATECRLCHAIN: win32more.Windows.Win32.Security.Cryptography.Certificates.FULL_RESPONSE_PROPERTY_ID = 13
FR_PROP_ENCRYPTEDKEYHASH: win32more.Windows.Win32.Security.Cryptography.Certificates.FULL_RESPONSE_PROPERTY_ID = 14
FR_PROP_FULLRESPONSENOPKCS7: win32more.Windows.Win32.Security.Cryptography.Certificates.FULL_RESPONSE_PROPERTY_ID = 15
FR_PROP_CAEXCHANGECERTIFICATEHASH: win32more.Windows.Win32.Security.Cryptography.Certificates.FULL_RESPONSE_PROPERTY_ID = 16
FR_PROP_CAEXCHANGECERTIFICATE: win32more.Windows.Win32.Security.Cryptography.Certificates.FULL_RESPONSE_PROPERTY_ID = 17
FR_PROP_CAEXCHANGECERTIFICATECHAIN: win32more.Windows.Win32.Security.Cryptography.Certificates.FULL_RESPONSE_PROPERTY_ID = 18
FR_PROP_CAEXCHANGECERTIFICATECRLCHAIN: win32more.Windows.Win32.Security.Cryptography.Certificates.FULL_RESPONSE_PROPERTY_ID = 19
FR_PROP_ATTESTATIONCHALLENGE: win32more.Windows.Win32.Security.Cryptography.Certificates.FULL_RESPONSE_PROPERTY_ID = 20
FR_PROP_ATTESTATIONPROVIDERNAME: win32more.Windows.Win32.Security.Cryptography.Certificates.FULL_RESPONSE_PROPERTY_ID = 21
class IAlternativeName(ComPtr):
    extends: win32more.Windows.Win32.System.Com.IDispatch
    _iid_ = Guid('{728ab313-217d-11da-b2a4-000e7bbb2b09}')
    @commethod(7)
    def InitializeFromString(self, Type: win32more.Windows.Win32.Security.Cryptography.Certificates.AlternativeNameType, strValue: win32more.Windows.Win32.Foundation.BSTR) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(8)
    def InitializeFromRawData(self, Type: win32more.Windows.Win32.Security.Cryptography.Certificates.AlternativeNameType, Encoding: win32more.Windows.Win32.Security.Cryptography.Certificates.EncodingType, strRawData: win32more.Windows.Win32.Foundation.BSTR) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(9)
    def InitializeFromOtherName(self, pObjectId: win32more.Windows.Win32.Security.Cryptography.Certificates.IObjectId, Encoding: win32more.Windows.Win32.Security.Cryptography.Certificates.EncodingType, strRawData: win32more.Windows.Win32.Foundation.BSTR, ToBeWrapped: win32more.Windows.Win32.Foundation.VARIANT_BOOL) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(10)
    def get_Type(self, pValue: POINTER(win32more.Windows.Win32.Security.Cryptography.Certificates.AlternativeNameType)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(11)
    def get_StrValue(self, pValue: POINTER(win32more.Windows.Win32.Foundation.BSTR)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(12)
    def get_ObjectId(self, ppValue: POINTER(win32more.Windows.Win32.Security.Cryptography.Certificates.IObjectId)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(13)
    def get_RawData(self, Encoding: win32more.Windows.Win32.Security.Cryptography.Certificates.EncodingType, pValue: POINTER(win32more.Windows.Win32.Foundation.BSTR)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
class IAlternativeNames(ComPtr):
    extends: win32more.Windows.Win32.System.Com.IDispatch
    _iid_ = Guid('{728ab314-217d-11da-b2a4-000e7bbb2b09}')
    @commethod(7)
    def get_ItemByIndex(self, Index: Int32, pVal: POINTER(win32more.Windows.Win32.Security.Cryptography.Certificates.IAlternativeName)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(8)
    def get_Count(self, pVal: POINTER(Int32)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(9)
    def get__NewEnum(self, pVal: POINTER(win32more.Windows.Win32.System.Com.IUnknown)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(10)
    def Add(self, pVal: win32more.Windows.Win32.Security.Cryptography.Certificates.IAlternativeName) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(11)
    def Remove(self, Index: Int32) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(12)
    def Clear(self) -> win32more.Windows.Win32.Foundation.HRESULT: ...
class IBinaryConverter(ComPtr):
    extends: win32more.Windows.Win32.System.Com.IDispatch
    _iid_ = Guid('{728ab302-217d-11da-b2a4-000e7bbb2b09}')
    @commethod(7)
    def StringToString(self, strEncodedIn: win32more.Windows.Win32.Foundation.BSTR, EncodingIn: win32more.Windows.Win32.Security.Cryptography.Certificates.EncodingType, Encoding: win32more.Windows.Win32.Security.Cryptography.Certificates.EncodingType, pstrEncoded: POINTER(win32more.Windows.Win32.Foundation.BSTR)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(8)
    def VariantByteArrayToString(self, pvarByteArray: POINTER(win32more.Windows.Win32.System.Variant.VARIANT), Encoding: win32more.Windows.Win32.Security.Cryptography.Certificates.EncodingType, pstrEncoded: POINTER(win32more.Windows.Win32.Foundation.BSTR)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(9)
    def StringToVariantByteArray(self, strEncoded: win32more.Windows.Win32.Foundation.BSTR, Encoding: win32more.Windows.Win32.Security.Cryptography.Certificates.EncodingType, pvarByteArray: POINTER(win32more.Windows.Win32.System.Variant.VARIANT)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
class IBinaryConverter2(ComPtr):
    extends: win32more.Windows.Win32.Security.Cryptography.Certificates.IBinaryConverter
    _iid_ = Guid('{8d7928b4-4e17-428d-9a17-728df00d1b2b}')
    @commethod(10)
    def StringArrayToVariantArray(self, pvarStringArray: POINTER(win32more.Windows.Win32.System.Variant.VARIANT), pvarVariantArray: POINTER(win32more.Windows.Win32.System.Variant.VARIANT)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(11)
    def VariantArrayToStringArray(self, pvarVariantArray: POINTER(win32more.Windows.Win32.System.Variant.VARIANT), pvarStringArray: POINTER(win32more.Windows.Win32.System.Variant.VARIANT)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
class ICEnroll(ComPtr):
    extends: win32more.Windows.Win32.System.Com.IDispatch
    _iid_ = Guid('{43f8f288-7a20-11d0-8f06-00c04fc295e1}')
    @commethod(7)
    def createFilePKCS10(self, DNName: win32more.Windows.Win32.Foundation.BSTR, Usage: win32more.Windows.Win32.Foundation.BSTR, wszPKCS10FileName: win32more.Windows.Win32.Foundation.BSTR) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(8)
    def acceptFilePKCS7(self, wszPKCS7FileName: win32more.Windows.Win32.Foundation.BSTR) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(9)
    def createPKCS10(self, DNName: win32more.Windows.Win32.Foundation.BSTR, Usage: win32more.Windows.Win32.Foundation.BSTR, pPKCS10: POINTER(win32more.Windows.Win32.Foundation.BSTR)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(10)
    def acceptPKCS7(self, PKCS7: win32more.Windows.Win32.Foundation.BSTR) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(11)
    def getCertFromPKCS7(self, wszPKCS7: win32more.Windows.Win32.Foundation.BSTR, pbstrCert: POINTER(win32more.Windows.Win32.Foundation.BSTR)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(12)
    def enumProviders(self, dwIndex: Int32, dwFlags: Int32, pbstrProvName: POINTER(win32more.Windows.Win32.Foundation.BSTR)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(13)
    def enumContainers(self, dwIndex: Int32, pbstr: POINTER(win32more.Windows.Win32.Foundation.BSTR)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(14)
    def freeRequestInfo(self, PKCS7OrPKCS10: win32more.Windows.Win32.Foundation.BSTR) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(15)
    def get_MyStoreName(self, pbstrName: POINTER(win32more.Windows.Win32.Foundation.BSTR)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(16)
    def put_MyStoreName(self, bstrName: win32more.Windows.Win32.Foundation.BSTR) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(17)
    def get_MyStoreType(self, pbstrType: POINTER(win32more.Windows.Win32.Foundation.BSTR)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(18)
    def put_MyStoreType(self, bstrType: win32more.Windows.Win32.Foundation.BSTR) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(19)
    def get_MyStoreFlags(self, pdwFlags: POINTER(Int32)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(20)
    def put_MyStoreFlags(self, dwFlags: Int32) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(21)
    def get_CAStoreName(self, pbstrName: POINTER(win32more.Windows.Win32.Foundation.BSTR)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(22)
    def put_CAStoreName(self, bstrName: win32more.Windows.Win32.Foundation.BSTR) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(23)
    def get_CAStoreType(self, pbstrType: POINTER(win32more.Windows.Win32.Foundation.BSTR)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(24)
    def put_CAStoreType(self, bstrType: win32more.Windows.Win32.Foundation.BSTR) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(25)
    def get_CAStoreFlags(self, pdwFlags: POINTER(Int32)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(26)
    def put_CAStoreFlags(self, dwFlags: Int32) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(27)
    def get_RootStoreName(self, pbstrName: POINTER(win32more.Windows.Win32.Foundation.BSTR)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(28)
    def put_RootStoreName(self, bstrName: win32more.Windows.Win32.Foundation.BSTR) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(29)
    def get_RootStoreType(self, pbstrType: POINTER(win32more.Windows.Win32.Foundation.BSTR)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(30)
    def put_RootStoreType(self, bstrType: win32more.Windows.Win32.Foundation.BSTR) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(31)
    def get_RootStoreFlags(self, pdwFlags: POINTER(Int32)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(32)
    def put_RootStoreFlags(self, dwFlags: Int32) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(33)
    def get_RequestStoreName(self, pbstrName: POINTER(win32more.Windows.Win32.Foundation.BSTR)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(34)
    def put_RequestStoreName(self, bstrName: win32more.Windows.Win32.Foundation.BSTR) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(35)
    def get_RequestStoreType(self, pbstrType: POINTER(win32more.Windows.Win32.Foundation.BSTR)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(36)
    def put_RequestStoreType(self, bstrType: win32more.Windows.Win32.Foundation.BSTR) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(37)
    def get_RequestStoreFlags(self, pdwFlags: POINTER(Int32)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(38)
    def put_RequestStoreFlags(self, dwFlags: Int32) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(39)
    def get_ContainerName(self, pbstrContainer: POINTER(win32more.Windows.Win32.Foundation.BSTR)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(40)
    def put_ContainerName(self, bstrContainer: win32more.Windows.Win32.Foundation.BSTR) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(41)
    def get_ProviderName(self, pbstrProvider: POINTER(win32more.Windows.Win32.Foundation.BSTR)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(42)
    def put_ProviderName(self, bstrProvider: win32more.Windows.Win32.Foundation.BSTR) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(43)
    def get_ProviderType(self, pdwType: POINTER(Int32)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(44)
    def put_ProviderType(self, dwType: Int32) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(45)
    def get_KeySpec(self, pdw: POINTER(Int32)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(46)
    def put_KeySpec(self, dw: Int32) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(47)
    def get_ProviderFlags(self, pdwFlags: POINTER(Int32)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(48)
    def put_ProviderFlags(self, dwFlags: Int32) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(49)
    def get_UseExistingKeySet(self, fUseExistingKeys: POINTER(win32more.Windows.Win32.Foundation.BOOL)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(50)
    def put_UseExistingKeySet(self, fUseExistingKeys: win32more.Windows.Win32.Foundation.BOOL) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(51)
    def get_GenKeyFlags(self, pdwFlags: POINTER(Int32)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(52)
    def put_GenKeyFlags(self, dwFlags: Int32) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(53)
    def get_DeleteRequestCert(self, fDelete: POINTER(win32more.Windows.Win32.Foundation.BOOL)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(54)
    def put_DeleteRequestCert(self, fDelete: win32more.Windows.Win32.Foundation.BOOL) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(55)
    def get_WriteCertToCSP(self, fBool: POINTER(win32more.Windows.Win32.Foundation.BOOL)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(56)
    def put_WriteCertToCSP(self, fBool: win32more.Windows.Win32.Foundation.BOOL) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(57)
    def get_SPCFileName(self, pbstr: POINTER(win32more.Windows.Win32.Foundation.BSTR)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(58)
    def put_SPCFileName(self, bstr: win32more.Windows.Win32.Foundation.BSTR) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(59)
    def get_PVKFileName(self, pbstr: POINTER(win32more.Windows.Win32.Foundation.BSTR)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(60)
    def put_PVKFileName(self, bstr: win32more.Windows.Win32.Foundation.BSTR) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(61)
    def get_HashAlgorithm(self, pbstr: POINTER(win32more.Windows.Win32.Foundation.BSTR)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(62)
    def put_HashAlgorithm(self, bstr: win32more.Windows.Win32.Foundation.BSTR) -> win32more.Windows.Win32.Foundation.HRESULT: ...
class ICEnroll2(ComPtr):
    extends: win32more.Windows.Win32.Security.Cryptography.Certificates.ICEnroll
    _iid_ = Guid('{704ca730-c90b-11d1-9bec-00c04fc295e1}')
    @commethod(63)
    def addCertTypeToRequest(self, CertType: win32more.Windows.Win32.Foundation.BSTR) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(64)
    def addNameValuePairToSignature(self, Name: win32more.Windows.Win32.Foundation.BSTR, Value: win32more.Windows.Win32.Foundation.BSTR) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(65)
    def get_WriteCertToUserDS(self, fBool: POINTER(win32more.Windows.Win32.Foundation.BOOL)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(66)
    def put_WriteCertToUserDS(self, fBool: win32more.Windows.Win32.Foundation.BOOL) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(67)
    def get_EnableT61DNEncoding(self, fBool: POINTER(win32more.Windows.Win32.Foundation.BOOL)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(68)
    def put_EnableT61DNEncoding(self, fBool: win32more.Windows.Win32.Foundation.BOOL) -> win32more.Windows.Win32.Foundation.HRESULT: ...
class ICEnroll3(ComPtr):
    extends: win32more.Windows.Win32.Security.Cryptography.Certificates.ICEnroll2
    _iid_ = Guid('{c28c2d95-b7de-11d2-a421-00c04f79fe8e}')
    @commethod(69)
    def InstallPKCS7(self, PKCS7: win32more.Windows.Win32.Foundation.BSTR) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(70)
    def Reset(self) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(71)
    def GetSupportedKeySpec(self, pdwKeySpec: POINTER(Int32)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(72)
    def GetKeyLen(self, fMin: win32more.Windows.Win32.Foundation.BOOL, fExchange: win32more.Windows.Win32.Foundation.BOOL, pdwKeySize: POINTER(Int32)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(73)
    def EnumAlgs(self, dwIndex: Int32, algClass: Int32, pdwAlgID: POINTER(Int32)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(74)
    def GetAlgName(self, algID: Int32, pbstr: POINTER(win32more.Windows.Win32.Foundation.BSTR)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(75)
    def put_ReuseHardwareKeyIfUnableToGenNew(self, fReuseHardwareKeyIfUnableToGenNew: win32more.Windows.Win32.Foundation.BOOL) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(76)
    def get_ReuseHardwareKeyIfUnableToGenNew(self, fReuseHardwareKeyIfUnableToGenNew: POINTER(win32more.Windows.Win32.Foundation.BOOL)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(77)
    def put_HashAlgID(self, hashAlgID: Int32) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(78)
    def get_HashAlgID(self, hashAlgID: POINTER(Int32)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(79)
    def put_LimitExchangeKeyToEncipherment(self, fLimitExchangeKeyToEncipherment: win32more.Windows.Win32.Foundation.BOOL) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(80)
    def get_LimitExchangeKeyToEncipherment(self, fLimitExchangeKeyToEncipherment: POINTER(win32more.Windows.Win32.Foundation.BOOL)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(81)
    def put_EnableSMIMECapabilities(self, fEnableSMIMECapabilities: win32more.Windows.Win32.Foundation.BOOL) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(82)
    def get_EnableSMIMECapabilities(self, fEnableSMIMECapabilities: POINTER(win32more.Windows.Win32.Foundation.BOOL)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
class ICEnroll4(ComPtr):
    extends: win32more.Windows.Win32.Security.Cryptography.Certificates.ICEnroll3
    _iid_ = Guid('{c1f1188a-2eb5-4a80-841b-7e729a356d90}')
    @commethod(83)
    def put_PrivateKeyArchiveCertificate(self, bstrCert: win32more.Windows.Win32.Foundation.BSTR) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(84)
    def get_PrivateKeyArchiveCertificate(self, pbstrCert: POINTER(win32more.Windows.Win32.Foundation.BSTR)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(85)
    def put_ThumbPrint(self, bstrThumbPrint: win32more.Windows.Win32.Foundation.BSTR) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(86)
    def get_ThumbPrint(self, pbstrThumbPrint: POINTER(win32more.Windows.Win32.Foundation.BSTR)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(87)
    def binaryToString(self, Flags: Int32, strBinary: win32more.Windows.Win32.Foundation.BSTR, pstrEncoded: POINTER(win32more.Windows.Win32.Foundation.BSTR)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(88)
    def stringToBinary(self, Flags: Int32, strEncoded: win32more.Windows.Win32.Foundation.BSTR, pstrBinary: POINTER(win32more.Windows.Win32.Foundation.BSTR)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(89)
    def addExtensionToRequest(self, Flags: Int32, strName: win32more.Windows.Win32.Foundation.BSTR, strValue: win32more.Windows.Win32.Foundation.BSTR) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(90)
    def addAttributeToRequest(self, Flags: Int32, strName: win32more.Windows.Win32.Foundation.BSTR, strValue: win32more.Windows.Win32.Foundation.BSTR) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(91)
    def addNameValuePairToRequest(self, Flags: Int32, strName: win32more.Windows.Win32.Foundation.BSTR, strValue: win32more.Windows.Win32.Foundation.BSTR) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(92)
    def resetExtensions(self) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(93)
    def resetAttributes(self) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(94)
    def createRequest(self, Flags: win32more.Windows.Win32.Security.Cryptography.Certificates.CERT_CREATE_REQUEST_FLAGS, strDNName: win32more.Windows.Win32.Foundation.BSTR, Usage: win32more.Windows.Win32.Foundation.BSTR, pstrRequest: POINTER(win32more.Windows.Win32.Foundation.BSTR)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(95)
    def createFileRequest(self, Flags: win32more.Windows.Win32.Security.Cryptography.Certificates.CERT_CREATE_REQUEST_FLAGS, strDNName: win32more.Windows.Win32.Foundation.BSTR, strUsage: win32more.Windows.Win32.Foundation.BSTR, strRequestFileName: win32more.Windows.Win32.Foundation.BSTR) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(96)
    def acceptResponse(self, strResponse: win32more.Windows.Win32.Foundation.BSTR) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(97)
    def acceptFileResponse(self, strResponseFileName: win32more.Windows.Win32.Foundation.BSTR) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(98)
    def getCertFromResponse(self, strResponse: win32more.Windows.Win32.Foundation.BSTR, pstrCert: POINTER(win32more.Windows.Win32.Foundation.BSTR)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(99)
    def getCertFromFileResponse(self, strResponseFileName: win32more.Windows.Win32.Foundation.BSTR, pstrCert: POINTER(win32more.Windows.Win32.Foundation.BSTR)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(100)
    def createPFX(self, strPassword: win32more.Windows.Win32.Foundation.BSTR, pstrPFX: POINTER(win32more.Windows.Win32.Foundation.BSTR)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(101)
    def createFilePFX(self, strPassword: win32more.Windows.Win32.Foundation.BSTR, strPFXFileName: win32more.Windows.Win32.Foundation.BSTR) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(102)
    def setPendingRequestInfo(self, lRequestID: Int32, strCADNS: win32more.Windows.Win32.Foundation.BSTR, strCAName: win32more.Windows.Win32.Foundation.BSTR, strFriendlyName: win32more.Windows.Win32.Foundation.BSTR) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(103)
    def enumPendingRequest(self, lIndex: Int32, lDesiredProperty: win32more.Windows.Win32.Security.Cryptography.Certificates.PENDING_REQUEST_DESIRED_PROPERTY, pvarProperty: POINTER(win32more.Windows.Win32.System.Variant.VARIANT)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(104)
    def removePendingRequest(self, strThumbprint: win32more.Windows.Win32.Foundation.BSTR) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(105)
    def GetKeyLenEx(self, lSizeSpec: win32more.Windows.Win32.Security.Cryptography.Certificates.XEKL_KEYSIZE, lKeySpec: win32more.Windows.Win32.Security.Cryptography.Certificates.XEKL_KEYSPEC, pdwKeySize: POINTER(Int32)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(106)
    def InstallPKCS7Ex(self, PKCS7: win32more.Windows.Win32.Foundation.BSTR, plCertInstalled: POINTER(Int32)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(107)
    def addCertTypeToRequestEx(self, lType: win32more.Windows.Win32.Security.Cryptography.Certificates.ADDED_CERT_TYPE, bstrOIDOrName: win32more.Windows.Win32.Foundation.BSTR, lMajorVersion: Int32, fMinorVersion: win32more.Windows.Win32.Foundation.BOOL, lMinorVersion: Int32) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(108)
    def getProviderType(self, strProvName: win32more.Windows.Win32.Foundation.BSTR, plProvType: POINTER(Int32)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(109)
    def put_SignerCertificate(self, bstrCert: win32more.Windows.Win32.Foundation.BSTR) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(110)
    def put_ClientId(self, lClientId: Int32) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(111)
    def get_ClientId(self, plClientId: POINTER(Int32)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(112)
    def addBlobPropertyToCertificate(self, lPropertyId: Int32, lReserved: Int32, bstrProperty: win32more.Windows.Win32.Foundation.BSTR) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(113)
    def resetBlobProperties(self) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(114)
    def put_IncludeSubjectKeyID(self, fInclude: win32more.Windows.Win32.Foundation.BOOL) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(115)
    def get_IncludeSubjectKeyID(self, pfInclude: POINTER(win32more.Windows.Win32.Foundation.BOOL)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
class ICertAdmin(ComPtr):
    extends: win32more.Windows.Win32.System.Com.IDispatch
    _iid_ = Guid('{34df6950-7fb6-11d0-8817-00a0c903b83c}')
    @commethod(7)
    def IsValidCertificate(self, strConfig: win32more.Windows.Win32.Foundation.BSTR, strSerialNumber: win32more.Windows.Win32.Foundation.BSTR, pDisposition: POINTER(Int32)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(8)
    def GetRevocationReason(self, pReason: POINTER(Int32)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(9)
    def RevokeCertificate(self, strConfig: win32more.Windows.Win32.Foundation.BSTR, strSerialNumber: win32more.Windows.Win32.Foundation.BSTR, Reason: Int32, Date: Double) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(10)
    def SetRequestAttributes(self, strConfig: win32more.Windows.Win32.Foundation.BSTR, RequestId: Int32, strAttributes: win32more.Windows.Win32.Foundation.BSTR) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(11)
    def SetCertificateExtension(self, strConfig: win32more.Windows.Win32.Foundation.BSTR, RequestId: Int32, strExtensionName: win32more.Windows.Win32.Foundation.BSTR, Type: win32more.Windows.Win32.Security.Cryptography.Certificates.CERT_PROPERTY_TYPE, Flags: Int32, pvarValue: POINTER(win32more.Windows.Win32.System.Variant.VARIANT)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(12)
    def DenyRequest(self, strConfig: win32more.Windows.Win32.Foundation.BSTR, RequestId: Int32) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(13)
    def ResubmitRequest(self, strConfig: win32more.Windows.Win32.Foundation.BSTR, RequestId: Int32, pDisposition: POINTER(Int32)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(14)
    def PublishCRL(self, strConfig: win32more.Windows.Win32.Foundation.BSTR, Date: Double) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(15)
    def GetCRL(self, strConfig: win32more.Windows.Win32.Foundation.BSTR, Flags: Int32, pstrCRL: POINTER(win32more.Windows.Win32.Foundation.BSTR)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(16)
    def ImportCertificate(self, strConfig: win32more.Windows.Win32.Foundation.BSTR, strCertificate: win32more.Windows.Win32.Foundation.BSTR, Flags: win32more.Windows.Win32.Security.Cryptography.Certificates.CERT_IMPORT_FLAGS, pRequestId: POINTER(Int32)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
class ICertAdmin2(ComPtr):
    extends: win32more.Windows.Win32.Security.Cryptography.Certificates.ICertAdmin
    _iid_ = Guid('{f7c3ac41-b8ce-4fb4-aa58-3d1dc0e36b39}')
    @commethod(17)
    def PublishCRLs(self, strConfig: win32more.Windows.Win32.Foundation.BSTR, Date: Double, CRLFlags: Int32) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(18)
    def GetCAProperty(self, strConfig: win32more.Windows.Win32.Foundation.BSTR, PropId: Int32, PropIndex: Int32, PropType: Int32, Flags: Int32, pvarPropertyValue: POINTER(win32more.Windows.Win32.System.Variant.VARIANT)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(19)
    def SetCAProperty(self, strConfig: win32more.Windows.Win32.Foundation.BSTR, PropId: Int32, PropIndex: Int32, PropType: win32more.Windows.Win32.Security.Cryptography.Certificates.CERT_PROPERTY_TYPE, pvarPropertyValue: POINTER(win32more.Windows.Win32.System.Variant.VARIANT)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(20)
    def GetCAPropertyFlags(self, strConfig: win32more.Windows.Win32.Foundation.BSTR, PropId: Int32, pPropFlags: POINTER(Int32)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(21)
    def GetCAPropertyDisplayName(self, strConfig: win32more.Windows.Win32.Foundation.BSTR, PropId: Int32, pstrDisplayName: POINTER(win32more.Windows.Win32.Foundation.BSTR)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(22)
    def GetArchivedKey(self, strConfig: win32more.Windows.Win32.Foundation.BSTR, RequestId: Int32, Flags: Int32, pstrArchivedKey: POINTER(win32more.Windows.Win32.Foundation.BSTR)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(23)
    def GetConfigEntry(self, strConfig: win32more.Windows.Win32.Foundation.BSTR, strNodePath: win32more.Windows.Win32.Foundation.BSTR, strEntryName: win32more.Windows.Win32.Foundation.BSTR, pvarEntry: POINTER(win32more.Windows.Win32.System.Variant.VARIANT)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(24)
    def SetConfigEntry(self, strConfig: win32more.Windows.Win32.Foundation.BSTR, strNodePath: win32more.Windows.Win32.Foundation.BSTR, strEntryName: win32more.Windows.Win32.Foundation.BSTR, pvarEntry: POINTER(win32more.Windows.Win32.System.Variant.VARIANT)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(25)
    def ImportKey(self, strConfig: win32more.Windows.Win32.Foundation.BSTR, RequestId: Int32, strCertHash: win32more.Windows.Win32.Foundation.BSTR, Flags: win32more.Windows.Win32.Security.Cryptography.Certificates.CERT_IMPORT_FLAGS, strKey: win32more.Windows.Win32.Foundation.BSTR) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(26)
    def GetMyRoles(self, strConfig: win32more.Windows.Win32.Foundation.BSTR, pRoles: POINTER(win32more.Windows.Win32.Security.Cryptography.Certificates.CERTADMIN_GET_ROLES_FLAGS)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(27)
    def DeleteRow(self, strConfig: win32more.Windows.Win32.Foundation.BSTR, Flags: win32more.Windows.Win32.Security.Cryptography.Certificates.CERT_DELETE_ROW_FLAGS, Date: Double, Table: win32more.Windows.Win32.Security.Cryptography.Certificates.CVRC_TABLE, RowId: Int32, pcDeleted: POINTER(Int32)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
class ICertConfig(ComPtr):
    extends: win32more.Windows.Win32.System.Com.IDispatch
    _iid_ = Guid('{372fce34-4324-11d0-8810-00a0c903b83c}')
    @commethod(7)
    def Reset(self, Index: Int32, pCount: POINTER(Int32)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(8)
    def Next(self, pIndex: POINTER(Int32)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(9)
    def GetField(self, strFieldName: win32more.Windows.Win32.Foundation.BSTR, pstrOut: POINTER(win32more.Windows.Win32.Foundation.BSTR)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(10)
    def GetConfig(self, Flags: Int32, pstrOut: POINTER(win32more.Windows.Win32.Foundation.BSTR)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
class ICertConfig2(ComPtr):
    extends: win32more.Windows.Win32.Security.Cryptography.Certificates.ICertConfig
    _iid_ = Guid('{7a18edde-7e78-4163-8ded-78e2c9cee924}')
    @commethod(11)
    def SetSharedFolder(self, strSharedFolder: win32more.Windows.Win32.Foundation.BSTR) -> win32more.Windows.Win32.Foundation.HRESULT: ...
class ICertEncodeAltName(ComPtr):
    extends: win32more.Windows.Win32.System.Com.IDispatch
    _iid_ = Guid('{1c9a8c70-1271-11d1-9bd4-00c04fb683fa}')
    @commethod(7)
    def Decode(self, strBinary: win32more.Windows.Win32.Foundation.BSTR) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(8)
    def GetNameCount(self, pNameCount: POINTER(Int32)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(9)
    def GetNameChoice(self, NameIndex: Int32, pNameChoice: POINTER(Int32)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(10)
    def GetName(self, NameIndex: Int32, pstrName: POINTER(win32more.Windows.Win32.Foundation.BSTR)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(11)
    def Reset(self, NameCount: Int32) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(12)
    def SetNameEntry(self, NameIndex: Int32, NameChoice: win32more.Windows.Win32.Security.Cryptography.Certificates.CERT_ALT_NAME, strName: win32more.Windows.Win32.Foundation.BSTR) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(13)
    def Encode(self, pstrBinary: POINTER(win32more.Windows.Win32.Foundation.BSTR)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
class ICertEncodeAltName2(ComPtr):
    extends: win32more.Windows.Win32.Security.Cryptography.Certificates.ICertEncodeAltName
    _iid_ = Guid('{f67fe177-5ef1-4535-b4ce-29df15e2e0c3}')
    @commethod(14)
    def DecodeBlob(self, strEncodedData: win32more.Windows.Win32.Foundation.BSTR, Encoding: win32more.Windows.Win32.Security.Cryptography.Certificates.EncodingType) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(15)
    def EncodeBlob(self, Encoding: win32more.Windows.Win32.Security.Cryptography.Certificates.EncodingType, pstrEncodedData: POINTER(win32more.Windows.Win32.Foundation.BSTR)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(16)
    def GetNameBlob(self, NameIndex: Int32, Encoding: win32more.Windows.Win32.Security.Cryptography.Certificates.EncodingType, pstrName: POINTER(win32more.Windows.Win32.Foundation.BSTR)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(17)
    def SetNameEntryBlob(self, NameIndex: Int32, NameChoice: Int32, strName: win32more.Windows.Win32.Foundation.BSTR, Encoding: win32more.Windows.Win32.Security.Cryptography.Certificates.EncodingType) -> win32more.Windows.Win32.Foundation.HRESULT: ...
class ICertEncodeBitString(ComPtr):
    extends: win32more.Windows.Win32.System.Com.IDispatch
    _iid_ = Guid('{6db525be-1278-11d1-9bd4-00c04fb683fa}')
    @commethod(7)
    def Decode(self, strBinary: win32more.Windows.Win32.Foundation.BSTR) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(8)
    def GetBitCount(self, pBitCount: POINTER(Int32)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(9)
    def GetBitString(self, pstrBitString: POINTER(win32more.Windows.Win32.Foundation.BSTR)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(10)
    def Encode(self, BitCount: Int32, strBitString: win32more.Windows.Win32.Foundation.BSTR, pstrBinary: POINTER(win32more.Windows.Win32.Foundation.BSTR)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
class ICertEncodeBitString2(ComPtr):
    extends: win32more.Windows.Win32.Security.Cryptography.Certificates.ICertEncodeBitString
    _iid_ = Guid('{e070d6e7-23ef-4dd2-8242-ebd9c928cb30}')
    @commethod(11)
    def DecodeBlob(self, strEncodedData: win32more.Windows.Win32.Foundation.BSTR, Encoding: win32more.Windows.Win32.Security.Cryptography.Certificates.EncodingType) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(12)
    def EncodeBlob(self, BitCount: Int32, strBitString: win32more.Windows.Win32.Foundation.BSTR, EncodingIn: win32more.Windows.Win32.Security.Cryptography.Certificates.EncodingType, Encoding: win32more.Windows.Win32.Security.Cryptography.Certificates.EncodingType, pstrEncodedData: POINTER(win32more.Windows.Win32.Foundation.BSTR)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(13)
    def GetBitStringBlob(self, Encoding: win32more.Windows.Win32.Security.Cryptography.Certificates.EncodingType, pstrBitString: POINTER(win32more.Windows.Win32.Foundation.BSTR)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
class ICertEncodeCRLDistInfo(ComPtr):
    extends: win32more.Windows.Win32.System.Com.IDispatch
    _iid_ = Guid('{01958640-bbff-11d0-8825-00a0c903b83c}')
    @commethod(7)
    def Decode(self, strBinary: win32more.Windows.Win32.Foundation.BSTR) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(8)
    def GetDistPointCount(self, pDistPointCount: POINTER(Int32)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(9)
    def GetNameCount(self, DistPointIndex: Int32, pNameCount: POINTER(Int32)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(10)
    def GetNameChoice(self, DistPointIndex: Int32, NameIndex: Int32, pNameChoice: POINTER(Int32)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(11)
    def GetName(self, DistPointIndex: Int32, NameIndex: Int32, pstrName: POINTER(win32more.Windows.Win32.Foundation.BSTR)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(12)
    def Reset(self, DistPointCount: Int32) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(13)
    def SetNameCount(self, DistPointIndex: Int32, NameCount: Int32) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(14)
    def SetNameEntry(self, DistPointIndex: Int32, NameIndex: Int32, NameChoice: win32more.Windows.Win32.Security.Cryptography.Certificates.CERT_ALT_NAME, strName: win32more.Windows.Win32.Foundation.BSTR) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(15)
    def Encode(self, pstrBinary: POINTER(win32more.Windows.Win32.Foundation.BSTR)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
class ICertEncodeCRLDistInfo2(ComPtr):
    extends: win32more.Windows.Win32.Security.Cryptography.Certificates.ICertEncodeCRLDistInfo
    _iid_ = Guid('{b4275d4b-3e30-446f-ad36-09d03120b078}')
    @commethod(16)
    def DecodeBlob(self, strEncodedData: win32more.Windows.Win32.Foundation.BSTR, Encoding: win32more.Windows.Win32.Security.Cryptography.Certificates.EncodingType) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(17)
    def EncodeBlob(self, Encoding: win32more.Windows.Win32.Security.Cryptography.Certificates.EncodingType, pstrEncodedData: POINTER(win32more.Windows.Win32.Foundation.BSTR)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
class ICertEncodeDateArray(ComPtr):
    extends: win32more.Windows.Win32.System.Com.IDispatch
    _iid_ = Guid('{2f9469a0-a470-11d0-8821-00a0c903b83c}')
    @commethod(7)
    def Decode(self, strBinary: win32more.Windows.Win32.Foundation.BSTR) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(8)
    def GetCount(self, pCount: POINTER(Int32)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(9)
    def GetValue(self, Index: Int32, pValue: POINTER(Double)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(10)
    def Reset(self, Count: Int32) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(11)
    def SetValue(self, Index: Int32, Value: Double) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(12)
    def Encode(self, pstrBinary: POINTER(win32more.Windows.Win32.Foundation.BSTR)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
class ICertEncodeDateArray2(ComPtr):
    extends: win32more.Windows.Win32.Security.Cryptography.Certificates.ICertEncodeDateArray
    _iid_ = Guid('{99a4edb5-2b8e-448d-bf95-bba8d7789dc8}')
    @commethod(13)
    def DecodeBlob(self, strEncodedData: win32more.Windows.Win32.Foundation.BSTR, Encoding: win32more.Windows.Win32.Security.Cryptography.Certificates.EncodingType) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(14)
    def EncodeBlob(self, Encoding: win32more.Windows.Win32.Security.Cryptography.Certificates.EncodingType, pstrEncodedData: POINTER(win32more.Windows.Win32.Foundation.BSTR)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
class ICertEncodeLongArray(ComPtr):
    extends: win32more.Windows.Win32.System.Com.IDispatch
    _iid_ = Guid('{15e2f230-a0a2-11d0-8821-00a0c903b83c}')
    @commethod(7)
    def Decode(self, strBinary: win32more.Windows.Win32.Foundation.BSTR) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(8)
    def GetCount(self, pCount: POINTER(Int32)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(9)
    def GetValue(self, Index: Int32, pValue: POINTER(Int32)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(10)
    def Reset(self, Count: Int32) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(11)
    def SetValue(self, Index: Int32, Value: Int32) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(12)
    def Encode(self, pstrBinary: POINTER(win32more.Windows.Win32.Foundation.BSTR)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
class ICertEncodeLongArray2(ComPtr):
    extends: win32more.Windows.Win32.Security.Cryptography.Certificates.ICertEncodeLongArray
    _iid_ = Guid('{4efde84a-bd9b-4fc2-a108-c347d478840f}')
    @commethod(13)
    def DecodeBlob(self, strEncodedData: win32more.Windows.Win32.Foundation.BSTR, Encoding: win32more.Windows.Win32.Security.Cryptography.Certificates.EncodingType) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(14)
    def EncodeBlob(self, Encoding: win32more.Windows.Win32.Security.Cryptography.Certificates.EncodingType, pstrEncodedData: POINTER(win32more.Windows.Win32.Foundation.BSTR)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
class ICertEncodeStringArray(ComPtr):
    extends: win32more.Windows.Win32.System.Com.IDispatch
    _iid_ = Guid('{12a88820-7494-11d0-8816-00a0c903b83c}')
    @commethod(7)
    def Decode(self, strBinary: win32more.Windows.Win32.Foundation.BSTR) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(8)
    def GetStringType(self, pStringType: POINTER(Int32)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(9)
    def GetCount(self, pCount: POINTER(Int32)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(10)
    def GetValue(self, Index: Int32, pstr: POINTER(win32more.Windows.Win32.Foundation.BSTR)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(11)
    def Reset(self, Count: Int32, StringType: win32more.Windows.Win32.Security.Cryptography.CERT_RDN_ATTR_VALUE_TYPE) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(12)
    def SetValue(self, Index: Int32, str: win32more.Windows.Win32.Foundation.BSTR) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(13)
    def Encode(self, pstrBinary: POINTER(win32more.Windows.Win32.Foundation.BSTR)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
class ICertEncodeStringArray2(ComPtr):
    extends: win32more.Windows.Win32.Security.Cryptography.Certificates.ICertEncodeStringArray
    _iid_ = Guid('{9c680d93-9b7d-4e95-9018-4ffe10ba5ada}')
    @commethod(14)
    def DecodeBlob(self, strEncodedData: win32more.Windows.Win32.Foundation.BSTR, Encoding: win32more.Windows.Win32.Security.Cryptography.Certificates.EncodingType) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(15)
    def EncodeBlob(self, Encoding: win32more.Windows.Win32.Security.Cryptography.Certificates.EncodingType, pstrEncodedData: POINTER(win32more.Windows.Win32.Foundation.BSTR)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
class ICertExit(ComPtr):
    extends: win32more.Windows.Win32.System.Com.IDispatch
    _iid_ = Guid('{e19ae1a0-7364-11d0-8816-00a0c903b83c}')
    @commethod(7)
    def Initialize(self, strConfig: win32more.Windows.Win32.Foundation.BSTR, pEventMask: POINTER(win32more.Windows.Win32.Security.Cryptography.Certificates.CERT_EXIT_EVENT_MASK)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(8)
    def Notify(self, ExitEvent: Int32, Context: Int32) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(9)
    def GetDescription(self, pstrDescription: POINTER(win32more.Windows.Win32.Foundation.BSTR)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
class ICertExit2(ComPtr):
    extends: win32more.Windows.Win32.Security.Cryptography.Certificates.ICertExit
    _iid_ = Guid('{0abf484b-d049-464d-a7ed-552e7529b0ff}')
    @commethod(10)
    def GetManageModule(self, ppManageModule: POINTER(win32more.Windows.Win32.Security.Cryptography.Certificates.ICertManageModule)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
class ICertGetConfig(ComPtr):
    extends: win32more.Windows.Win32.System.Com.IDispatch
    _iid_ = Guid('{c7ea09c0-ce17-11d0-8833-00a0c903b83c}')
    @commethod(7)
    def GetConfig(self, Flags: win32more.Windows.Win32.Security.Cryptography.Certificates.CERT_GET_CONFIG_FLAGS, pstrOut: POINTER(win32more.Windows.Win32.Foundation.BSTR)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
class ICertManageModule(ComPtr):
    extends: win32more.Windows.Win32.System.Com.IDispatch
    _iid_ = Guid('{e7d7ad42-bd3d-11d1-9a4d-00c04fc297eb}')
    @commethod(7)
    def GetProperty(self, strConfig: win32more.Windows.Win32.Foundation.BSTR, strStorageLocation: win32more.Windows.Win32.Foundation.BSTR, strPropertyName: win32more.Windows.Win32.Foundation.BSTR, Flags: Int32, pvarProperty: POINTER(win32more.Windows.Win32.System.Variant.VARIANT)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(8)
    def SetProperty(self, strConfig: win32more.Windows.Win32.Foundation.BSTR, strStorageLocation: win32more.Windows.Win32.Foundation.BSTR, strPropertyName: win32more.Windows.Win32.Foundation.BSTR, Flags: Int32, pvarProperty: POINTER(win32more.Windows.Win32.System.Variant.VARIANT)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(9)
    def Configure(self, strConfig: win32more.Windows.Win32.Foundation.BSTR, strStorageLocation: win32more.Windows.Win32.Foundation.BSTR, Flags: Int32) -> win32more.Windows.Win32.Foundation.HRESULT: ...
class ICertPolicy(ComPtr):
    extends: win32more.Windows.Win32.System.Com.IDispatch
    _iid_ = Guid('{38bb5a00-7636-11d0-b413-00a0c91bbf8c}')
    @commethod(7)
    def Initialize(self, strConfig: win32more.Windows.Win32.Foundation.BSTR) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(8)
    def VerifyRequest(self, strConfig: win32more.Windows.Win32.Foundation.BSTR, Context: Int32, bNewRequest: Int32, Flags: Int32, pDisposition: POINTER(Int32)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(9)
    def GetDescription(self, pstrDescription: POINTER(win32more.Windows.Win32.Foundation.BSTR)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(10)
    def ShutDown(self) -> win32more.Windows.Win32.Foundation.HRESULT: ...
class ICertPolicy2(ComPtr):
    extends: win32more.Windows.Win32.Security.Cryptography.Certificates.ICertPolicy
    _iid_ = Guid('{3db4910e-8001-4bf1-aa1b-f43a808317a0}')
    @commethod(11)
    def GetManageModule(self, ppManageModule: POINTER(win32more.Windows.Win32.Security.Cryptography.Certificates.ICertManageModule)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
class ICertProperties(ComPtr):
    extends: win32more.Windows.Win32.System.Com.IDispatch
    _iid_ = Guid('{728ab32f-217d-11da-b2a4-000e7bbb2b09}')
    @commethod(7)
    def get_ItemByIndex(self, Index: Int32, pVal: POINTER(win32more.Windows.Win32.Security.Cryptography.Certificates.ICertProperty)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(8)
    def get_Count(self, pVal: POINTER(Int32)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(9)
    def get__NewEnum(self, pVal: POINTER(win32more.Windows.Win32.System.Com.IUnknown)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(10)
    def Add(self, pVal: win32more.Windows.Win32.Security.Cryptography.Certificates.ICertProperty) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(11)
    def Remove(self, Index: Int32) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(12)
    def Clear(self) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(13)
    def InitializeFromCertificate(self, MachineContext: win32more.Windows.Win32.Foundation.VARIANT_BOOL, Encoding: win32more.Windows.Win32.Security.Cryptography.Certificates.EncodingType, strCertificate: win32more.Windows.Win32.Foundation.BSTR) -> win32more.Windows.Win32.Foundation.HRESULT: ...
class ICertProperty(ComPtr):
    extends: win32more.Windows.Win32.System.Com.IDispatch
    _iid_ = Guid('{728ab32e-217d-11da-b2a4-000e7bbb2b09}')
    @commethod(7)
    def InitializeFromCertificate(self, MachineContext: win32more.Windows.Win32.Foundation.VARIANT_BOOL, Encoding: win32more.Windows.Win32.Security.Cryptography.Certificates.EncodingType, strCertificate: win32more.Windows.Win32.Foundation.BSTR) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(8)
    def InitializeDecode(self, Encoding: win32more.Windows.Win32.Security.Cryptography.Certificates.EncodingType, strEncodedData: win32more.Windows.Win32.Foundation.BSTR) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(9)
    def get_PropertyId(self, pValue: POINTER(win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_PROPERTYID)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(10)
    def put_PropertyId(self, Value: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_PROPERTYID) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(11)
    def get_RawData(self, Encoding: win32more.Windows.Win32.Security.Cryptography.Certificates.EncodingType, pValue: POINTER(win32more.Windows.Win32.Foundation.BSTR)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(12)
    def RemoveFromCertificate(self, MachineContext: win32more.Windows.Win32.Foundation.VARIANT_BOOL, Encoding: win32more.Windows.Win32.Security.Cryptography.Certificates.EncodingType, strCertificate: win32more.Windows.Win32.Foundation.BSTR) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(13)
    def SetValueOnCertificate(self, MachineContext: win32more.Windows.Win32.Foundation.VARIANT_BOOL, Encoding: win32more.Windows.Win32.Security.Cryptography.Certificates.EncodingType, strCertificate: win32more.Windows.Win32.Foundation.BSTR) -> win32more.Windows.Win32.Foundation.HRESULT: ...
class ICertPropertyArchived(ComPtr):
    extends: win32more.Windows.Win32.Security.Cryptography.Certificates.ICertProperty
    _iid_ = Guid('{728ab337-217d-11da-b2a4-000e7bbb2b09}')
    @commethod(14)
    def Initialize(self, ArchivedValue: win32more.Windows.Win32.Foundation.VARIANT_BOOL) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(15)
    def get_Archived(self, pValue: POINTER(win32more.Windows.Win32.Foundation.VARIANT_BOOL)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
class ICertPropertyArchivedKeyHash(ComPtr):
    extends: win32more.Windows.Win32.Security.Cryptography.Certificates.ICertProperty
    _iid_ = Guid('{728ab33b-217d-11da-b2a4-000e7bbb2b09}')
    @commethod(14)
    def Initialize(self, Encoding: win32more.Windows.Win32.Security.Cryptography.Certificates.EncodingType, strArchivedKeyHashValue: win32more.Windows.Win32.Foundation.BSTR) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(15)
    def get_ArchivedKeyHash(self, Encoding: win32more.Windows.Win32.Security.Cryptography.Certificates.EncodingType, pValue: POINTER(win32more.Windows.Win32.Foundation.BSTR)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
class ICertPropertyAutoEnroll(ComPtr):
    extends: win32more.Windows.Win32.Security.Cryptography.Certificates.ICertProperty
    _iid_ = Guid('{728ab332-217d-11da-b2a4-000e7bbb2b09}')
    @commethod(14)
    def Initialize(self, strTemplateName: win32more.Windows.Win32.Foundation.BSTR) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(15)
    def get_TemplateName(self, pValue: POINTER(win32more.Windows.Win32.Foundation.BSTR)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
class ICertPropertyBackedUp(ComPtr):
    extends: win32more.Windows.Win32.Security.Cryptography.Certificates.ICertProperty
    _iid_ = Guid('{728ab338-217d-11da-b2a4-000e7bbb2b09}')
    @commethod(14)
    def InitializeFromCurrentTime(self, BackedUpValue: win32more.Windows.Win32.Foundation.VARIANT_BOOL) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(15)
    def Initialize(self, BackedUpValue: win32more.Windows.Win32.Foundation.VARIANT_BOOL, Date: Double) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(16)
    def get_BackedUpValue(self, pValue: POINTER(win32more.Windows.Win32.Foundation.VARIANT_BOOL)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(17)
    def get_BackedUpTime(self, pDate: POINTER(Double)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
class ICertPropertyDescription(ComPtr):
    extends: win32more.Windows.Win32.Security.Cryptography.Certificates.ICertProperty
    _iid_ = Guid('{728ab331-217d-11da-b2a4-000e7bbb2b09}')
    @commethod(14)
    def Initialize(self, strDescription: win32more.Windows.Win32.Foundation.BSTR) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(15)
    def get_Description(self, pValue: POINTER(win32more.Windows.Win32.Foundation.BSTR)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
class ICertPropertyEnrollment(ComPtr):
    extends: win32more.Windows.Win32.Security.Cryptography.Certificates.ICertProperty
    _iid_ = Guid('{728ab339-217d-11da-b2a4-000e7bbb2b09}')
    @commethod(14)
    def Initialize(self, RequestId: Int32, strCADnsName: win32more.Windows.Win32.Foundation.BSTR, strCAName: win32more.Windows.Win32.Foundation.BSTR, strFriendlyName: win32more.Windows.Win32.Foundation.BSTR) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(15)
    def get_RequestId(self, pValue: POINTER(Int32)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(16)
    def get_CADnsName(self, pValue: POINTER(win32more.Windows.Win32.Foundation.BSTR)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(17)
    def get_CAName(self, pValue: POINTER(win32more.Windows.Win32.Foundation.BSTR)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(18)
    def get_FriendlyName(self, pValue: POINTER(win32more.Windows.Win32.Foundation.BSTR)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
class ICertPropertyEnrollmentPolicyServer(ComPtr):
    extends: win32more.Windows.Win32.Security.Cryptography.Certificates.ICertProperty
    _iid_ = Guid('{728ab34a-217d-11da-b2a4-000e7bbb2b09}')
    @commethod(14)
    def Initialize(self, PropertyFlags: win32more.Windows.Win32.Security.Cryptography.Certificates.EnrollmentPolicyServerPropertyFlags, AuthFlags: win32more.Windows.Win32.Security.Cryptography.Certificates.X509EnrollmentAuthFlags, EnrollmentServerAuthFlags: win32more.Windows.Win32.Security.Cryptography.Certificates.X509EnrollmentAuthFlags, UrlFlags: win32more.Windows.Win32.Security.Cryptography.Certificates.PolicyServerUrlFlags, strRequestId: win32more.Windows.Win32.Foundation.BSTR, strUrl: win32more.Windows.Win32.Foundation.BSTR, strId: win32more.Windows.Win32.Foundation.BSTR, strEnrollmentServerUrl: win32more.Windows.Win32.Foundation.BSTR) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(15)
    def GetPolicyServerUrl(self, pValue: POINTER(win32more.Windows.Win32.Foundation.BSTR)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(16)
    def GetPolicyServerId(self, pValue: POINTER(win32more.Windows.Win32.Foundation.BSTR)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(17)
    def GetEnrollmentServerUrl(self, pValue: POINTER(win32more.Windows.Win32.Foundation.BSTR)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(18)
    def GetRequestIdString(self, pValue: POINTER(win32more.Windows.Win32.Foundation.BSTR)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(19)
    def GetPropertyFlags(self, pValue: POINTER(win32more.Windows.Win32.Security.Cryptography.Certificates.EnrollmentPolicyServerPropertyFlags)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(20)
    def GetUrlFlags(self, pValue: POINTER(win32more.Windows.Win32.Security.Cryptography.Certificates.PolicyServerUrlFlags)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(21)
    def GetAuthentication(self, pValue: POINTER(win32more.Windows.Win32.Security.Cryptography.Certificates.X509EnrollmentAuthFlags)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(22)
    def GetEnrollmentServerAuthentication(self, pValue: POINTER(win32more.Windows.Win32.Security.Cryptography.Certificates.X509EnrollmentAuthFlags)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
class ICertPropertyFriendlyName(ComPtr):
    extends: win32more.Windows.Win32.Security.Cryptography.Certificates.ICertProperty
    _iid_ = Guid('{728ab330-217d-11da-b2a4-000e7bbb2b09}')
    @commethod(14)
    def Initialize(self, strFriendlyName: win32more.Windows.Win32.Foundation.BSTR) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(15)
    def get_FriendlyName(self, pValue: POINTER(win32more.Windows.Win32.Foundation.BSTR)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
class ICertPropertyKeyProvInfo(ComPtr):
    extends: win32more.Windows.Win32.Security.Cryptography.Certificates.ICertProperty
    _iid_ = Guid('{728ab336-217d-11da-b2a4-000e7bbb2b09}')
    @commethod(14)
    def Initialize(self, pValue: win32more.Windows.Win32.Security.Cryptography.Certificates.IX509PrivateKey) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(15)
    def get_PrivateKey(self, ppValue: POINTER(win32more.Windows.Win32.Security.Cryptography.Certificates.IX509PrivateKey)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
class ICertPropertyRenewal(ComPtr):
    extends: win32more.Windows.Win32.Security.Cryptography.Certificates.ICertProperty
    _iid_ = Guid('{728ab33a-217d-11da-b2a4-000e7bbb2b09}')
    @commethod(14)
    def Initialize(self, Encoding: win32more.Windows.Win32.Security.Cryptography.Certificates.EncodingType, strRenewalValue: win32more.Windows.Win32.Foundation.BSTR) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(15)
    def InitializeFromCertificateHash(self, MachineContext: win32more.Windows.Win32.Foundation.VARIANT_BOOL, Encoding: win32more.Windows.Win32.Security.Cryptography.Certificates.EncodingType, strCertificate: win32more.Windows.Win32.Foundation.BSTR) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(16)
    def get_Renewal(self, Encoding: win32more.Windows.Win32.Security.Cryptography.Certificates.EncodingType, pValue: POINTER(win32more.Windows.Win32.Foundation.BSTR)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
class ICertPropertyRequestOriginator(ComPtr):
    extends: win32more.Windows.Win32.Security.Cryptography.Certificates.ICertProperty
    _iid_ = Guid('{728ab333-217d-11da-b2a4-000e7bbb2b09}')
    @commethod(14)
    def Initialize(self, strRequestOriginator: win32more.Windows.Win32.Foundation.BSTR) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(15)
    def InitializeFromLocalRequestOriginator(self) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(16)
    def get_RequestOriginator(self, pValue: POINTER(win32more.Windows.Win32.Foundation.BSTR)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
class ICertPropertySHA1Hash(ComPtr):
    extends: win32more.Windows.Win32.Security.Cryptography.Certificates.ICertProperty
    _iid_ = Guid('{728ab334-217d-11da-b2a4-000e7bbb2b09}')
    @commethod(14)
    def Initialize(self, Encoding: win32more.Windows.Win32.Security.Cryptography.Certificates.EncodingType, strRenewalValue: win32more.Windows.Win32.Foundation.BSTR) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(15)
    def get_SHA1Hash(self, Encoding: win32more.Windows.Win32.Security.Cryptography.Certificates.EncodingType, pValue: POINTER(win32more.Windows.Win32.Foundation.BSTR)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
class ICertRequest(ComPtr):
    extends: win32more.Windows.Win32.System.Com.IDispatch
    _iid_ = Guid('{014e4840-5523-11d0-8812-00a0c903b83c}')
    @commethod(7)
    def Submit(self, Flags: Int32, strRequest: win32more.Windows.Win32.Foundation.BSTR, strAttributes: win32more.Windows.Win32.Foundation.BSTR, strConfig: win32more.Windows.Win32.Foundation.BSTR, pDisposition: POINTER(Int32)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(8)
    def RetrievePending(self, RequestId: Int32, strConfig: win32more.Windows.Win32.Foundation.BSTR, pDisposition: POINTER(Int32)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(9)
    def GetLastStatus(self, pStatus: POINTER(Int32)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(10)
    def GetRequestId(self, pRequestId: POINTER(Int32)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(11)
    def GetDispositionMessage(self, pstrDispositionMessage: POINTER(win32more.Windows.Win32.Foundation.BSTR)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(12)
    def GetCACertificate(self, fExchangeCertificate: Int32, strConfig: win32more.Windows.Win32.Foundation.BSTR, Flags: Int32, pstrCertificate: POINTER(win32more.Windows.Win32.Foundation.BSTR)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(13)
    def GetCertificate(self, Flags: Int32, pstrCertificate: POINTER(win32more.Windows.Win32.Foundation.BSTR)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
class ICertRequest2(ComPtr):
    extends: win32more.Windows.Win32.Security.Cryptography.Certificates.ICertRequest
    _iid_ = Guid('{a4772988-4a85-4fa9-824e-b5cf5c16405a}')
    @commethod(14)
    def GetIssuedCertificate(self, strConfig: win32more.Windows.Win32.Foundation.BSTR, RequestId: Int32, strSerialNumber: win32more.Windows.Win32.Foundation.BSTR, pDisposition: POINTER(win32more.Windows.Win32.Security.Cryptography.Certificates.CR_DISP)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(15)
    def GetErrorMessageText(self, hrMessage: Int32, Flags: Int32, pstrErrorMessageText: POINTER(win32more.Windows.Win32.Foundation.BSTR)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(16)
    def GetCAProperty(self, strConfig: win32more.Windows.Win32.Foundation.BSTR, PropId: Int32, PropIndex: Int32, PropType: Int32, Flags: Int32, pvarPropertyValue: POINTER(win32more.Windows.Win32.System.Variant.VARIANT)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(17)
    def GetCAPropertyFlags(self, strConfig: win32more.Windows.Win32.Foundation.BSTR, PropId: Int32, pPropFlags: POINTER(Int32)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(18)
    def GetCAPropertyDisplayName(self, strConfig: win32more.Windows.Win32.Foundation.BSTR, PropId: Int32, pstrDisplayName: POINTER(win32more.Windows.Win32.Foundation.BSTR)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(19)
    def GetFullResponseProperty(self, PropId: win32more.Windows.Win32.Security.Cryptography.Certificates.FULL_RESPONSE_PROPERTY_ID, PropIndex: Int32, PropType: win32more.Windows.Win32.Security.Cryptography.Certificates.CERT_PROPERTY_TYPE, Flags: win32more.Windows.Win32.Security.Cryptography.Certificates.CERT_REQUEST_OUT_TYPE, pvarPropertyValue: POINTER(win32more.Windows.Win32.System.Variant.VARIANT)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
class ICertRequest3(ComPtr):
    extends: win32more.Windows.Win32.Security.Cryptography.Certificates.ICertRequest2
    _iid_ = Guid('{afc8f92b-33a2-4861-bf36-2933b7cd67b3}')
    @commethod(20)
    def SetCredential(self, hWnd: Int32, AuthType: win32more.Windows.Win32.Security.Cryptography.Certificates.X509EnrollmentAuthFlags, strCredential: win32more.Windows.Win32.Foundation.BSTR, strPassword: win32more.Windows.Win32.Foundation.BSTR) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(21)
    def GetRequestIdString(self, pstrRequestId: POINTER(win32more.Windows.Win32.Foundation.BSTR)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(22)
    def GetIssuedCertificate2(self, strConfig: win32more.Windows.Win32.Foundation.BSTR, strRequestId: win32more.Windows.Win32.Foundation.BSTR, strSerialNumber: win32more.Windows.Win32.Foundation.BSTR, pDisposition: POINTER(win32more.Windows.Win32.Security.Cryptography.Certificates.CR_DISP)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(23)
    def GetRefreshPolicy(self, pValue: POINTER(win32more.Windows.Win32.Foundation.VARIANT_BOOL)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
class ICertRequestD(ComPtr):
    extends: win32more.Windows.Win32.System.Com.IUnknown
    _iid_ = Guid('{d99e6e70-fc88-11d0-b498-00a0c90312f3}')
    @commethod(3)
    def Request(self, dwFlags: UInt32, pwszAuthority: win32more.Windows.Win32.Foundation.PWSTR, pdwRequestId: POINTER(UInt32), pdwDisposition: POINTER(UInt32), pwszAttributes: win32more.Windows.Win32.Foundation.PWSTR, pctbRequest: POINTER(win32more.Windows.Win32.Security.Cryptography.Certificates.CERTTRANSBLOB), pctbCertChain: POINTER(win32more.Windows.Win32.Security.Cryptography.Certificates.CERTTRANSBLOB), pctbEncodedCert: POINTER(win32more.Windows.Win32.Security.Cryptography.Certificates.CERTTRANSBLOB), pctbDispositionMessage: POINTER(win32more.Windows.Win32.Security.Cryptography.Certificates.CERTTRANSBLOB)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(4)
    def GetCACert(self, fchain: UInt32, pwszAuthority: win32more.Windows.Win32.Foundation.PWSTR, pctbOut: POINTER(win32more.Windows.Win32.Security.Cryptography.Certificates.CERTTRANSBLOB)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(5)
    def Ping(self, pwszAuthority: win32more.Windows.Win32.Foundation.PWSTR) -> win32more.Windows.Win32.Foundation.HRESULT: ...
class ICertRequestD2(ComPtr):
    extends: win32more.Windows.Win32.Security.Cryptography.Certificates.ICertRequestD
    _iid_ = Guid('{5422fd3a-d4b8-4cef-a12e-e87d4ca22e90}')
    @commethod(6)
    def Request2(self, pwszAuthority: win32more.Windows.Win32.Foundation.PWSTR, dwFlags: UInt32, pwszSerialNumber: win32more.Windows.Win32.Foundation.PWSTR, pdwRequestId: POINTER(UInt32), pdwDisposition: POINTER(UInt32), pwszAttributes: win32more.Windows.Win32.Foundation.PWSTR, pctbRequest: POINTER(win32more.Windows.Win32.Security.Cryptography.Certificates.CERTTRANSBLOB), pctbFullResponse: POINTER(win32more.Windows.Win32.Security.Cryptography.Certificates.CERTTRANSBLOB), pctbEncodedCert: POINTER(win32more.Windows.Win32.Security.Cryptography.Certificates.CERTTRANSBLOB), pctbDispositionMessage: POINTER(win32more.Windows.Win32.Security.Cryptography.Certificates.CERTTRANSBLOB)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(7)
    def GetCAProperty(self, pwszAuthority: win32more.Windows.Win32.Foundation.PWSTR, PropId: Int32, PropIndex: Int32, PropType: Int32, pctbPropertyValue: POINTER(win32more.Windows.Win32.Security.Cryptography.Certificates.CERTTRANSBLOB)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(8)
    def GetCAPropertyInfo(self, pwszAuthority: win32more.Windows.Win32.Foundation.PWSTR, pcProperty: POINTER(Int32), pctbPropInfo: POINTER(win32more.Windows.Win32.Security.Cryptography.Certificates.CERTTRANSBLOB)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(9)
    def Ping2(self, pwszAuthority: win32more.Windows.Win32.Foundation.PWSTR) -> win32more.Windows.Win32.Foundation.HRESULT: ...
class ICertServerExit(ComPtr):
    extends: win32more.Windows.Win32.System.Com.IDispatch
    _iid_ = Guid('{4ba9eb90-732c-11d0-8816-00a0c903b83c}')
    @commethod(7)
    def SetContext(self, Context: Int32) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(8)
    def GetRequestProperty(self, strPropertyName: win32more.Windows.Win32.Foundation.BSTR, PropertyType: Int32, pvarPropertyValue: POINTER(win32more.Windows.Win32.System.Variant.VARIANT)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(9)
    def GetRequestAttribute(self, strAttributeName: win32more.Windows.Win32.Foundation.BSTR, pstrAttributeValue: POINTER(win32more.Windows.Win32.Foundation.BSTR)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(10)
    def GetCertificateProperty(self, strPropertyName: win32more.Windows.Win32.Foundation.BSTR, PropertyType: Int32, pvarPropertyValue: POINTER(win32more.Windows.Win32.System.Variant.VARIANT)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(11)
    def GetCertificateExtension(self, strExtensionName: win32more.Windows.Win32.Foundation.BSTR, Type: Int32, pvarValue: POINTER(win32more.Windows.Win32.System.Variant.VARIANT)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(12)
    def GetCertificateExtensionFlags(self, pExtFlags: POINTER(Int32)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(13)
    def EnumerateExtensionsSetup(self, Flags: Int32) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(14)
    def EnumerateExtensions(self, pstrExtensionName: POINTER(win32more.Windows.Win32.Foundation.BSTR)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(15)
    def EnumerateExtensionsClose(self) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(16)
    def EnumerateAttributesSetup(self, Flags: Int32) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(17)
    def EnumerateAttributes(self, pstrAttributeName: POINTER(win32more.Windows.Win32.Foundation.BSTR)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(18)
    def EnumerateAttributesClose(self) -> win32more.Windows.Win32.Foundation.HRESULT: ...
class ICertServerPolicy(ComPtr):
    extends: win32more.Windows.Win32.System.Com.IDispatch
    _iid_ = Guid('{aa000922-ffbe-11cf-8800-00a0c903b83c}')
    @commethod(7)
    def SetContext(self, Context: Int32) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(8)
    def GetRequestProperty(self, strPropertyName: win32more.Windows.Win32.Foundation.BSTR, PropertyType: Int32, pvarPropertyValue: POINTER(win32more.Windows.Win32.System.Variant.VARIANT)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(9)
    def GetRequestAttribute(self, strAttributeName: win32more.Windows.Win32.Foundation.BSTR, pstrAttributeValue: POINTER(win32more.Windows.Win32.Foundation.BSTR)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(10)
    def GetCertificateProperty(self, strPropertyName: win32more.Windows.Win32.Foundation.BSTR, PropertyType: win32more.Windows.Win32.Security.Cryptography.Certificates.CERT_PROPERTY_TYPE, pvarPropertyValue: POINTER(win32more.Windows.Win32.System.Variant.VARIANT)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(11)
    def SetCertificateProperty(self, strPropertyName: win32more.Windows.Win32.Foundation.BSTR, PropertyType: Int32, pvarPropertyValue: POINTER(win32more.Windows.Win32.System.Variant.VARIANT)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(12)
    def GetCertificateExtension(self, strExtensionName: win32more.Windows.Win32.Foundation.BSTR, Type: win32more.Windows.Win32.Security.Cryptography.Certificates.CERT_PROPERTY_TYPE, pvarValue: POINTER(win32more.Windows.Win32.System.Variant.VARIANT)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(13)
    def GetCertificateExtensionFlags(self, pExtFlags: POINTER(Int32)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(14)
    def SetCertificateExtension(self, strExtensionName: win32more.Windows.Win32.Foundation.BSTR, Type: Int32, ExtFlags: Int32, pvarValue: POINTER(win32more.Windows.Win32.System.Variant.VARIANT)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(15)
    def EnumerateExtensionsSetup(self, Flags: Int32) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(16)
    def EnumerateExtensions(self, pstrExtensionName: POINTER(win32more.Windows.Win32.Foundation.BSTR)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(17)
    def EnumerateExtensionsClose(self) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(18)
    def EnumerateAttributesSetup(self, Flags: Int32) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(19)
    def EnumerateAttributes(self, pstrAttributeName: POINTER(win32more.Windows.Win32.Foundation.BSTR)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(20)
    def EnumerateAttributesClose(self) -> win32more.Windows.Win32.Foundation.HRESULT: ...
class ICertView(ComPtr):
    extends: win32more.Windows.Win32.System.Com.IDispatch
    _iid_ = Guid('{c3fac344-1e84-11d1-9bd6-00c04fb683fa}')
    @commethod(7)
    def OpenConnection(self, strConfig: win32more.Windows.Win32.Foundation.BSTR) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(8)
    def EnumCertViewColumn(self, fResultColumn: win32more.Windows.Win32.Security.Cryptography.Certificates.CVRC_COLUMN, ppenum: POINTER(win32more.Windows.Win32.Security.Cryptography.Certificates.IEnumCERTVIEWCOLUMN)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(9)
    def GetColumnCount(self, fResultColumn: win32more.Windows.Win32.Security.Cryptography.Certificates.CVRC_COLUMN, pcColumn: POINTER(Int32)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(10)
    def GetColumnIndex(self, fResultColumn: win32more.Windows.Win32.Security.Cryptography.Certificates.CVRC_COLUMN, strColumnName: win32more.Windows.Win32.Foundation.BSTR, pColumnIndex: POINTER(Int32)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(11)
    def SetResultColumnCount(self, cResultColumn: Int32) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(12)
    def SetResultColumn(self, ColumnIndex: Int32) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(13)
    def SetRestriction(self, ColumnIndex: win32more.Windows.Win32.Security.Cryptography.Certificates.CERT_VIEW_COLUMN_INDEX, SeekOperator: win32more.Windows.Win32.Security.Cryptography.Certificates.CERT_VIEW_SEEK_OPERATOR_FLAGS, SortOrder: Int32, pvarValue: POINTER(win32more.Windows.Win32.System.Variant.VARIANT)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(14)
    def OpenView(self, ppenum: POINTER(win32more.Windows.Win32.Security.Cryptography.Certificates.IEnumCERTVIEWROW)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
class ICertView2(ComPtr):
    extends: win32more.Windows.Win32.Security.Cryptography.Certificates.ICertView
    _iid_ = Guid('{d594b282-8851-4b61-9c66-3edadf848863}')
    @commethod(15)
    def SetTable(self, Table: win32more.Windows.Win32.Security.Cryptography.Certificates.CVRC_TABLE) -> win32more.Windows.Win32.Foundation.HRESULT: ...
class ICertificateAttestationChallenge(ComPtr):
    extends: win32more.Windows.Win32.System.Com.IDispatch
    _iid_ = Guid('{6f175a7c-4a3a-40ae-9dba-592fd6bbf9b8}')
    @commethod(7)
    def Initialize(self, Encoding: win32more.Windows.Win32.Security.Cryptography.Certificates.EncodingType, strPendingFullCmcResponseWithChallenge: win32more.Windows.Win32.Foundation.BSTR) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(8)
    def DecryptChallenge(self, Encoding: win32more.Windows.Win32.Security.Cryptography.Certificates.EncodingType, pstrEnvelopedPkcs7ReencryptedToCA: POINTER(win32more.Windows.Win32.Foundation.BSTR)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(9)
    def get_RequestID(self, pstrRequestID: POINTER(win32more.Windows.Win32.Foundation.BSTR)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
class ICertificateAttestationChallenge2(ComPtr):
    extends: win32more.Windows.Win32.Security.Cryptography.Certificates.ICertificateAttestationChallenge
    _iid_ = Guid('{4631334d-e266-47d6-bd79-be53cb2e2753}')
    @commethod(10)
    def put_KeyContainerName(self, Value: win32more.Windows.Win32.Foundation.BSTR) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(11)
    def put_KeyBlob(self, Encoding: win32more.Windows.Win32.Security.Cryptography.Certificates.EncodingType, Value: win32more.Windows.Win32.Foundation.BSTR) -> win32more.Windows.Win32.Foundation.HRESULT: ...
class ICertificatePolicies(ComPtr):
    extends: win32more.Windows.Win32.System.Com.IDispatch
    _iid_ = Guid('{728ab31f-217d-11da-b2a4-000e7bbb2b09}')
    @commethod(7)
    def get_ItemByIndex(self, Index: Int32, pVal: POINTER(win32more.Windows.Win32.Security.Cryptography.Certificates.ICertificatePolicy)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(8)
    def get_Count(self, pVal: POINTER(Int32)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(9)
    def get__NewEnum(self, pVal: POINTER(win32more.Windows.Win32.System.Com.IUnknown)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(10)
    def Add(self, pVal: win32more.Windows.Win32.Security.Cryptography.Certificates.ICertificatePolicy) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(11)
    def Remove(self, Index: Int32) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(12)
    def Clear(self) -> win32more.Windows.Win32.Foundation.HRESULT: ...
class ICertificatePolicy(ComPtr):
    extends: win32more.Windows.Win32.System.Com.IDispatch
    _iid_ = Guid('{728ab31e-217d-11da-b2a4-000e7bbb2b09}')
    @commethod(7)
    def Initialize(self, pValue: win32more.Windows.Win32.Security.Cryptography.Certificates.IObjectId) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(8)
    def get_ObjectId(self, ppValue: POINTER(win32more.Windows.Win32.Security.Cryptography.Certificates.IObjectId)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(9)
    def get_PolicyQualifiers(self, ppValue: POINTER(win32more.Windows.Win32.Security.Cryptography.Certificates.IPolicyQualifiers)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
class ICertificationAuthorities(ComPtr):
    extends: win32more.Windows.Win32.System.Com.IDispatch
    _iid_ = Guid('{13b79005-2181-11da-b2a4-000e7bbb2b09}')
    @commethod(7)
    def get_ItemByIndex(self, Index: Int32, pVal: POINTER(win32more.Windows.Win32.Security.Cryptography.Certificates.ICertificationAuthority)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(8)
    def get_Count(self, pVal: POINTER(Int32)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(9)
    def get__NewEnum(self, pVal: POINTER(win32more.Windows.Win32.System.Com.IUnknown)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(10)
    def Add(self, pVal: win32more.Windows.Win32.Security.Cryptography.Certificates.ICertificationAuthority) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(11)
    def Remove(self, Index: Int32) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(12)
    def Clear(self) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(13)
    def ComputeSiteCosts(self) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(14)
    def get_ItemByName(self, strName: win32more.Windows.Win32.Foundation.BSTR, ppValue: POINTER(win32more.Windows.Win32.Security.Cryptography.Certificates.ICertificationAuthority)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
class ICertificationAuthority(ComPtr):
    extends: win32more.Windows.Win32.System.Com.IDispatch
    _iid_ = Guid('{835d1f61-1e95-4bc8-b4d3-976c42b968f7}')
    @commethod(7)
    def get_Property(self, property: win32more.Windows.Win32.Security.Cryptography.Certificates.EnrollmentCAProperty, pValue: POINTER(win32more.Windows.Win32.System.Variant.VARIANT)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
class ICryptAttribute(ComPtr):
    extends: win32more.Windows.Win32.System.Com.IDispatch
    _iid_ = Guid('{728ab32c-217d-11da-b2a4-000e7bbb2b09}')
    @commethod(7)
    def InitializeFromObjectId(self, pObjectId: win32more.Windows.Win32.Security.Cryptography.Certificates.IObjectId) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(8)
    def InitializeFromValues(self, pAttributes: win32more.Windows.Win32.Security.Cryptography.Certificates.IX509Attributes) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(9)
    def get_ObjectId(self, ppValue: POINTER(win32more.Windows.Win32.Security.Cryptography.Certificates.IObjectId)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(10)
    def get_Values(self, ppValue: POINTER(win32more.Windows.Win32.Security.Cryptography.Certificates.IX509Attributes)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
class ICryptAttributes(ComPtr):
    extends: win32more.Windows.Win32.System.Com.IDispatch
    _iid_ = Guid('{728ab32d-217d-11da-b2a4-000e7bbb2b09}')
    @commethod(7)
    def get_ItemByIndex(self, Index: Int32, pVal: POINTER(win32more.Windows.Win32.Security.Cryptography.Certificates.ICryptAttribute)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(8)
    def get_Count(self, pVal: POINTER(Int32)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(9)
    def get__NewEnum(self, pVal: POINTER(win32more.Windows.Win32.System.Com.IUnknown)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(10)
    def Add(self, pVal: win32more.Windows.Win32.Security.Cryptography.Certificates.ICryptAttribute) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(11)
    def Remove(self, Index: Int32) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(12)
    def Clear(self) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(13)
    def get_IndexByObjectId(self, pObjectId: win32more.Windows.Win32.Security.Cryptography.Certificates.IObjectId, pIndex: POINTER(Int32)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(14)
    def AddRange(self, pValue: win32more.Windows.Win32.Security.Cryptography.Certificates.ICryptAttributes) -> win32more.Windows.Win32.Foundation.HRESULT: ...
class ICspAlgorithm(ComPtr):
    extends: win32more.Windows.Win32.System.Com.IDispatch
    _iid_ = Guid('{728ab305-217d-11da-b2a4-000e7bbb2b09}')
    @commethod(7)
    def GetAlgorithmOid(self, Length: Int32, AlgFlags: win32more.Windows.Win32.Security.Cryptography.Certificates.AlgorithmFlags, ppValue: POINTER(win32more.Windows.Win32.Security.Cryptography.Certificates.IObjectId)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(8)
    def get_DefaultLength(self, pValue: POINTER(Int32)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(9)
    def get_IncrementLength(self, pValue: POINTER(Int32)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(10)
    def get_LongName(self, pValue: POINTER(win32more.Windows.Win32.Foundation.BSTR)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(11)
    def get_Valid(self, pValue: POINTER(win32more.Windows.Win32.Foundation.VARIANT_BOOL)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(12)
    def get_MaxLength(self, pValue: POINTER(Int32)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(13)
    def get_MinLength(self, pValue: POINTER(Int32)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(14)
    def get_Name(self, pValue: POINTER(win32more.Windows.Win32.Foundation.BSTR)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(15)
    def get_Type(self, pValue: POINTER(win32more.Windows.Win32.Security.Cryptography.Certificates.AlgorithmType)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(16)
    def get_Operations(self, pValue: POINTER(win32more.Windows.Win32.Security.Cryptography.Certificates.AlgorithmOperationFlags)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
class ICspAlgorithms(ComPtr):
    extends: win32more.Windows.Win32.System.Com.IDispatch
    _iid_ = Guid('{728ab306-217d-11da-b2a4-000e7bbb2b09}')
    @commethod(7)
    def get_ItemByIndex(self, Index: Int32, pVal: POINTER(win32more.Windows.Win32.Security.Cryptography.Certificates.ICspAlgorithm)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(8)
    def get_Count(self, pVal: POINTER(Int32)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(9)
    def get__NewEnum(self, pVal: POINTER(win32more.Windows.Win32.System.Com.IUnknown)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(10)
    def Add(self, pVal: win32more.Windows.Win32.Security.Cryptography.Certificates.ICspAlgorithm) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(11)
    def Remove(self, Index: Int32) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(12)
    def Clear(self) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(13)
    def get_ItemByName(self, strName: win32more.Windows.Win32.Foundation.BSTR, ppValue: POINTER(win32more.Windows.Win32.Security.Cryptography.Certificates.ICspAlgorithm)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(14)
    def get_IndexByObjectId(self, pObjectId: win32more.Windows.Win32.Security.Cryptography.Certificates.IObjectId, pIndex: POINTER(Int32)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
class ICspInformation(ComPtr):
    extends: win32more.Windows.Win32.System.Com.IDispatch
    _iid_ = Guid('{728ab307-217d-11da-b2a4-000e7bbb2b09}')
    @commethod(7)
    def InitializeFromName(self, strName: win32more.Windows.Win32.Foundation.BSTR) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(8)
    def InitializeFromType(self, Type: win32more.Windows.Win32.Security.Cryptography.Certificates.X509ProviderType, pAlgorithm: win32more.Windows.Win32.Security.Cryptography.Certificates.IObjectId, MachineContext: win32more.Windows.Win32.Foundation.VARIANT_BOOL) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(9)
    def get_CspAlgorithms(self, ppValue: POINTER(win32more.Windows.Win32.Security.Cryptography.Certificates.ICspAlgorithms)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(10)
    def get_HasHardwareRandomNumberGenerator(self, pValue: POINTER(win32more.Windows.Win32.Foundation.VARIANT_BOOL)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(11)
    def get_IsHardwareDevice(self, pValue: POINTER(win32more.Windows.Win32.Foundation.VARIANT_BOOL)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(12)
    def get_IsRemovable(self, pValue: POINTER(win32more.Windows.Win32.Foundation.VARIANT_BOOL)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(13)
    def get_IsSoftwareDevice(self, pValue: POINTER(win32more.Windows.Win32.Foundation.VARIANT_BOOL)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(14)
    def get_Valid(self, pValue: POINTER(win32more.Windows.Win32.Foundation.VARIANT_BOOL)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(15)
    def get_MaxKeyContainerNameLength(self, pValue: POINTER(Int32)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(16)
    def get_Name(self, pValue: POINTER(win32more.Windows.Win32.Foundation.BSTR)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(17)
    def get_Type(self, pValue: POINTER(win32more.Windows.Win32.Security.Cryptography.Certificates.X509ProviderType)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(18)
    def get_Version(self, pValue: POINTER(Int32)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(19)
    def get_KeySpec(self, pValue: POINTER(win32more.Windows.Win32.Security.Cryptography.Certificates.X509KeySpec)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(20)
    def get_IsSmartCard(self, pValue: POINTER(win32more.Windows.Win32.Foundation.VARIANT_BOOL)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(21)
    def GetDefaultSecurityDescriptor(self, MachineContext: win32more.Windows.Win32.Foundation.VARIANT_BOOL, pValue: POINTER(win32more.Windows.Win32.Foundation.BSTR)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(22)
    def get_LegacyCsp(self, pValue: POINTER(win32more.Windows.Win32.Foundation.VARIANT_BOOL)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(23)
    def GetCspStatusFromOperations(self, pAlgorithm: win32more.Windows.Win32.Security.Cryptography.Certificates.IObjectId, Operations: win32more.Windows.Win32.Security.Cryptography.Certificates.AlgorithmOperationFlags, ppValue: POINTER(win32more.Windows.Win32.Security.Cryptography.Certificates.ICspStatus)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
class ICspInformations(ComPtr):
    extends: win32more.Windows.Win32.System.Com.IDispatch
    _iid_ = Guid('{728ab308-217d-11da-b2a4-000e7bbb2b09}')
    @commethod(7)
    def get_ItemByIndex(self, Index: Int32, pVal: POINTER(win32more.Windows.Win32.Security.Cryptography.Certificates.ICspInformation)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(8)
    def get_Count(self, pVal: POINTER(Int32)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(9)
    def get__NewEnum(self, pVal: POINTER(win32more.Windows.Win32.System.Com.IUnknown)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(10)
    def Add(self, pVal: win32more.Windows.Win32.Security.Cryptography.Certificates.ICspInformation) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(11)
    def Remove(self, Index: Int32) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(12)
    def Clear(self) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(13)
    def AddAvailableCsps(self) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(14)
    def get_ItemByName(self, strName: win32more.Windows.Win32.Foundation.BSTR, ppCspInformation: POINTER(win32more.Windows.Win32.Security.Cryptography.Certificates.ICspInformation)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(15)
    def GetCspStatusFromProviderName(self, strProviderName: win32more.Windows.Win32.Foundation.BSTR, LegacyKeySpec: win32more.Windows.Win32.Security.Cryptography.Certificates.X509KeySpec, ppValue: POINTER(win32more.Windows.Win32.Security.Cryptography.Certificates.ICspStatus)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(16)
    def GetCspStatusesFromOperations(self, Operations: win32more.Windows.Win32.Security.Cryptography.Certificates.AlgorithmOperationFlags, pCspInformation: win32more.Windows.Win32.Security.Cryptography.Certificates.ICspInformation, ppValue: POINTER(win32more.Windows.Win32.Security.Cryptography.Certificates.ICspStatuses)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(17)
    def GetEncryptionCspAlgorithms(self, pCspInformation: win32more.Windows.Win32.Security.Cryptography.Certificates.ICspInformation, ppValue: POINTER(win32more.Windows.Win32.Security.Cryptography.Certificates.ICspAlgorithms)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(18)
    def GetHashAlgorithms(self, pCspInformation: win32more.Windows.Win32.Security.Cryptography.Certificates.ICspInformation, ppValue: POINTER(win32more.Windows.Win32.Security.Cryptography.Certificates.IObjectIds)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
class ICspStatus(ComPtr):
    extends: win32more.Windows.Win32.System.Com.IDispatch
    _iid_ = Guid('{728ab309-217d-11da-b2a4-000e7bbb2b09}')
    @commethod(7)
    def Initialize(self, pCsp: win32more.Windows.Win32.Security.Cryptography.Certificates.ICspInformation, pAlgorithm: win32more.Windows.Win32.Security.Cryptography.Certificates.ICspAlgorithm) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(8)
    def get_Ordinal(self, pValue: POINTER(Int32)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(9)
    def put_Ordinal(self, Value: Int32) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(10)
    def get_CspAlgorithm(self, ppValue: POINTER(win32more.Windows.Win32.Security.Cryptography.Certificates.ICspAlgorithm)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(11)
    def get_CspInformation(self, ppValue: POINTER(win32more.Windows.Win32.Security.Cryptography.Certificates.ICspInformation)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(12)
    def get_EnrollmentStatus(self, ppValue: POINTER(win32more.Windows.Win32.Security.Cryptography.Certificates.IX509EnrollmentStatus)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(13)
    def get_DisplayName(self, pValue: POINTER(win32more.Windows.Win32.Foundation.BSTR)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
class ICspStatuses(ComPtr):
    extends: win32more.Windows.Win32.System.Com.IDispatch
    _iid_ = Guid('{728ab30a-217d-11da-b2a4-000e7bbb2b09}')
    @commethod(7)
    def get_ItemByIndex(self, Index: Int32, pVal: POINTER(win32more.Windows.Win32.Security.Cryptography.Certificates.ICspStatus)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(8)
    def get_Count(self, pVal: POINTER(Int32)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(9)
    def get__NewEnum(self, pVal: POINTER(win32more.Windows.Win32.System.Com.IUnknown)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(10)
    def Add(self, pVal: win32more.Windows.Win32.Security.Cryptography.Certificates.ICspStatus) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(11)
    def Remove(self, Index: Int32) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(12)
    def Clear(self) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(13)
    def get_ItemByName(self, strCspName: win32more.Windows.Win32.Foundation.BSTR, strAlgorithmName: win32more.Windows.Win32.Foundation.BSTR, ppValue: POINTER(win32more.Windows.Win32.Security.Cryptography.Certificates.ICspStatus)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(14)
    def get_ItemByOrdinal(self, Ordinal: Int32, ppValue: POINTER(win32more.Windows.Win32.Security.Cryptography.Certificates.ICspStatus)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(15)
    def get_ItemByOperations(self, strCspName: win32more.Windows.Win32.Foundation.BSTR, strAlgorithmName: win32more.Windows.Win32.Foundation.BSTR, Operations: win32more.Windows.Win32.Security.Cryptography.Certificates.AlgorithmOperationFlags, ppValue: POINTER(win32more.Windows.Win32.Security.Cryptography.Certificates.ICspStatus)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(16)
    def get_ItemByProvider(self, pCspStatus: win32more.Windows.Win32.Security.Cryptography.Certificates.ICspStatus, ppValue: POINTER(win32more.Windows.Win32.Security.Cryptography.Certificates.ICspStatus)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
class IEnroll(ComPtr):
    extends: win32more.Windows.Win32.System.Com.IUnknown
    _iid_ = Guid('{acaa7838-4585-11d1-ab57-00c04fc295e1}')
    @commethod(3)
    def createFilePKCS10WStr(self, DNName: win32more.Windows.Win32.Foundation.PWSTR, Usage: win32more.Windows.Win32.Foundation.PWSTR, wszPKCS10FileName: win32more.Windows.Win32.Foundation.PWSTR) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(4)
    def acceptFilePKCS7WStr(self, wszPKCS7FileName: win32more.Windows.Win32.Foundation.PWSTR) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(5)
    def createPKCS10WStr(self, DNName: win32more.Windows.Win32.Foundation.PWSTR, Usage: win32more.Windows.Win32.Foundation.PWSTR, pPkcs10Blob: POINTER(win32more.Windows.Win32.Security.Cryptography.CRYPT_INTEGER_BLOB)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(6)
    def acceptPKCS7Blob(self, pBlobPKCS7: POINTER(win32more.Windows.Win32.Security.Cryptography.CRYPT_INTEGER_BLOB)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(7)
    def getCertContextFromPKCS7(self, pBlobPKCS7: POINTER(win32more.Windows.Win32.Security.Cryptography.CRYPT_INTEGER_BLOB)) -> POINTER(win32more.Windows.Win32.Security.Cryptography.CERT_CONTEXT): ...
    @commethod(8)
    def getMyStore(self) -> win32more.Windows.Win32.Security.Cryptography.HCERTSTORE: ...
    @commethod(9)
    def getCAStore(self) -> win32more.Windows.Win32.Security.Cryptography.HCERTSTORE: ...
    @commethod(10)
    def getROOTHStore(self) -> win32more.Windows.Win32.Security.Cryptography.HCERTSTORE: ...
    @commethod(11)
    def enumProvidersWStr(self, dwIndex: Int32, dwFlags: Int32, pbstrProvName: POINTER(win32more.Windows.Win32.Foundation.PWSTR)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(12)
    def enumContainersWStr(self, dwIndex: Int32, pbstr: POINTER(win32more.Windows.Win32.Foundation.PWSTR)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(13)
    def freeRequestInfoBlob(self, pkcs7OrPkcs10: win32more.Windows.Win32.Security.Cryptography.CRYPT_INTEGER_BLOB) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(14)
    def get_MyStoreNameWStr(self, szwName: POINTER(win32more.Windows.Win32.Foundation.PWSTR)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(15)
    def put_MyStoreNameWStr(self, szwName: win32more.Windows.Win32.Foundation.PWSTR) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(16)
    def get_MyStoreTypeWStr(self, szwType: POINTER(win32more.Windows.Win32.Foundation.PWSTR)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(17)
    def put_MyStoreTypeWStr(self, szwType: win32more.Windows.Win32.Foundation.PWSTR) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(18)
    def get_MyStoreFlags(self, pdwFlags: POINTER(Int32)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(19)
    def put_MyStoreFlags(self, dwFlags: Int32) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(20)
    def get_CAStoreNameWStr(self, szwName: POINTER(win32more.Windows.Win32.Foundation.PWSTR)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(21)
    def put_CAStoreNameWStr(self, szwName: win32more.Windows.Win32.Foundation.PWSTR) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(22)
    def get_CAStoreTypeWStr(self, szwType: POINTER(win32more.Windows.Win32.Foundation.PWSTR)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(23)
    def put_CAStoreTypeWStr(self, szwType: win32more.Windows.Win32.Foundation.PWSTR) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(24)
    def get_CAStoreFlags(self, pdwFlags: POINTER(Int32)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(25)
    def put_CAStoreFlags(self, dwFlags: Int32) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(26)
    def get_RootStoreNameWStr(self, szwName: POINTER(win32more.Windows.Win32.Foundation.PWSTR)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(27)
    def put_RootStoreNameWStr(self, szwName: win32more.Windows.Win32.Foundation.PWSTR) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(28)
    def get_RootStoreTypeWStr(self, szwType: POINTER(win32more.Windows.Win32.Foundation.PWSTR)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(29)
    def put_RootStoreTypeWStr(self, szwType: win32more.Windows.Win32.Foundation.PWSTR) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(30)
    def get_RootStoreFlags(self, pdwFlags: POINTER(Int32)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(31)
    def put_RootStoreFlags(self, dwFlags: Int32) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(32)
    def get_RequestStoreNameWStr(self, szwName: POINTER(win32more.Windows.Win32.Foundation.PWSTR)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(33)
    def put_RequestStoreNameWStr(self, szwName: win32more.Windows.Win32.Foundation.PWSTR) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(34)
    def get_RequestStoreTypeWStr(self, szwType: POINTER(win32more.Windows.Win32.Foundation.PWSTR)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(35)
    def put_RequestStoreTypeWStr(self, szwType: win32more.Windows.Win32.Foundation.PWSTR) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(36)
    def get_RequestStoreFlags(self, pdwFlags: POINTER(Int32)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(37)
    def put_RequestStoreFlags(self, dwFlags: Int32) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(38)
    def get_ContainerNameWStr(self, szwContainer: POINTER(win32more.Windows.Win32.Foundation.PWSTR)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(39)
    def put_ContainerNameWStr(self, szwContainer: win32more.Windows.Win32.Foundation.PWSTR) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(40)
    def get_ProviderNameWStr(self, szwProvider: POINTER(win32more.Windows.Win32.Foundation.PWSTR)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(41)
    def put_ProviderNameWStr(self, szwProvider: win32more.Windows.Win32.Foundation.PWSTR) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(42)
    def get_ProviderType(self, pdwType: POINTER(Int32)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(43)
    def put_ProviderType(self, dwType: Int32) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(44)
    def get_KeySpec(self, pdw: POINTER(Int32)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(45)
    def put_KeySpec(self, dw: Int32) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(46)
    def get_ProviderFlags(self, pdwFlags: POINTER(Int32)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(47)
    def put_ProviderFlags(self, dwFlags: Int32) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(48)
    def get_UseExistingKeySet(self, fUseExistingKeys: POINTER(win32more.Windows.Win32.Foundation.BOOL)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(49)
    def put_UseExistingKeySet(self, fUseExistingKeys: win32more.Windows.Win32.Foundation.BOOL) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(50)
    def get_GenKeyFlags(self, pdwFlags: POINTER(Int32)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(51)
    def put_GenKeyFlags(self, dwFlags: Int32) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(52)
    def get_DeleteRequestCert(self, fDelete: POINTER(win32more.Windows.Win32.Foundation.BOOL)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(53)
    def put_DeleteRequestCert(self, fDelete: win32more.Windows.Win32.Foundation.BOOL) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(54)
    def get_WriteCertToUserDS(self, fBool: POINTER(win32more.Windows.Win32.Foundation.BOOL)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(55)
    def put_WriteCertToUserDS(self, fBool: win32more.Windows.Win32.Foundation.BOOL) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(56)
    def get_EnableT61DNEncoding(self, fBool: POINTER(win32more.Windows.Win32.Foundation.BOOL)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(57)
    def put_EnableT61DNEncoding(self, fBool: win32more.Windows.Win32.Foundation.BOOL) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(58)
    def get_WriteCertToCSP(self, fBool: POINTER(win32more.Windows.Win32.Foundation.BOOL)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(59)
    def put_WriteCertToCSP(self, fBool: win32more.Windows.Win32.Foundation.BOOL) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(60)
    def get_SPCFileNameWStr(self, szw: POINTER(win32more.Windows.Win32.Foundation.PWSTR)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(61)
    def put_SPCFileNameWStr(self, szw: win32more.Windows.Win32.Foundation.PWSTR) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(62)
    def get_PVKFileNameWStr(self, szw: POINTER(win32more.Windows.Win32.Foundation.PWSTR)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(63)
    def put_PVKFileNameWStr(self, szw: win32more.Windows.Win32.Foundation.PWSTR) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(64)
    def get_HashAlgorithmWStr(self, szw: POINTER(win32more.Windows.Win32.Foundation.PWSTR)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(65)
    def put_HashAlgorithmWStr(self, szw: win32more.Windows.Win32.Foundation.PWSTR) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(66)
    def get_RenewalCertificate(self, ppCertContext: POINTER(POINTER(win32more.Windows.Win32.Security.Cryptography.CERT_CONTEXT))) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(67)
    def put_RenewalCertificate(self, pCertContext: POINTER(win32more.Windows.Win32.Security.Cryptography.CERT_CONTEXT)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(68)
    def AddCertTypeToRequestWStr(self, szw: win32more.Windows.Win32.Foundation.PWSTR) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(69)
    def AddNameValuePairToSignatureWStr(self, Name: win32more.Windows.Win32.Foundation.PWSTR, Value: win32more.Windows.Win32.Foundation.PWSTR) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(70)
    def AddExtensionsToRequest(self, pCertExtensions: POINTER(win32more.Windows.Win32.Security.Cryptography.CERT_EXTENSIONS)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(71)
    def AddAuthenticatedAttributesToPKCS7Request(self, pAttributes: POINTER(win32more.Windows.Win32.Security.Cryptography.CRYPT_ATTRIBUTES)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(72)
    def CreatePKCS7RequestFromRequest(self, pRequest: POINTER(win32more.Windows.Win32.Security.Cryptography.CRYPT_INTEGER_BLOB), pSigningCertContext: POINTER(win32more.Windows.Win32.Security.Cryptography.CERT_CONTEXT), pPkcs7Blob: POINTER(win32more.Windows.Win32.Security.Cryptography.CRYPT_INTEGER_BLOB)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
class IEnroll2(ComPtr):
    extends: win32more.Windows.Win32.Security.Cryptography.Certificates.IEnroll
    _iid_ = Guid('{c080e199-b7df-11d2-a421-00c04f79fe8e}')
    @commethod(73)
    def InstallPKCS7Blob(self, pBlobPKCS7: POINTER(win32more.Windows.Win32.Security.Cryptography.CRYPT_INTEGER_BLOB)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(74)
    def Reset(self) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(75)
    def GetSupportedKeySpec(self, pdwKeySpec: POINTER(Int32)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(76)
    def GetKeyLen(self, fMin: win32more.Windows.Win32.Foundation.BOOL, fExchange: win32more.Windows.Win32.Foundation.BOOL, pdwKeySize: POINTER(Int32)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(77)
    def EnumAlgs(self, dwIndex: Int32, algClass: Int32, pdwAlgID: POINTER(Int32)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(78)
    def GetAlgNameWStr(self, algID: Int32, ppwsz: POINTER(win32more.Windows.Win32.Foundation.PWSTR)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(79)
    def put_ReuseHardwareKeyIfUnableToGenNew(self, fReuseHardwareKeyIfUnableToGenNew: win32more.Windows.Win32.Foundation.BOOL) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(80)
    def get_ReuseHardwareKeyIfUnableToGenNew(self, fReuseHardwareKeyIfUnableToGenNew: POINTER(win32more.Windows.Win32.Foundation.BOOL)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(81)
    def put_HashAlgID(self, hashAlgID: Int32) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(82)
    def get_HashAlgID(self, hashAlgID: POINTER(Int32)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(83)
    def SetHStoreMy(self, hStore: win32more.Windows.Win32.Security.Cryptography.HCERTSTORE) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(84)
    def SetHStoreCA(self, hStore: win32more.Windows.Win32.Security.Cryptography.HCERTSTORE) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(85)
    def SetHStoreROOT(self, hStore: win32more.Windows.Win32.Security.Cryptography.HCERTSTORE) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(86)
    def SetHStoreRequest(self, hStore: win32more.Windows.Win32.Security.Cryptography.HCERTSTORE) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(87)
    def put_LimitExchangeKeyToEncipherment(self, fLimitExchangeKeyToEncipherment: win32more.Windows.Win32.Foundation.BOOL) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(88)
    def get_LimitExchangeKeyToEncipherment(self, fLimitExchangeKeyToEncipherment: POINTER(win32more.Windows.Win32.Foundation.BOOL)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(89)
    def put_EnableSMIMECapabilities(self, fEnableSMIMECapabilities: win32more.Windows.Win32.Foundation.BOOL) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(90)
    def get_EnableSMIMECapabilities(self, fEnableSMIMECapabilities: POINTER(win32more.Windows.Win32.Foundation.BOOL)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
class IEnroll4(ComPtr):
    extends: win32more.Windows.Win32.Security.Cryptography.Certificates.IEnroll2
    _iid_ = Guid('{f8053fe5-78f4-448f-a0db-41d61b73446b}')
    @commethod(91)
    def put_ThumbPrintWStr(self, thumbPrintBlob: win32more.Windows.Win32.Security.Cryptography.CRYPT_INTEGER_BLOB) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(92)
    def get_ThumbPrintWStr(self, thumbPrintBlob: POINTER(win32more.Windows.Win32.Security.Cryptography.CRYPT_INTEGER_BLOB)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(93)
    def SetPrivateKeyArchiveCertificate(self, pPrivateKeyArchiveCert: POINTER(win32more.Windows.Win32.Security.Cryptography.CERT_CONTEXT)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(94)
    def GetPrivateKeyArchiveCertificate(self) -> POINTER(win32more.Windows.Win32.Security.Cryptography.CERT_CONTEXT): ...
    @commethod(95)
    def binaryBlobToString(self, Flags: Int32, pblobBinary: POINTER(win32more.Windows.Win32.Security.Cryptography.CRYPT_INTEGER_BLOB), ppwszString: POINTER(win32more.Windows.Win32.Foundation.PWSTR)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(96)
    def stringToBinaryBlob(self, Flags: Int32, pwszString: win32more.Windows.Win32.Foundation.PWSTR, pblobBinary: POINTER(win32more.Windows.Win32.Security.Cryptography.CRYPT_INTEGER_BLOB), pdwSkip: POINTER(Int32), pdwFlags: POINTER(Int32)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(97)
    def addExtensionToRequestWStr(self, Flags: Int32, pwszName: win32more.Windows.Win32.Foundation.PWSTR, pblobValue: POINTER(win32more.Windows.Win32.Security.Cryptography.CRYPT_INTEGER_BLOB)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(98)
    def addAttributeToRequestWStr(self, Flags: Int32, pwszName: win32more.Windows.Win32.Foundation.PWSTR, pblobValue: POINTER(win32more.Windows.Win32.Security.Cryptography.CRYPT_INTEGER_BLOB)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(99)
    def addNameValuePairToRequestWStr(self, Flags: Int32, pwszName: win32more.Windows.Win32.Foundation.PWSTR, pwszValue: win32more.Windows.Win32.Foundation.PWSTR) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(100)
    def resetExtensions(self) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(101)
    def resetAttributes(self) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(102)
    def createRequestWStr(self, Flags: win32more.Windows.Win32.Security.Cryptography.Certificates.CERT_CREATE_REQUEST_FLAGS, pwszDNName: win32more.Windows.Win32.Foundation.PWSTR, pwszUsage: win32more.Windows.Win32.Foundation.PWSTR, pblobRequest: POINTER(win32more.Windows.Win32.Security.Cryptography.CRYPT_INTEGER_BLOB)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(103)
    def createFileRequestWStr(self, Flags: win32more.Windows.Win32.Security.Cryptography.Certificates.CERT_CREATE_REQUEST_FLAGS, pwszDNName: win32more.Windows.Win32.Foundation.PWSTR, pwszUsage: win32more.Windows.Win32.Foundation.PWSTR, pwszRequestFileName: win32more.Windows.Win32.Foundation.PWSTR) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(104)
    def acceptResponseBlob(self, pblobResponse: POINTER(win32more.Windows.Win32.Security.Cryptography.CRYPT_INTEGER_BLOB)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(105)
    def acceptFileResponseWStr(self, pwszResponseFileName: win32more.Windows.Win32.Foundation.PWSTR) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(106)
    def getCertContextFromResponseBlob(self, pblobResponse: POINTER(win32more.Windows.Win32.Security.Cryptography.CRYPT_INTEGER_BLOB), ppCertContext: POINTER(POINTER(win32more.Windows.Win32.Security.Cryptography.CERT_CONTEXT))) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(107)
    def getCertContextFromFileResponseWStr(self, pwszResponseFileName: win32more.Windows.Win32.Foundation.PWSTR, ppCertContext: POINTER(POINTER(win32more.Windows.Win32.Security.Cryptography.CERT_CONTEXT))) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(108)
    def createPFXWStr(self, pwszPassword: win32more.Windows.Win32.Foundation.PWSTR, pblobPFX: POINTER(win32more.Windows.Win32.Security.Cryptography.CRYPT_INTEGER_BLOB)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(109)
    def createFilePFXWStr(self, pwszPassword: win32more.Windows.Win32.Foundation.PWSTR, pwszPFXFileName: win32more.Windows.Win32.Foundation.PWSTR) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(110)
    def setPendingRequestInfoWStr(self, lRequestID: Int32, pwszCADNS: win32more.Windows.Win32.Foundation.PWSTR, pwszCAName: win32more.Windows.Win32.Foundation.PWSTR, pwszFriendlyName: win32more.Windows.Win32.Foundation.PWSTR) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(111)
    def enumPendingRequestWStr(self, lIndex: Int32, lDesiredProperty: win32more.Windows.Win32.Security.Cryptography.Certificates.PENDING_REQUEST_DESIRED_PROPERTY, ppProperty: VoidPtr) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(112)
    def removePendingRequestWStr(self, thumbPrintBlob: win32more.Windows.Win32.Security.Cryptography.CRYPT_INTEGER_BLOB) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(113)
    def GetKeyLenEx(self, lSizeSpec: win32more.Windows.Win32.Security.Cryptography.Certificates.XEKL_KEYSIZE, lKeySpec: win32more.Windows.Win32.Security.Cryptography.Certificates.XEKL_KEYSPEC, pdwKeySize: POINTER(Int32)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(114)
    def InstallPKCS7BlobEx(self, pBlobPKCS7: POINTER(win32more.Windows.Win32.Security.Cryptography.CRYPT_INTEGER_BLOB), plCertInstalled: POINTER(Int32)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(115)
    def AddCertTypeToRequestWStrEx(self, lType: win32more.Windows.Win32.Security.Cryptography.Certificates.ADDED_CERT_TYPE, pwszOIDOrName: win32more.Windows.Win32.Foundation.PWSTR, lMajorVersion: Int32, fMinorVersion: win32more.Windows.Win32.Foundation.BOOL, lMinorVersion: Int32) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(116)
    def getProviderTypeWStr(self, pwszProvName: win32more.Windows.Win32.Foundation.PWSTR, plProvType: POINTER(Int32)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(117)
    def addBlobPropertyToCertificateWStr(self, lPropertyId: Int32, lReserved: Int32, pBlobProperty: POINTER(win32more.Windows.Win32.Security.Cryptography.CRYPT_INTEGER_BLOB)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(118)
    def SetSignerCertificate(self, pSignerCert: POINTER(win32more.Windows.Win32.Security.Cryptography.CERT_CONTEXT)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(119)
    def put_ClientId(self, lClientId: Int32) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(120)
    def get_ClientId(self, plClientId: POINTER(Int32)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(121)
    def put_IncludeSubjectKeyID(self, fInclude: win32more.Windows.Win32.Foundation.BOOL) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(122)
    def get_IncludeSubjectKeyID(self, pfInclude: POINTER(win32more.Windows.Win32.Foundation.BOOL)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
class IEnumCERTVIEWATTRIBUTE(ComPtr):
    extends: win32more.Windows.Win32.System.Com.IDispatch
    _iid_ = Guid('{e77db656-7653-11d1-9bde-00c04fb683fa}')
    @commethod(7)
    def Next(self, pIndex: POINTER(Int32)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(8)
    def GetName(self, pstrOut: POINTER(win32more.Windows.Win32.Foundation.BSTR)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(9)
    def GetValue(self, pstrOut: POINTER(win32more.Windows.Win32.Foundation.BSTR)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(10)
    def Skip(self, celt: Int32) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(11)
    def Reset(self) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(12)
    def Clone(self, ppenum: POINTER(win32more.Windows.Win32.Security.Cryptography.Certificates.IEnumCERTVIEWATTRIBUTE)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
class IEnumCERTVIEWCOLUMN(ComPtr):
    extends: win32more.Windows.Win32.System.Com.IDispatch
    _iid_ = Guid('{9c735be2-57a5-11d1-9bdb-00c04fb683fa}')
    @commethod(7)
    def Next(self, pIndex: POINTER(Int32)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(8)
    def GetName(self, pstrOut: POINTER(win32more.Windows.Win32.Foundation.BSTR)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(9)
    def GetDisplayName(self, pstrOut: POINTER(win32more.Windows.Win32.Foundation.BSTR)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(10)
    def GetType(self, pType: POINTER(Int32)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(11)
    def IsIndexed(self, pIndexed: POINTER(Int32)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(12)
    def GetMaxLength(self, pMaxLength: POINTER(Int32)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(13)
    def GetValue(self, Flags: win32more.Windows.Win32.Security.Cryptography.Certificates.ENUM_CERT_COLUMN_VALUE_FLAGS, pvarValue: POINTER(win32more.Windows.Win32.System.Variant.VARIANT)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(14)
    def Skip(self, celt: Int32) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(15)
    def Reset(self) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(16)
    def Clone(self, ppenum: POINTER(win32more.Windows.Win32.Security.Cryptography.Certificates.IEnumCERTVIEWCOLUMN)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
class IEnumCERTVIEWEXTENSION(ComPtr):
    extends: win32more.Windows.Win32.System.Com.IDispatch
    _iid_ = Guid('{e7dd1466-7653-11d1-9bde-00c04fb683fa}')
    @commethod(7)
    def Next(self, pIndex: POINTER(Int32)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(8)
    def GetName(self, pstrOut: POINTER(win32more.Windows.Win32.Foundation.BSTR)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(9)
    def GetFlags(self, pFlags: POINTER(Int32)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(10)
    def GetValue(self, Type: win32more.Windows.Win32.Security.Cryptography.Certificates.CERT_PROPERTY_TYPE, Flags: win32more.Windows.Win32.Security.Cryptography.Certificates.ENUM_CERT_COLUMN_VALUE_FLAGS, pvarValue: POINTER(win32more.Windows.Win32.System.Variant.VARIANT)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(11)
    def Skip(self, celt: Int32) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(12)
    def Reset(self) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(13)
    def Clone(self, ppenum: POINTER(win32more.Windows.Win32.Security.Cryptography.Certificates.IEnumCERTVIEWEXTENSION)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
class IEnumCERTVIEWROW(ComPtr):
    extends: win32more.Windows.Win32.System.Com.IDispatch
    _iid_ = Guid('{d1157f4c-5af2-11d1-9bdc-00c04fb683fa}')
    @commethod(7)
    def Next(self, pIndex: POINTER(Int32)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(8)
    def EnumCertViewColumn(self, ppenum: POINTER(win32more.Windows.Win32.Security.Cryptography.Certificates.IEnumCERTVIEWCOLUMN)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(9)
    def EnumCertViewAttribute(self, Flags: Int32, ppenum: POINTER(win32more.Windows.Win32.Security.Cryptography.Certificates.IEnumCERTVIEWATTRIBUTE)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(10)
    def EnumCertViewExtension(self, Flags: Int32, ppenum: POINTER(win32more.Windows.Win32.Security.Cryptography.Certificates.IEnumCERTVIEWEXTENSION)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(11)
    def Skip(self, celt: Int32) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(12)
    def Reset(self) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(13)
    def Clone(self, ppenum: POINTER(win32more.Windows.Win32.Security.Cryptography.Certificates.IEnumCERTVIEWROW)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(14)
    def GetMaxIndex(self, pIndex: POINTER(Int32)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
class INDESPolicy(ComPtr):
    extends: win32more.Windows.Win32.System.Com.IUnknown
    _iid_ = Guid('{13ca515d-431d-46cc-8c2e-1da269bbd625}')
    @commethod(3)
    def Initialize(self) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(4)
    def Uninitialize(self) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(5)
    def GenerateChallenge(self, pwszTemplate: win32more.Windows.Win32.Foundation.PWSTR, pwszParams: win32more.Windows.Win32.Foundation.PWSTR, ppwszResponse: POINTER(win32more.Windows.Win32.Foundation.PWSTR)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(6)
    def VerifyRequest(self, pctbRequest: POINTER(win32more.Windows.Win32.Security.Cryptography.Certificates.CERTTRANSBLOB), pctbSigningCertEncoded: POINTER(win32more.Windows.Win32.Security.Cryptography.Certificates.CERTTRANSBLOB), pwszTemplate: win32more.Windows.Win32.Foundation.PWSTR, pwszTransactionId: win32more.Windows.Win32.Foundation.PWSTR, pfVerified: POINTER(win32more.Windows.Win32.Foundation.BOOL)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(7)
    def Notify(self, pwszChallenge: win32more.Windows.Win32.Foundation.PWSTR, pwszTransactionId: win32more.Windows.Win32.Foundation.PWSTR, disposition: win32more.Windows.Win32.Security.Cryptography.Certificates.X509SCEPDisposition, lastHResult: Int32, pctbIssuedCertEncoded: POINTER(win32more.Windows.Win32.Security.Cryptography.Certificates.CERTTRANSBLOB)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
class IOCSPAdmin(ComPtr):
    extends: win32more.Windows.Win32.System.Com.IDispatch
    _iid_ = Guid('{322e830d-67db-4fe9-9577-4596d9f09294}')
    @commethod(7)
    def get_OCSPServiceProperties(self, ppVal: POINTER(win32more.Windows.Win32.Security.Cryptography.Certificates.IOCSPPropertyCollection)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(8)
    def get_OCSPCAConfigurationCollection(self, pVal: POINTER(win32more.Windows.Win32.Security.Cryptography.Certificates.IOCSPCAConfigurationCollection)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(9)
    def GetConfiguration(self, bstrServerName: win32more.Windows.Win32.Foundation.BSTR, bForce: win32more.Windows.Win32.Foundation.VARIANT_BOOL) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(10)
    def SetConfiguration(self, bstrServerName: win32more.Windows.Win32.Foundation.BSTR, bForce: win32more.Windows.Win32.Foundation.VARIANT_BOOL) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(11)
    def GetMyRoles(self, bstrServerName: win32more.Windows.Win32.Foundation.BSTR, pRoles: POINTER(Int32)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(12)
    def Ping(self, bstrServerName: win32more.Windows.Win32.Foundation.BSTR) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(13)
    def SetSecurity(self, bstrServerName: win32more.Windows.Win32.Foundation.BSTR, bstrVal: win32more.Windows.Win32.Foundation.BSTR) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(14)
    def GetSecurity(self, bstrServerName: win32more.Windows.Win32.Foundation.BSTR, pVal: POINTER(win32more.Windows.Win32.Foundation.BSTR)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(15)
    def GetSigningCertificates(self, bstrServerName: win32more.Windows.Win32.Foundation.BSTR, pCACertVar: POINTER(win32more.Windows.Win32.System.Variant.VARIANT), pVal: POINTER(win32more.Windows.Win32.System.Variant.VARIANT)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(16)
    def GetHashAlgorithms(self, bstrServerName: win32more.Windows.Win32.Foundation.BSTR, bstrCAId: win32more.Windows.Win32.Foundation.BSTR, pVal: POINTER(win32more.Windows.Win32.System.Variant.VARIANT)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
class IOCSPCAConfiguration(ComPtr):
    extends: win32more.Windows.Win32.System.Com.IDispatch
    _iid_ = Guid('{aec92b40-3d46-433f-87d1-b84d5c1e790d}')
    @commethod(7)
    def get_Identifier(self, pVal: POINTER(win32more.Windows.Win32.Foundation.BSTR)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(8)
    def get_CACertificate(self, pVal: POINTER(win32more.Windows.Win32.System.Variant.VARIANT)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(9)
    def get_HashAlgorithm(self, pVal: POINTER(win32more.Windows.Win32.Foundation.BSTR)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(10)
    def put_HashAlgorithm(self, newVal: win32more.Windows.Win32.Foundation.BSTR) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(11)
    def get_SigningFlags(self, pVal: POINTER(UInt32)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(12)
    def put_SigningFlags(self, newVal: UInt32) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(13)
    def get_SigningCertificate(self, pVal: POINTER(win32more.Windows.Win32.System.Variant.VARIANT)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(14)
    def put_SigningCertificate(self, newVal: win32more.Windows.Win32.System.Variant.VARIANT) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(15)
    def get_ReminderDuration(self, pVal: POINTER(UInt32)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(16)
    def put_ReminderDuration(self, newVal: UInt32) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(17)
    def get_ErrorCode(self, pVal: POINTER(UInt32)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(18)
    def get_CSPName(self, pVal: POINTER(win32more.Windows.Win32.Foundation.BSTR)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(19)
    def get_KeySpec(self, pVal: POINTER(UInt32)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(20)
    def get_ProviderCLSID(self, pVal: POINTER(win32more.Windows.Win32.Foundation.BSTR)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(21)
    def put_ProviderCLSID(self, newVal: win32more.Windows.Win32.Foundation.BSTR) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(22)
    def get_ProviderProperties(self, pVal: POINTER(win32more.Windows.Win32.System.Variant.VARIANT)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(23)
    def put_ProviderProperties(self, newVal: win32more.Windows.Win32.System.Variant.VARIANT) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(24)
    def get_Modified(self, pVal: POINTER(win32more.Windows.Win32.Foundation.VARIANT_BOOL)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(25)
    def get_LocalRevocationInformation(self, pVal: POINTER(win32more.Windows.Win32.System.Variant.VARIANT)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(26)
    def put_LocalRevocationInformation(self, newVal: win32more.Windows.Win32.System.Variant.VARIANT) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(27)
    def get_SigningCertificateTemplate(self, pVal: POINTER(win32more.Windows.Win32.Foundation.BSTR)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(28)
    def put_SigningCertificateTemplate(self, newVal: win32more.Windows.Win32.Foundation.BSTR) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(29)
    def get_CAConfig(self, pVal: POINTER(win32more.Windows.Win32.Foundation.BSTR)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(30)
    def put_CAConfig(self, newVal: win32more.Windows.Win32.Foundation.BSTR) -> win32more.Windows.Win32.Foundation.HRESULT: ...
class IOCSPCAConfigurationCollection(ComPtr):
    extends: win32more.Windows.Win32.System.Com.IDispatch
    _iid_ = Guid('{2bebea0b-5ece-4f28-a91c-86b4bb20f0d3}')
    @commethod(7)
    def get__NewEnum(self, pVal: POINTER(win32more.Windows.Win32.System.Com.IUnknown)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(8)
    def get_Item(self, Index: Int32, pVal: POINTER(win32more.Windows.Win32.System.Variant.VARIANT)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(9)
    def get_Count(self, pVal: POINTER(Int32)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(10)
    def get_ItemByName(self, bstrIdentifier: win32more.Windows.Win32.Foundation.BSTR, pVal: POINTER(win32more.Windows.Win32.System.Variant.VARIANT)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(11)
    def CreateCAConfiguration(self, bstrIdentifier: win32more.Windows.Win32.Foundation.BSTR, varCACert: win32more.Windows.Win32.System.Variant.VARIANT, ppVal: POINTER(win32more.Windows.Win32.Security.Cryptography.Certificates.IOCSPCAConfiguration)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(12)
    def DeleteCAConfiguration(self, bstrIdentifier: win32more.Windows.Win32.Foundation.BSTR) -> win32more.Windows.Win32.Foundation.HRESULT: ...
class IOCSPProperty(ComPtr):
    extends: win32more.Windows.Win32.System.Com.IDispatch
    _iid_ = Guid('{66fb7839-5f04-4c25-ad18-9ff1a8376ee0}')
    @commethod(7)
    def get_Name(self, pVal: POINTER(win32more.Windows.Win32.Foundation.BSTR)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(8)
    def get_Value(self, pVal: POINTER(win32more.Windows.Win32.System.Variant.VARIANT)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(9)
    def put_Value(self, newVal: win32more.Windows.Win32.System.Variant.VARIANT) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(10)
    def get_Modified(self, pVal: POINTER(win32more.Windows.Win32.Foundation.VARIANT_BOOL)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
class IOCSPPropertyCollection(ComPtr):
    extends: win32more.Windows.Win32.System.Com.IDispatch
    _iid_ = Guid('{2597c18d-54e6-4b74-9fa9-a6bfda99cbbe}')
    @commethod(7)
    def get__NewEnum(self, ppVal: POINTER(win32more.Windows.Win32.System.Com.IUnknown)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(8)
    def get_Item(self, Index: Int32, pVal: POINTER(win32more.Windows.Win32.System.Variant.VARIANT)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(9)
    def get_Count(self, pVal: POINTER(Int32)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(10)
    def get_ItemByName(self, bstrPropName: win32more.Windows.Win32.Foundation.BSTR, pVal: POINTER(win32more.Windows.Win32.System.Variant.VARIANT)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(11)
    def CreateProperty(self, bstrPropName: win32more.Windows.Win32.Foundation.BSTR, pVarPropValue: POINTER(win32more.Windows.Win32.System.Variant.VARIANT), ppVal: POINTER(win32more.Windows.Win32.Security.Cryptography.Certificates.IOCSPProperty)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(12)
    def DeleteProperty(self, bstrPropName: win32more.Windows.Win32.Foundation.BSTR) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(13)
    def InitializeFromProperties(self, pVarProperties: POINTER(win32more.Windows.Win32.System.Variant.VARIANT)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(14)
    def GetAllProperties(self, pVarProperties: POINTER(win32more.Windows.Win32.System.Variant.VARIANT)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
class IObjectId(ComPtr):
    extends: win32more.Windows.Win32.System.Com.IDispatch
    _iid_ = Guid('{728ab300-217d-11da-b2a4-000e7bbb2b09}')
    @commethod(7)
    def InitializeFromName(self, Name: win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(8)
    def InitializeFromValue(self, strValue: win32more.Windows.Win32.Foundation.BSTR) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(9)
    def InitializeFromAlgorithmName(self, GroupId: win32more.Windows.Win32.Security.Cryptography.Certificates.ObjectIdGroupId, KeyFlags: win32more.Windows.Win32.Security.Cryptography.Certificates.ObjectIdPublicKeyFlags, AlgFlags: win32more.Windows.Win32.Security.Cryptography.Certificates.AlgorithmFlags, strAlgorithmName: win32more.Windows.Win32.Foundation.BSTR) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(10)
    def get_Name(self, pValue: POINTER(win32more.Windows.Win32.Security.Cryptography.Certificates.CERTENROLL_OBJECTID)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(11)
    def get_FriendlyName(self, pValue: POINTER(win32more.Windows.Win32.Foundation.BSTR)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(12)
    def put_FriendlyName(self, Value: win32more.Windows.Win32.Foundation.BSTR) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(13)
    def get_Value(self, pValue: POINTER(win32more.Windows.Win32.Foundation.BSTR)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(14)
    def GetAlgorithmName(self, GroupId: win32more.Windows.Win32.Security.Cryptography.Certificates.ObjectIdGroupId, KeyFlags: win32more.Windows.Win32.Security.Cryptography.Certificates.ObjectIdPublicKeyFlags, pstrAlgorithmName: POINTER(win32more.Windows.Win32.Foundation.BSTR)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
class IObjectIds(ComPtr):
    extends: win32more.Windows.Win32.System.Com.IDispatch
    _iid_ = Guid('{728ab301-217d-11da-b2a4-000e7bbb2b09}')
    @commethod(7)
    def get_ItemByIndex(self, Index: Int32, pVal: POINTER(win32more.Windows.Win32.Security.Cryptography.Certificates.IObjectId)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(8)
    def get_Count(self, pVal: POINTER(Int32)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(9)
    def get__NewEnum(self, pVal: POINTER(win32more.Windows.Win32.System.Com.IUnknown)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(10)
    def Add(self, pVal: win32more.Windows.Win32.Security.Cryptography.Certificates.IObjectId) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(11)
    def Remove(self, Index: Int32) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(12)
    def Clear(self) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(13)
    def AddRange(self, pValue: win32more.Windows.Win32.Security.Cryptography.Certificates.IObjectIds) -> win32more.Windows.Win32.Foundation.HRESULT: ...
class IPolicyQualifier(ComPtr):
    extends: win32more.Windows.Win32.System.Com.IDispatch
    _iid_ = Guid('{728ab31c-217d-11da-b2a4-000e7bbb2b09}')
    @commethod(7)
    def InitializeEncode(self, strQualifier: win32more.Windows.Win32.Foundation.BSTR, Type: win32more.Windows.Win32.Security.Cryptography.Certificates.PolicyQualifierType) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(8)
    def get_ObjectId(self, ppValue: POINTER(win32more.Windows.Win32.Security.Cryptography.Certificates.IObjectId)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(9)
    def get_Qualifier(self, pValue: POINTER(win32more.Windows.Win32.Foundation.BSTR)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(10)
    def get_Type(self, pValue: POINTER(win32more.Windows.Win32.Security.Cryptography.Certificates.PolicyQualifierType)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(11)
    def get_RawData(self, Encoding: win32more.Windows.Win32.Security.Cryptography.Certificates.EncodingType, pValue: POINTER(win32more.Windows.Win32.Foundation.BSTR)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
class IPolicyQualifiers(ComPtr):
    extends: win32more.Windows.Win32.System.Com.IDispatch
    _iid_ = Guid('{728ab31d-217d-11da-b2a4-000e7bbb2b09}')
    @commethod(7)
    def get_ItemByIndex(self, Index: Int32, pVal: POINTER(win32more.Windows.Win32.Security.Cryptography.Certificates.IPolicyQualifier)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(8)
    def get_Count(self, pVal: POINTER(Int32)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(9)
    def get__NewEnum(self, pVal: POINTER(win32more.Windows.Win32.System.Com.IUnknown)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(10)
    def Add(self, pVal: win32more.Windows.Win32.Security.Cryptography.Certificates.IPolicyQualifier) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(11)
    def Remove(self, Index: Int32) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(12)
    def Clear(self) -> win32more.Windows.Win32.Foundation.HRESULT: ...
class ISignerCertificate(ComPtr):
    extends: win32more.Windows.Win32.System.Com.IDispatch
    _iid_ = Guid('{728ab33d-217d-11da-b2a4-000e7bbb2b09}')
    @commethod(7)
    def Initialize(self, MachineContext: win32more.Windows.Win32.Foundation.VARIANT_BOOL, VerifyType: win32more.Windows.Win32.Security.Cryptography.Certificates.X509PrivateKeyVerify, Encoding: win32more.Windows.Win32.Security.Cryptography.Certificates.EncodingType, strCertificate: win32more.Windows.Win32.Foundation.BSTR) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(8)
    def get_Certificate(self, Encoding: win32more.Windows.Win32.Security.Cryptography.Certificates.EncodingType, pValue: POINTER(win32more.Windows.Win32.Foundation.BSTR)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(9)
    def get_PrivateKey(self, ppValue: POINTER(win32more.Windows.Win32.Security.Cryptography.Certificates.IX509PrivateKey)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(10)
    def get_Silent(self, pValue: POINTER(win32more.Windows.Win32.Foundation.VARIANT_BOOL)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(11)
    def put_Silent(self, Value: win32more.Windows.Win32.Foundation.VARIANT_BOOL) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(12)
    def get_ParentWindow(self, pValue: POINTER(Int32)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(13)
    def put_ParentWindow(self, Value: Int32) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(14)
    def get_UIContextMessage(self, pValue: POINTER(win32more.Windows.Win32.Foundation.BSTR)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(15)
    def put_UIContextMessage(self, Value: win32more.Windows.Win32.Foundation.BSTR) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(16)
    def put_Pin(self, Value: win32more.Windows.Win32.Foundation.BSTR) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(17)
    def get_SignatureInformation(self, ppValue: POINTER(win32more.Windows.Win32.Security.Cryptography.Certificates.IX509SignatureInformation)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
class ISignerCertificates(ComPtr):
    extends: win32more.Windows.Win32.System.Com.IDispatch
    _iid_ = Guid('{728ab33e-217d-11da-b2a4-000e7bbb2b09}')
    @commethod(7)
    def get_ItemByIndex(self, Index: Int32, pVal: POINTER(win32more.Windows.Win32.Security.Cryptography.Certificates.ISignerCertificate)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(8)
    def get_Count(self, pVal: POINTER(Int32)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(9)
    def get__NewEnum(self, pVal: POINTER(win32more.Windows.Win32.System.Com.IUnknown)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(10)
    def Add(self, pVal: win32more.Windows.Win32.Security.Cryptography.Certificates.ISignerCertificate) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(11)
    def Remove(self, Index: Int32) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(12)
    def Clear(self) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(13)
    def Find(self, pSignerCert: win32more.Windows.Win32.Security.Cryptography.Certificates.ISignerCertificate, piSignerCert: POINTER(Int32)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
class ISmimeCapabilities(ComPtr):
    extends: win32more.Windows.Win32.System.Com.IDispatch
    _iid_ = Guid('{728ab31a-217d-11da-b2a4-000e7bbb2b09}')
    @commethod(7)
    def get_ItemByIndex(self, Index: Int32, pVal: POINTER(win32more.Windows.Win32.Security.Cryptography.Certificates.ISmimeCapability)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(8)
    def get_Count(self, pVal: POINTER(Int32)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(9)
    def get__NewEnum(self, pVal: POINTER(win32more.Windows.Win32.System.Com.IUnknown)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(10)
    def Add(self, pVal: win32more.Windows.Win32.Security.Cryptography.Certificates.ISmimeCapability) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(11)
    def Remove(self, Index: Int32) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(12)
    def Clear(self) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(13)
    def AddFromCsp(self, pValue: win32more.Windows.Win32.Security.Cryptography.Certificates.ICspInformation) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(14)
    def AddAvailableSmimeCapabilities(self, MachineContext: win32more.Windows.Win32.Foundation.VARIANT_BOOL) -> win32more.Windows.Win32.Foundation.HRESULT: ...
class ISmimeCapability(ComPtr):
    extends: win32more.Windows.Win32.System.Com.IDispatch
    _iid_ = Guid('{728ab319-217d-11da-b2a4-000e7bbb2b09}')
    @commethod(7)
    def Initialize(self, pObjectId: win32more.Windows.Win32.Security.Cryptography.Certificates.IObjectId, BitCount: Int32) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(8)
    def get_ObjectId(self, ppValue: POINTER(win32more.Windows.Win32.Security.Cryptography.Certificates.IObjectId)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(9)
    def get_BitCount(self, pValue: POINTER(Int32)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
class IX500DistinguishedName(ComPtr):
    extends: win32more.Windows.Win32.System.Com.IDispatch
    _iid_ = Guid('{728ab303-217d-11da-b2a4-000e7bbb2b09}')
    @commethod(7)
    def Decode(self, strEncodedName: win32more.Windows.Win32.Foundation.BSTR, Encoding: win32more.Windows.Win32.Security.Cryptography.Certificates.EncodingType, NameFlags: win32more.Windows.Win32.Security.Cryptography.Certificates.X500NameFlags) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(8)
    def Encode(self, strName: win32more.Windows.Win32.Foundation.BSTR, NameFlags: win32more.Windows.Win32.Security.Cryptography.Certificates.X500NameFlags) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(9)
    def get_Name(self, pValue: POINTER(win32more.Windows.Win32.Foundation.BSTR)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(10)
    def get_EncodedName(self, Encoding: win32more.Windows.Win32.Security.Cryptography.Certificates.EncodingType, pValue: POINTER(win32more.Windows.Win32.Foundation.BSTR)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
class IX509Attribute(ComPtr):
    extends: win32more.Windows.Win32.System.Com.IDispatch
    _iid_ = Guid('{728ab322-217d-11da-b2a4-000e7bbb2b09}')
    @commethod(7)
    def Initialize(self, pObjectId: win32more.Windows.Win32.Security.Cryptography.Certificates.IObjectId, Encoding: win32more.Windows.Win32.Security.Cryptography.Certificates.EncodingType, strEncodedData: win32more.Windows.Win32.Foundation.BSTR) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(8)
    def get_ObjectId(self, ppValue: POINTER(win32more.Windows.Win32.Security.Cryptography.Certificates.IObjectId)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(9)
    def get_RawData(self, Encoding: win32more.Windows.Win32.Security.Cryptography.Certificates.EncodingType, pValue: POINTER(win32more.Windows.Win32.Foundation.BSTR)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
class IX509AttributeArchiveKey(ComPtr):
    extends: win32more.Windows.Win32.Security.Cryptography.Certificates.IX509Attribute
    _iid_ = Guid('{728ab327-217d-11da-b2a4-000e7bbb2b09}')
    @commethod(10)
    def InitializeEncode(self, pKey: win32more.Windows.Win32.Security.Cryptography.Certificates.IX509PrivateKey, Encoding: win32more.Windows.Win32.Security.Cryptography.Certificates.EncodingType, strCAXCert: win32more.Windows.Win32.Foundation.BSTR, pAlgorithm: win32more.Windows.Win32.Security.Cryptography.Certificates.IObjectId, EncryptionStrength: Int32) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(11)
    def InitializeDecode(self, Encoding: win32more.Windows.Win32.Security.Cryptography.Certificates.EncodingType, strEncodedData: win32more.Windows.Win32.Foundation.BSTR) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(12)
    def get_EncryptedKeyBlob(self, Encoding: win32more.Windows.Win32.Security.Cryptography.Certificates.EncodingType, pValue: POINTER(win32more.Windows.Win32.Foundation.BSTR)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(13)
    def get_EncryptionAlgorithm(self, ppValue: POINTER(win32more.Windows.Win32.Security.Cryptography.Certificates.IObjectId)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(14)
    def get_EncryptionStrength(self, pValue: POINTER(Int32)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
class IX509AttributeArchiveKeyHash(ComPtr):
    extends: win32more.Windows.Win32.Security.Cryptography.Certificates.IX509Attribute
    _iid_ = Guid('{728ab328-217d-11da-b2a4-000e7bbb2b09}')
    @commethod(10)
    def InitializeEncodeFromEncryptedKeyBlob(self, Encoding: win32more.Windows.Win32.Security.Cryptography.Certificates.EncodingType, strEncryptedKeyBlob: win32more.Windows.Win32.Foundation.BSTR) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(11)
    def InitializeDecode(self, Encoding: win32more.Windows.Win32.Security.Cryptography.Certificates.EncodingType, strEncodedData: win32more.Windows.Win32.Foundation.BSTR) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(12)
    def get_EncryptedKeyHashBlob(self, Encoding: win32more.Windows.Win32.Security.Cryptography.Certificates.EncodingType, pValue: POINTER(win32more.Windows.Win32.Foundation.BSTR)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
class IX509AttributeClientId(ComPtr):
    extends: win32more.Windows.Win32.Security.Cryptography.Certificates.IX509Attribute
    _iid_ = Guid('{728ab325-217d-11da-b2a4-000e7bbb2b09}')
    @commethod(10)
    def InitializeEncode(self, ClientId: win32more.Windows.Win32.Security.Cryptography.Certificates.RequestClientInfoClientId, strMachineDnsName: win32more.Windows.Win32.Foundation.BSTR, strUserSamName: win32more.Windows.Win32.Foundation.BSTR, strProcessName: win32more.Windows.Win32.Foundation.BSTR) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(11)
    def InitializeDecode(self, Encoding: win32more.Windows.Win32.Security.Cryptography.Certificates.EncodingType, strEncodedData: win32more.Windows.Win32.Foundation.BSTR) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(12)
    def get_ClientId(self, pValue: POINTER(win32more.Windows.Win32.Security.Cryptography.Certificates.RequestClientInfoClientId)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(13)
    def get_MachineDnsName(self, pValue: POINTER(win32more.Windows.Win32.Foundation.BSTR)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(14)
    def get_UserSamName(self, pValue: POINTER(win32more.Windows.Win32.Foundation.BSTR)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(15)
    def get_ProcessName(self, pValue: POINTER(win32more.Windows.Win32.Foundation.BSTR)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
class IX509AttributeCspProvider(ComPtr):
    extends: win32more.Windows.Win32.Security.Cryptography.Certificates.IX509Attribute
    _iid_ = Guid('{728ab32b-217d-11da-b2a4-000e7bbb2b09}')
    @commethod(10)
    def InitializeEncode(self, KeySpec: win32more.Windows.Win32.Security.Cryptography.Certificates.X509KeySpec, strProviderName: win32more.Windows.Win32.Foundation.BSTR, Encoding: win32more.Windows.Win32.Security.Cryptography.Certificates.EncodingType, strSignature: win32more.Windows.Win32.Foundation.BSTR) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(11)
    def InitializeDecode(self, Encoding: win32more.Windows.Win32.Security.Cryptography.Certificates.EncodingType, strEncodedData: win32more.Windows.Win32.Foundation.BSTR) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(12)
    def get_KeySpec(self, pValue: POINTER(win32more.Windows.Win32.Security.Cryptography.Certificates.X509KeySpec)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(13)
    def get_ProviderName(self, pValue: POINTER(win32more.Windows.Win32.Foundation.BSTR)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(14)
    def get_Signature(self, Encoding: win32more.Windows.Win32.Security.Cryptography.Certificates.EncodingType, pValue: POINTER(win32more.Windows.Win32.Foundation.BSTR)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
class IX509AttributeExtensions(ComPtr):
    extends: win32more.Windows.Win32.Security.Cryptography.Certificates.IX509Attribute
    _iid_ = Guid('{728ab324-217d-11da-b2a4-000e7bbb2b09}')
    @commethod(10)
    def InitializeEncode(self, pExtensions: win32more.Windows.Win32.Security.Cryptography.Certificates.IX509Extensions) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(11)
    def InitializeDecode(self, Encoding: win32more.Windows.Win32.Security.Cryptography.Certificates.EncodingType, strEncodedData: win32more.Windows.Win32.Foundation.BSTR) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(12)
    def get_X509Extensions(self, ppValue: POINTER(win32more.Windows.Win32.Security.Cryptography.Certificates.IX509Extensions)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
class IX509AttributeOSVersion(ComPtr):
    extends: win32more.Windows.Win32.Security.Cryptography.Certificates.IX509Attribute
    _iid_ = Guid('{728ab32a-217d-11da-b2a4-000e7bbb2b09}')
    @commethod(10)
    def InitializeEncode(self, strOSVersion: win32more.Windows.Win32.Foundation.BSTR) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(11)
    def InitializeDecode(self, Encoding: win32more.Windows.Win32.Security.Cryptography.Certificates.EncodingType, strEncodedData: win32more.Windows.Win32.Foundation.BSTR) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(12)
    def get_OSVersion(self, pValue: POINTER(win32more.Windows.Win32.Foundation.BSTR)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
class IX509AttributeRenewalCertificate(ComPtr):
    extends: win32more.Windows.Win32.Security.Cryptography.Certificates.IX509Attribute
    _iid_ = Guid('{728ab326-217d-11da-b2a4-000e7bbb2b09}')
    @commethod(10)
    def InitializeEncode(self, Encoding: win32more.Windows.Win32.Security.Cryptography.Certificates.EncodingType, strCert: win32more.Windows.Win32.Foundation.BSTR) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(11)
    def InitializeDecode(self, Encoding: win32more.Windows.Win32.Security.Cryptography.Certificates.EncodingType, strEncodedData: win32more.Windows.Win32.Foundation.BSTR) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(12)
    def get_RenewalCertificate(self, Encoding: win32more.Windows.Win32.Security.Cryptography.Certificates.EncodingType, pValue: POINTER(win32more.Windows.Win32.Foundation.BSTR)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
class IX509Attributes(ComPtr):
    extends: win32more.Windows.Win32.System.Com.IDispatch
    _iid_ = Guid('{728ab323-217d-11da-b2a4-000e7bbb2b09}')
    @commethod(7)
    def get_ItemByIndex(self, Index: Int32, pVal: POINTER(win32more.Windows.Win32.Security.Cryptography.Certificates.IX509Attribute)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(8)
    def get_Count(self, pVal: POINTER(Int32)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(9)
    def get__NewEnum(self, pVal: POINTER(win32more.Windows.Win32.System.Com.IUnknown)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(10)
    def Add(self, pVal: win32more.Windows.Win32.Security.Cryptography.Certificates.IX509Attribute) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(11)
    def Remove(self, Index: Int32) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(12)
    def Clear(self) -> win32more.Windows.Win32.Foundation.HRESULT: ...
class IX509CertificateRequest(ComPtr):
    extends: win32more.Windows.Win32.System.Com.IDispatch
    _iid_ = Guid('{728ab341-217d-11da-b2a4-000e7bbb2b09}')
    @commethod(7)
    def Initialize(self, Context: win32more.Windows.Win32.Security.Cryptography.Certificates.X509CertificateEnrollmentContext) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(8)
    def Encode(self) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(9)
    def ResetForEncode(self) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(10)
    def GetInnerRequest(self, Level: win32more.Windows.Win32.Security.Cryptography.Certificates.InnerRequestLevel, ppValue: POINTER(win32more.Windows.Win32.Security.Cryptography.Certificates.IX509CertificateRequest)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(11)
    def get_Type(self, pValue: POINTER(win32more.Windows.Win32.Security.Cryptography.Certificates.X509RequestType)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(12)
    def get_EnrollmentContext(self, pValue: POINTER(win32more.Windows.Win32.Security.Cryptography.Certificates.X509CertificateEnrollmentContext)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(13)
    def get_Silent(self, pValue: POINTER(win32more.Windows.Win32.Foundation.VARIANT_BOOL)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(14)
    def put_Silent(self, Value: win32more.Windows.Win32.Foundation.VARIANT_BOOL) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(15)
    def get_ParentWindow(self, pValue: POINTER(Int32)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(16)
    def put_ParentWindow(self, Value: Int32) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(17)
    def get_UIContextMessage(self, pValue: POINTER(win32more.Windows.Win32.Foundation.BSTR)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(18)
    def put_UIContextMessage(self, Value: win32more.Windows.Win32.Foundation.BSTR) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(19)
    def get_SuppressDefaults(self, pValue: POINTER(win32more.Windows.Win32.Foundation.VARIANT_BOOL)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(20)
    def put_SuppressDefaults(self, Value: win32more.Windows.Win32.Foundation.VARIANT_BOOL) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(21)
    def get_RenewalCertificate(self, Encoding: win32more.Windows.Win32.Security.Cryptography.Certificates.EncodingType, pValue: POINTER(win32more.Windows.Win32.Foundation.BSTR)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(22)
    def put_RenewalCertificate(self, Encoding: win32more.Windows.Win32.Security.Cryptography.Certificates.EncodingType, Value: win32more.Windows.Win32.Foundation.BSTR) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(23)
    def get_ClientId(self, pValue: POINTER(win32more.Windows.Win32.Security.Cryptography.Certificates.RequestClientInfoClientId)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(24)
    def put_ClientId(self, Value: win32more.Windows.Win32.Security.Cryptography.Certificates.RequestClientInfoClientId) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(25)
    def get_CspInformations(self, ppValue: POINTER(win32more.Windows.Win32.Security.Cryptography.Certificates.ICspInformations)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(26)
    def put_CspInformations(self, pValue: win32more.Windows.Win32.Security.Cryptography.Certificates.ICspInformations) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(27)
    def get_HashAlgorithm(self, ppValue: POINTER(win32more.Windows.Win32.Security.Cryptography.Certificates.IObjectId)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(28)
    def put_HashAlgorithm(self, pValue: win32more.Windows.Win32.Security.Cryptography.Certificates.IObjectId) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(29)
    def get_AlternateSignatureAlgorithm(self, pValue: POINTER(win32more.Windows.Win32.Foundation.VARIANT_BOOL)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(30)
    def put_AlternateSignatureAlgorithm(self, Value: win32more.Windows.Win32.Foundation.VARIANT_BOOL) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(31)
    def get_RawData(self, Encoding: win32more.Windows.Win32.Security.Cryptography.Certificates.EncodingType, pValue: POINTER(win32more.Windows.Win32.Foundation.BSTR)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
class IX509CertificateRequestCertificate(ComPtr):
    extends: win32more.Windows.Win32.Security.Cryptography.Certificates.IX509CertificateRequestPkcs10
    _iid_ = Guid('{728ab343-217d-11da-b2a4-000e7bbb2b09}')
    @commethod(60)
    def CheckPublicKeySignature(self, pPublicKey: win32more.Windows.Win32.Security.Cryptography.Certificates.IX509PublicKey) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(61)
    def get_Issuer(self, ppValue: POINTER(win32more.Windows.Win32.Security.Cryptography.Certificates.IX500DistinguishedName)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(62)
    def put_Issuer(self, pValue: win32more.Windows.Win32.Security.Cryptography.Certificates.IX500DistinguishedName) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(63)
    def get_NotBefore(self, pValue: POINTER(Double)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(64)
    def put_NotBefore(self, Value: Double) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(65)
    def get_NotAfter(self, pValue: POINTER(Double)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(66)
    def put_NotAfter(self, Value: Double) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(67)
    def get_SerialNumber(self, Encoding: win32more.Windows.Win32.Security.Cryptography.Certificates.EncodingType, pValue: POINTER(win32more.Windows.Win32.Foundation.BSTR)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(68)
    def put_SerialNumber(self, Encoding: win32more.Windows.Win32.Security.Cryptography.Certificates.EncodingType, Value: win32more.Windows.Win32.Foundation.BSTR) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(69)
    def get_SignerCertificate(self, ppValue: POINTER(win32more.Windows.Win32.Security.Cryptography.Certificates.ISignerCertificate)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(70)
    def put_SignerCertificate(self, pValue: win32more.Windows.Win32.Security.Cryptography.Certificates.ISignerCertificate) -> win32more.Windows.Win32.Foundation.HRESULT: ...
class IX509CertificateRequestCertificate2(ComPtr):
    extends: win32more.Windows.Win32.Security.Cryptography.Certificates.IX509CertificateRequestCertificate
    _iid_ = Guid('{728ab35a-217d-11da-b2a4-000e7bbb2b09}')
    @commethod(71)
    def InitializeFromTemplate(self, context: win32more.Windows.Win32.Security.Cryptography.Certificates.X509CertificateEnrollmentContext, pPolicyServer: win32more.Windows.Win32.Security.Cryptography.Certificates.IX509EnrollmentPolicyServer, pTemplate: win32more.Windows.Win32.Security.Cryptography.Certificates.IX509CertificateTemplate) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(72)
    def InitializeFromPrivateKeyTemplate(self, Context: win32more.Windows.Win32.Security.Cryptography.Certificates.X509CertificateEnrollmentContext, pPrivateKey: win32more.Windows.Win32.Security.Cryptography.Certificates.IX509PrivateKey, pPolicyServer: win32more.Windows.Win32.Security.Cryptography.Certificates.IX509EnrollmentPolicyServer, pTemplate: win32more.Windows.Win32.Security.Cryptography.Certificates.IX509CertificateTemplate) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(73)
    def get_PolicyServer(self, ppPolicyServer: POINTER(win32more.Windows.Win32.Security.Cryptography.Certificates.IX509EnrollmentPolicyServer)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(74)
    def get_Template(self, ppTemplate: POINTER(win32more.Windows.Win32.Security.Cryptography.Certificates.IX509CertificateTemplate)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
class IX509CertificateRequestCmc(ComPtr):
    extends: win32more.Windows.Win32.Security.Cryptography.Certificates.IX509CertificateRequestPkcs7
    _iid_ = Guid('{728ab345-217d-11da-b2a4-000e7bbb2b09}')
    @commethod(40)
    def InitializeFromInnerRequestTemplateName(self, pInnerRequest: win32more.Windows.Win32.Security.Cryptography.Certificates.IX509CertificateRequest, strTemplateName: win32more.Windows.Win32.Foundation.BSTR) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(41)
    def get_TemplateObjectId(self, ppValue: POINTER(win32more.Windows.Win32.Security.Cryptography.Certificates.IObjectId)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(42)
    def get_NullSigned(self, pValue: POINTER(win32more.Windows.Win32.Foundation.VARIANT_BOOL)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(43)
    def get_CryptAttributes(self, ppValue: POINTER(win32more.Windows.Win32.Security.Cryptography.Certificates.ICryptAttributes)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(44)
    def get_NameValuePairs(self, ppValue: POINTER(win32more.Windows.Win32.Security.Cryptography.Certificates.IX509NameValuePairs)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(45)
    def get_X509Extensions(self, ppValue: POINTER(win32more.Windows.Win32.Security.Cryptography.Certificates.IX509Extensions)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(46)
    def get_CriticalExtensions(self, ppValue: POINTER(win32more.Windows.Win32.Security.Cryptography.Certificates.IObjectIds)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(47)
    def get_SuppressOids(self, ppValue: POINTER(win32more.Windows.Win32.Security.Cryptography.Certificates.IObjectIds)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(48)
    def get_TransactionId(self, pValue: POINTER(Int32)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(49)
    def put_TransactionId(self, Value: Int32) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(50)
    def get_SenderNonce(self, Encoding: win32more.Windows.Win32.Security.Cryptography.Certificates.EncodingType, pValue: POINTER(win32more.Windows.Win32.Foundation.BSTR)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(51)
    def put_SenderNonce(self, Encoding: win32more.Windows.Win32.Security.Cryptography.Certificates.EncodingType, Value: win32more.Windows.Win32.Foundation.BSTR) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(52)
    def get_SignatureInformation(self, ppValue: POINTER(win32more.Windows.Win32.Security.Cryptography.Certificates.IX509SignatureInformation)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(53)
    def get_ArchivePrivateKey(self, pValue: POINTER(win32more.Windows.Win32.Foundation.VARIANT_BOOL)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(54)
    def put_ArchivePrivateKey(self, Value: win32more.Windows.Win32.Foundation.VARIANT_BOOL) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(55)
    def get_KeyArchivalCertificate(self, Encoding: win32more.Windows.Win32.Security.Cryptography.Certificates.EncodingType, pValue: POINTER(win32more.Windows.Win32.Foundation.BSTR)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(56)
    def put_KeyArchivalCertificate(self, Encoding: win32more.Windows.Win32.Security.Cryptography.Certificates.EncodingType, Value: win32more.Windows.Win32.Foundation.BSTR) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(57)
    def get_EncryptionAlgorithm(self, ppValue: POINTER(win32more.Windows.Win32.Security.Cryptography.Certificates.IObjectId)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(58)
    def put_EncryptionAlgorithm(self, pValue: win32more.Windows.Win32.Security.Cryptography.Certificates.IObjectId) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(59)
    def get_EncryptionStrength(self, pValue: POINTER(Int32)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(60)
    def put_EncryptionStrength(self, Value: Int32) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(61)
    def get_EncryptedKeyHash(self, Encoding: win32more.Windows.Win32.Security.Cryptography.Certificates.EncodingType, pValue: POINTER(win32more.Windows.Win32.Foundation.BSTR)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(62)
    def get_SignerCertificates(self, ppValue: POINTER(win32more.Windows.Win32.Security.Cryptography.Certificates.ISignerCertificates)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
class IX509CertificateRequestCmc2(ComPtr):
    extends: win32more.Windows.Win32.Security.Cryptography.Certificates.IX509CertificateRequestCmc
    _iid_ = Guid('{728ab35d-217d-11da-b2a4-000e7bbb2b09}')
    @commethod(63)
    def InitializeFromTemplate(self, context: win32more.Windows.Win32.Security.Cryptography.Certificates.X509CertificateEnrollmentContext, pPolicyServer: win32more.Windows.Win32.Security.Cryptography.Certificates.IX509EnrollmentPolicyServer, pTemplate: win32more.Windows.Win32.Security.Cryptography.Certificates.IX509CertificateTemplate) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(64)
    def InitializeFromInnerRequestTemplate(self, pInnerRequest: win32more.Windows.Win32.Security.Cryptography.Certificates.IX509CertificateRequest, pPolicyServer: win32more.Windows.Win32.Security.Cryptography.Certificates.IX509EnrollmentPolicyServer, pTemplate: win32more.Windows.Win32.Security.Cryptography.Certificates.IX509CertificateTemplate) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(65)
    def get_PolicyServer(self, ppPolicyServer: POINTER(win32more.Windows.Win32.Security.Cryptography.Certificates.IX509EnrollmentPolicyServer)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(66)
    def get_Template(self, ppTemplate: POINTER(win32more.Windows.Win32.Security.Cryptography.Certificates.IX509CertificateTemplate)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(67)
    def CheckSignature(self, AllowedSignatureTypes: win32more.Windows.Win32.Security.Cryptography.Certificates.Pkcs10AllowedSignatureTypes) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(68)
    def CheckCertificateSignature(self, pSignerCertificate: win32more.Windows.Win32.Security.Cryptography.Certificates.ISignerCertificate, ValidateCertificateChain: win32more.Windows.Win32.Foundation.VARIANT_BOOL) -> win32more.Windows.Win32.Foundation.HRESULT: ...
class IX509CertificateRequestPkcs10(ComPtr):
    extends: win32more.Windows.Win32.Security.Cryptography.Certificates.IX509CertificateRequest
    _iid_ = Guid('{728ab342-217d-11da-b2a4-000e7bbb2b09}')
    @commethod(32)
    def InitializeFromTemplateName(self, Context: win32more.Windows.Win32.Security.Cryptography.Certificates.X509CertificateEnrollmentContext, strTemplateName: win32more.Windows.Win32.Foundation.BSTR) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(33)
    def InitializeFromPrivateKey(self, Context: win32more.Windows.Win32.Security.Cryptography.Certificates.X509CertificateEnrollmentContext, pPrivateKey: win32more.Windows.Win32.Security.Cryptography.Certificates.IX509PrivateKey, strTemplateName: win32more.Windows.Win32.Foundation.BSTR) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(34)
    def InitializeFromPublicKey(self, Context: win32more.Windows.Win32.Security.Cryptography.Certificates.X509CertificateEnrollmentContext, pPublicKey: win32more.Windows.Win32.Security.Cryptography.Certificates.IX509PublicKey, strTemplateName: win32more.Windows.Win32.Foundation.BSTR) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(35)
    def InitializeFromCertificate(self, Context: win32more.Windows.Win32.Security.Cryptography.Certificates.X509CertificateEnrollmentContext, strCertificate: win32more.Windows.Win32.Foundation.BSTR, Encoding: win32more.Windows.Win32.Security.Cryptography.Certificates.EncodingType, InheritOptions: win32more.Windows.Win32.Security.Cryptography.Certificates.X509RequestInheritOptions) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(36)
    def InitializeDecode(self, strEncodedData: win32more.Windows.Win32.Foundation.BSTR, Encoding: win32more.Windows.Win32.Security.Cryptography.Certificates.EncodingType) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(37)
    def CheckSignature(self, AllowedSignatureTypes: win32more.Windows.Win32.Security.Cryptography.Certificates.Pkcs10AllowedSignatureTypes) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(38)
    def IsSmartCard(self, pValue: POINTER(win32more.Windows.Win32.Foundation.VARIANT_BOOL)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(39)
    def get_TemplateObjectId(self, ppValue: POINTER(win32more.Windows.Win32.Security.Cryptography.Certificates.IObjectId)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(40)
    def get_PublicKey(self, ppValue: POINTER(win32more.Windows.Win32.Security.Cryptography.Certificates.IX509PublicKey)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(41)
    def get_PrivateKey(self, ppValue: POINTER(win32more.Windows.Win32.Security.Cryptography.Certificates.IX509PrivateKey)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(42)
    def get_NullSigned(self, pValue: POINTER(win32more.Windows.Win32.Foundation.VARIANT_BOOL)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(43)
    def get_ReuseKey(self, pValue: POINTER(win32more.Windows.Win32.Foundation.VARIANT_BOOL)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(44)
    def get_OldCertificate(self, Encoding: win32more.Windows.Win32.Security.Cryptography.Certificates.EncodingType, pValue: POINTER(win32more.Windows.Win32.Foundation.BSTR)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(45)
    def get_Subject(self, ppValue: POINTER(win32more.Windows.Win32.Security.Cryptography.Certificates.IX500DistinguishedName)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(46)
    def put_Subject(self, pValue: win32more.Windows.Win32.Security.Cryptography.Certificates.IX500DistinguishedName) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(47)
    def get_CspStatuses(self, ppValue: POINTER(win32more.Windows.Win32.Security.Cryptography.Certificates.ICspStatuses)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(48)
    def get_SmimeCapabilities(self, pValue: POINTER(win32more.Windows.Win32.Foundation.VARIANT_BOOL)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(49)
    def put_SmimeCapabilities(self, Value: win32more.Windows.Win32.Foundation.VARIANT_BOOL) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(50)
    def get_SignatureInformation(self, ppValue: POINTER(win32more.Windows.Win32.Security.Cryptography.Certificates.IX509SignatureInformation)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(51)
    def get_KeyContainerNamePrefix(self, pValue: POINTER(win32more.Windows.Win32.Foundation.BSTR)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(52)
    def put_KeyContainerNamePrefix(self, Value: win32more.Windows.Win32.Foundation.BSTR) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(53)
    def get_CryptAttributes(self, ppValue: POINTER(win32more.Windows.Win32.Security.Cryptography.Certificates.ICryptAttributes)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(54)
    def get_X509Extensions(self, ppValue: POINTER(win32more.Windows.Win32.Security.Cryptography.Certificates.IX509Extensions)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(55)
    def get_CriticalExtensions(self, ppValue: POINTER(win32more.Windows.Win32.Security.Cryptography.Certificates.IObjectIds)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(56)
    def get_SuppressOids(self, ppValue: POINTER(win32more.Windows.Win32.Security.Cryptography.Certificates.IObjectIds)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(57)
    def get_RawDataToBeSigned(self, Encoding: win32more.Windows.Win32.Security.Cryptography.Certificates.EncodingType, pValue: POINTER(win32more.Windows.Win32.Foundation.BSTR)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(58)
    def get_Signature(self, Encoding: win32more.Windows.Win32.Security.Cryptography.Certificates.EncodingType, pValue: POINTER(win32more.Windows.Win32.Foundation.BSTR)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(59)
    def GetCspStatuses(self, KeySpec: win32more.Windows.Win32.Security.Cryptography.Certificates.X509KeySpec, ppCspStatuses: POINTER(win32more.Windows.Win32.Security.Cryptography.Certificates.ICspStatuses)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
class IX509CertificateRequestPkcs10V2(ComPtr):
    extends: win32more.Windows.Win32.Security.Cryptography.Certificates.IX509CertificateRequestPkcs10
    _iid_ = Guid('{728ab35b-217d-11da-b2a4-000e7bbb2b09}')
    @commethod(60)
    def InitializeFromTemplate(self, context: win32more.Windows.Win32.Security.Cryptography.Certificates.X509CertificateEnrollmentContext, pPolicyServer: win32more.Windows.Win32.Security.Cryptography.Certificates.IX509EnrollmentPolicyServer, pTemplate: win32more.Windows.Win32.Security.Cryptography.Certificates.IX509CertificateTemplate) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(61)
    def InitializeFromPrivateKeyTemplate(self, Context: win32more.Windows.Win32.Security.Cryptography.Certificates.X509CertificateEnrollmentContext, pPrivateKey: win32more.Windows.Win32.Security.Cryptography.Certificates.IX509PrivateKey, pPolicyServer: win32more.Windows.Win32.Security.Cryptography.Certificates.IX509EnrollmentPolicyServer, pTemplate: win32more.Windows.Win32.Security.Cryptography.Certificates.IX509CertificateTemplate) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(62)
    def InitializeFromPublicKeyTemplate(self, Context: win32more.Windows.Win32.Security.Cryptography.Certificates.X509CertificateEnrollmentContext, pPublicKey: win32more.Windows.Win32.Security.Cryptography.Certificates.IX509PublicKey, pPolicyServer: win32more.Windows.Win32.Security.Cryptography.Certificates.IX509EnrollmentPolicyServer, pTemplate: win32more.Windows.Win32.Security.Cryptography.Certificates.IX509CertificateTemplate) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(63)
    def get_PolicyServer(self, ppPolicyServer: POINTER(win32more.Windows.Win32.Security.Cryptography.Certificates.IX509EnrollmentPolicyServer)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(64)
    def get_Template(self, ppTemplate: POINTER(win32more.Windows.Win32.Security.Cryptography.Certificates.IX509CertificateTemplate)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
class IX509CertificateRequestPkcs10V3(ComPtr):
    extends: win32more.Windows.Win32.Security.Cryptography.Certificates.IX509CertificateRequestPkcs10V2
    _iid_ = Guid('{54ea9942-3d66-4530-b76e-7c9170d3ec52}')
    @commethod(65)
    def get_AttestPrivateKey(self, pValue: POINTER(win32more.Windows.Win32.Foundation.VARIANT_BOOL)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(66)
    def put_AttestPrivateKey(self, Value: win32more.Windows.Win32.Foundation.VARIANT_BOOL) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(67)
    def get_AttestationEncryptionCertificate(self, Encoding: win32more.Windows.Win32.Security.Cryptography.Certificates.EncodingType, pValue: POINTER(win32more.Windows.Win32.Foundation.BSTR)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(68)
    def put_AttestationEncryptionCertificate(self, Encoding: win32more.Windows.Win32.Security.Cryptography.Certificates.EncodingType, Value: win32more.Windows.Win32.Foundation.BSTR) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(69)
    def get_EncryptionAlgorithm(self, ppValue: POINTER(win32more.Windows.Win32.Security.Cryptography.Certificates.IObjectId)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(70)
    def put_EncryptionAlgorithm(self, pValue: win32more.Windows.Win32.Security.Cryptography.Certificates.IObjectId) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(71)
    def get_EncryptionStrength(self, pValue: POINTER(Int32)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(72)
    def put_EncryptionStrength(self, Value: Int32) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(73)
    def get_ChallengePassword(self, pValue: POINTER(win32more.Windows.Win32.Foundation.BSTR)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(74)
    def put_ChallengePassword(self, Value: win32more.Windows.Win32.Foundation.BSTR) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(75)
    def get_NameValuePairs(self, ppValue: POINTER(win32more.Windows.Win32.Security.Cryptography.Certificates.IX509NameValuePairs)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
class IX509CertificateRequestPkcs10V4(ComPtr):
    extends: win32more.Windows.Win32.Security.Cryptography.Certificates.IX509CertificateRequestPkcs10V3
    _iid_ = Guid('{728ab363-217d-11da-b2a4-000e7bbb2b09}')
    @commethod(76)
    def get_ClaimType(self, pValue: POINTER(win32more.Windows.Win32.Security.Cryptography.Certificates.KeyAttestationClaimType)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(77)
    def put_ClaimType(self, Value: win32more.Windows.Win32.Security.Cryptography.Certificates.KeyAttestationClaimType) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(78)
    def get_AttestPrivateKeyPreferred(self, pValue: POINTER(win32more.Windows.Win32.Foundation.VARIANT_BOOL)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(79)
    def put_AttestPrivateKeyPreferred(self, Value: win32more.Windows.Win32.Foundation.VARIANT_BOOL) -> win32more.Windows.Win32.Foundation.HRESULT: ...
class IX509CertificateRequestPkcs7(ComPtr):
    extends: win32more.Windows.Win32.Security.Cryptography.Certificates.IX509CertificateRequest
    _iid_ = Guid('{728ab344-217d-11da-b2a4-000e7bbb2b09}')
    @commethod(32)
    def InitializeFromTemplateName(self, Context: win32more.Windows.Win32.Security.Cryptography.Certificates.X509CertificateEnrollmentContext, strTemplateName: win32more.Windows.Win32.Foundation.BSTR) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(33)
    def InitializeFromCertificate(self, Context: win32more.Windows.Win32.Security.Cryptography.Certificates.X509CertificateEnrollmentContext, RenewalRequest: win32more.Windows.Win32.Foundation.VARIANT_BOOL, strCertificate: win32more.Windows.Win32.Foundation.BSTR, Encoding: win32more.Windows.Win32.Security.Cryptography.Certificates.EncodingType, InheritOptions: win32more.Windows.Win32.Security.Cryptography.Certificates.X509RequestInheritOptions) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(34)
    def InitializeFromInnerRequest(self, pInnerRequest: win32more.Windows.Win32.Security.Cryptography.Certificates.IX509CertificateRequest) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(35)
    def InitializeDecode(self, strEncodedData: win32more.Windows.Win32.Foundation.BSTR, Encoding: win32more.Windows.Win32.Security.Cryptography.Certificates.EncodingType) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(36)
    def get_RequesterName(self, pValue: POINTER(win32more.Windows.Win32.Foundation.BSTR)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(37)
    def put_RequesterName(self, Value: win32more.Windows.Win32.Foundation.BSTR) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(38)
    def get_SignerCertificate(self, ppValue: POINTER(win32more.Windows.Win32.Security.Cryptography.Certificates.ISignerCertificate)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(39)
    def put_SignerCertificate(self, pValue: win32more.Windows.Win32.Security.Cryptography.Certificates.ISignerCertificate) -> win32more.Windows.Win32.Foundation.HRESULT: ...
class IX509CertificateRequestPkcs7V2(ComPtr):
    extends: win32more.Windows.Win32.Security.Cryptography.Certificates.IX509CertificateRequestPkcs7
    _iid_ = Guid('{728ab35c-217d-11da-b2a4-000e7bbb2b09}')
    @commethod(40)
    def InitializeFromTemplate(self, context: win32more.Windows.Win32.Security.Cryptography.Certificates.X509CertificateEnrollmentContext, pPolicyServer: win32more.Windows.Win32.Security.Cryptography.Certificates.IX509EnrollmentPolicyServer, pTemplate: win32more.Windows.Win32.Security.Cryptography.Certificates.IX509CertificateTemplate) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(41)
    def get_PolicyServer(self, ppPolicyServer: POINTER(win32more.Windows.Win32.Security.Cryptography.Certificates.IX509EnrollmentPolicyServer)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(42)
    def get_Template(self, ppTemplate: POINTER(win32more.Windows.Win32.Security.Cryptography.Certificates.IX509CertificateTemplate)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(43)
    def CheckCertificateSignature(self, ValidateCertificateChain: win32more.Windows.Win32.Foundation.VARIANT_BOOL) -> win32more.Windows.Win32.Foundation.HRESULT: ...
class IX509CertificateRevocationList(ComPtr):
    extends: win32more.Windows.Win32.System.Com.IDispatch
    _iid_ = Guid('{728ab360-217d-11da-b2a4-000e7bbb2b09}')
    @commethod(7)
    def Initialize(self) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(8)
    def InitializeDecode(self, strEncodedData: win32more.Windows.Win32.Foundation.BSTR, Encoding: win32more.Windows.Win32.Security.Cryptography.Certificates.EncodingType) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(9)
    def Encode(self) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(10)
    def ResetForEncode(self) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(11)
    def CheckPublicKeySignature(self, pPublicKey: win32more.Windows.Win32.Security.Cryptography.Certificates.IX509PublicKey) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(12)
    def CheckSignature(self) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(13)
    def get_Issuer(self, ppValue: POINTER(win32more.Windows.Win32.Security.Cryptography.Certificates.IX500DistinguishedName)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(14)
    def put_Issuer(self, pValue: win32more.Windows.Win32.Security.Cryptography.Certificates.IX500DistinguishedName) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(15)
    def get_ThisUpdate(self, pValue: POINTER(Double)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(16)
    def put_ThisUpdate(self, Value: Double) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(17)
    def get_NextUpdate(self, pValue: POINTER(Double)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(18)
    def put_NextUpdate(self, Value: Double) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(19)
    def get_X509CRLEntries(self, ppValue: POINTER(win32more.Windows.Win32.Security.Cryptography.Certificates.IX509CertificateRevocationListEntries)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(20)
    def get_X509Extensions(self, ppValue: POINTER(win32more.Windows.Win32.Security.Cryptography.Certificates.IX509Extensions)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(21)
    def get_CriticalExtensions(self, ppValue: POINTER(win32more.Windows.Win32.Security.Cryptography.Certificates.IObjectIds)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(22)
    def get_SignerCertificate(self, ppValue: POINTER(win32more.Windows.Win32.Security.Cryptography.Certificates.ISignerCertificate)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(23)
    def put_SignerCertificate(self, pValue: win32more.Windows.Win32.Security.Cryptography.Certificates.ISignerCertificate) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(24)
    def get_CRLNumber(self, Encoding: win32more.Windows.Win32.Security.Cryptography.Certificates.EncodingType, pValue: POINTER(win32more.Windows.Win32.Foundation.BSTR)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(25)
    def put_CRLNumber(self, Encoding: win32more.Windows.Win32.Security.Cryptography.Certificates.EncodingType, Value: win32more.Windows.Win32.Foundation.BSTR) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(26)
    def get_CAVersion(self, pValue: POINTER(Int32)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(27)
    def put_CAVersion(self, pValue: Int32) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(28)
    def get_BaseCRL(self, pValue: POINTER(win32more.Windows.Win32.Foundation.VARIANT_BOOL)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(29)
    def get_NullSigned(self, pValue: POINTER(win32more.Windows.Win32.Foundation.VARIANT_BOOL)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(30)
    def get_HashAlgorithm(self, ppValue: POINTER(win32more.Windows.Win32.Security.Cryptography.Certificates.IObjectId)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(31)
    def put_HashAlgorithm(self, pValue: win32more.Windows.Win32.Security.Cryptography.Certificates.IObjectId) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(32)
    def get_AlternateSignatureAlgorithm(self, pValue: POINTER(win32more.Windows.Win32.Foundation.VARIANT_BOOL)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(33)
    def put_AlternateSignatureAlgorithm(self, Value: win32more.Windows.Win32.Foundation.VARIANT_BOOL) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(34)
    def get_SignatureInformation(self, ppValue: POINTER(win32more.Windows.Win32.Security.Cryptography.Certificates.IX509SignatureInformation)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(35)
    def get_RawData(self, Encoding: win32more.Windows.Win32.Security.Cryptography.Certificates.EncodingType, pValue: POINTER(win32more.Windows.Win32.Foundation.BSTR)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(36)
    def get_RawDataToBeSigned(self, Encoding: win32more.Windows.Win32.Security.Cryptography.Certificates.EncodingType, pValue: POINTER(win32more.Windows.Win32.Foundation.BSTR)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(37)
    def get_Signature(self, Encoding: win32more.Windows.Win32.Security.Cryptography.Certificates.EncodingType, pValue: POINTER(win32more.Windows.Win32.Foundation.BSTR)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
class IX509CertificateRevocationListEntries(ComPtr):
    extends: win32more.Windows.Win32.System.Com.IDispatch
    _iid_ = Guid('{728ab35f-217d-11da-b2a4-000e7bbb2b09}')
    @commethod(7)
    def get_ItemByIndex(self, Index: Int32, pVal: POINTER(win32more.Windows.Win32.Security.Cryptography.Certificates.IX509CertificateRevocationListEntry)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(8)
    def get_Count(self, pVal: POINTER(Int32)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(9)
    def get__NewEnum(self, pVal: POINTER(win32more.Windows.Win32.System.Com.IUnknown)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(10)
    def Add(self, pVal: win32more.Windows.Win32.Security.Cryptography.Certificates.IX509CertificateRevocationListEntry) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(11)
    def Remove(self, Index: Int32) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(12)
    def Clear(self) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(13)
    def get_IndexBySerialNumber(self, Encoding: win32more.Windows.Win32.Security.Cryptography.Certificates.EncodingType, SerialNumber: win32more.Windows.Win32.Foundation.BSTR, pIndex: POINTER(Int32)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(14)
    def AddRange(self, pValue: win32more.Windows.Win32.Security.Cryptography.Certificates.IX509CertificateRevocationListEntries) -> win32more.Windows.Win32.Foundation.HRESULT: ...
class IX509CertificateRevocationListEntry(ComPtr):
    extends: win32more.Windows.Win32.System.Com.IDispatch
    _iid_ = Guid('{728ab35e-217d-11da-b2a4-000e7bbb2b09}')
    @commethod(7)
    def Initialize(self, Encoding: win32more.Windows.Win32.Security.Cryptography.Certificates.EncodingType, SerialNumber: win32more.Windows.Win32.Foundation.BSTR, RevocationDate: Double) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(8)
    def get_SerialNumber(self, Encoding: win32more.Windows.Win32.Security.Cryptography.Certificates.EncodingType, pValue: POINTER(win32more.Windows.Win32.Foundation.BSTR)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(9)
    def get_RevocationDate(self, pValue: POINTER(Double)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(10)
    def get_RevocationReason(self, pValue: POINTER(win32more.Windows.Win32.Security.Cryptography.Certificates.CRLRevocationReason)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(11)
    def put_RevocationReason(self, Value: win32more.Windows.Win32.Security.Cryptography.Certificates.CRLRevocationReason) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(12)
    def get_X509Extensions(self, ppValue: POINTER(win32more.Windows.Win32.Security.Cryptography.Certificates.IX509Extensions)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(13)
    def get_CriticalExtensions(self, ppValue: POINTER(win32more.Windows.Win32.Security.Cryptography.Certificates.IObjectIds)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
class IX509CertificateTemplate(ComPtr):
    extends: win32more.Windows.Win32.System.Com.IDispatch
    _iid_ = Guid('{54244a13-555a-4e22-896d-1b0e52f76406}')
    @commethod(7)
    def get_Property(self, property: win32more.Windows.Win32.Security.Cryptography.Certificates.EnrollmentTemplateProperty, pValue: POINTER(win32more.Windows.Win32.System.Variant.VARIANT)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
class IX509CertificateTemplateWritable(ComPtr):
    extends: win32more.Windows.Win32.System.Com.IDispatch
    _iid_ = Guid('{f49466a7-395a-4e9e-b6e7-32b331600dc0}')
    @commethod(7)
    def Initialize(self, pValue: win32more.Windows.Win32.Security.Cryptography.Certificates.IX509CertificateTemplate) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(8)
    def Commit(self, commitFlags: win32more.Windows.Win32.Security.Cryptography.Certificates.CommitTemplateFlags, strServerContext: win32more.Windows.Win32.Foundation.BSTR) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(9)
    def get_Property(self, property: win32more.Windows.Win32.Security.Cryptography.Certificates.EnrollmentTemplateProperty, pValue: POINTER(win32more.Windows.Win32.System.Variant.VARIANT)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(10)
    def put_Property(self, property: win32more.Windows.Win32.Security.Cryptography.Certificates.EnrollmentTemplateProperty, value: win32more.Windows.Win32.System.Variant.VARIANT) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(11)
    def get_Template(self, ppValue: POINTER(win32more.Windows.Win32.Security.Cryptography.Certificates.IX509CertificateTemplate)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
class IX509CertificateTemplates(ComPtr):
    extends: win32more.Windows.Win32.System.Com.IDispatch
    _iid_ = Guid('{13b79003-2181-11da-b2a4-000e7bbb2b09}')
    @commethod(7)
    def get_ItemByIndex(self, Index: Int32, pVal: POINTER(win32more.Windows.Win32.Security.Cryptography.Certificates.IX509CertificateTemplate)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(8)
    def get_Count(self, pVal: POINTER(Int32)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(9)
    def get__NewEnum(self, pVal: POINTER(win32more.Windows.Win32.System.Com.IUnknown)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(10)
    def Add(self, pVal: win32more.Windows.Win32.Security.Cryptography.Certificates.IX509CertificateTemplate) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(11)
    def Remove(self, Index: Int32) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(12)
    def Clear(self) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(13)
    def get_ItemByName(self, bstrName: win32more.Windows.Win32.Foundation.BSTR, ppValue: POINTER(win32more.Windows.Win32.Security.Cryptography.Certificates.IX509CertificateTemplate)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(14)
    def get_ItemByOid(self, pOid: win32more.Windows.Win32.Security.Cryptography.Certificates.IObjectId, ppValue: POINTER(win32more.Windows.Win32.Security.Cryptography.Certificates.IX509CertificateTemplate)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
class IX509EndorsementKey(ComPtr):
    extends: win32more.Windows.Win32.System.Com.IDispatch
    _iid_ = Guid('{b11cd855-f4c4-4fc6-b710-4422237f09e9}')
    @commethod(7)
    def get_ProviderName(self, pValue: POINTER(win32more.Windows.Win32.Foundation.BSTR)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(8)
    def put_ProviderName(self, Value: win32more.Windows.Win32.Foundation.BSTR) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(9)
    def get_Length(self, pValue: POINTER(Int32)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(10)
    def get_Opened(self, pValue: POINTER(win32more.Windows.Win32.Foundation.VARIANT_BOOL)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(11)
    def AddCertificate(self, Encoding: win32more.Windows.Win32.Security.Cryptography.Certificates.EncodingType, strCertificate: win32more.Windows.Win32.Foundation.BSTR) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(12)
    def RemoveCertificate(self, Encoding: win32more.Windows.Win32.Security.Cryptography.Certificates.EncodingType, strCertificate: win32more.Windows.Win32.Foundation.BSTR) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(13)
    def GetCertificateByIndex(self, ManufacturerOnly: win32more.Windows.Win32.Foundation.VARIANT_BOOL, dwIndex: Int32, Encoding: win32more.Windows.Win32.Security.Cryptography.Certificates.EncodingType, pValue: POINTER(win32more.Windows.Win32.Foundation.BSTR)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(14)
    def GetCertificateCount(self, ManufacturerOnly: win32more.Windows.Win32.Foundation.VARIANT_BOOL, pCount: POINTER(Int32)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(15)
    def ExportPublicKey(self, ppPublicKey: POINTER(win32more.Windows.Win32.Security.Cryptography.Certificates.IX509PublicKey)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(16)
    def Open(self) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(17)
    def Close(self) -> win32more.Windows.Win32.Foundation.HRESULT: ...
class IX509Enrollment(ComPtr):
    extends: win32more.Windows.Win32.System.Com.IDispatch
    _iid_ = Guid('{728ab346-217d-11da-b2a4-000e7bbb2b09}')
    @commethod(7)
    def Initialize(self, Context: win32more.Windows.Win32.Security.Cryptography.Certificates.X509CertificateEnrollmentContext) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(8)
    def InitializeFromTemplateName(self, Context: win32more.Windows.Win32.Security.Cryptography.Certificates.X509CertificateEnrollmentContext, strTemplateName: win32more.Windows.Win32.Foundation.BSTR) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(9)
    def InitializeFromRequest(self, pRequest: win32more.Windows.Win32.Security.Cryptography.Certificates.IX509CertificateRequest) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(10)
    def CreateRequest(self, Encoding: win32more.Windows.Win32.Security.Cryptography.Certificates.EncodingType, pValue: POINTER(win32more.Windows.Win32.Foundation.BSTR)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(11)
    def Enroll(self) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(12)
    def InstallResponse(self, Restrictions: win32more.Windows.Win32.Security.Cryptography.Certificates.InstallResponseRestrictionFlags, strResponse: win32more.Windows.Win32.Foundation.BSTR, Encoding: win32more.Windows.Win32.Security.Cryptography.Certificates.EncodingType, strPassword: win32more.Windows.Win32.Foundation.BSTR) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(13)
    def CreatePFX(self, strPassword: win32more.Windows.Win32.Foundation.BSTR, ExportOptions: win32more.Windows.Win32.Security.Cryptography.Certificates.PFXExportOptions, Encoding: win32more.Windows.Win32.Security.Cryptography.Certificates.EncodingType, pValue: POINTER(win32more.Windows.Win32.Foundation.BSTR)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(14)
    def get_Request(self, pValue: POINTER(win32more.Windows.Win32.Security.Cryptography.Certificates.IX509CertificateRequest)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(15)
    def get_Silent(self, pValue: POINTER(win32more.Windows.Win32.Foundation.VARIANT_BOOL)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(16)
    def put_Silent(self, Value: win32more.Windows.Win32.Foundation.VARIANT_BOOL) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(17)
    def get_ParentWindow(self, pValue: POINTER(Int32)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(18)
    def put_ParentWindow(self, Value: Int32) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(19)
    def get_NameValuePairs(self, ppValue: POINTER(win32more.Windows.Win32.Security.Cryptography.Certificates.IX509NameValuePairs)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(20)
    def get_EnrollmentContext(self, pValue: POINTER(win32more.Windows.Win32.Security.Cryptography.Certificates.X509CertificateEnrollmentContext)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(21)
    def get_Status(self, ppValue: POINTER(win32more.Windows.Win32.Security.Cryptography.Certificates.IX509EnrollmentStatus)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(22)
    def get_Certificate(self, Encoding: win32more.Windows.Win32.Security.Cryptography.Certificates.EncodingType, pValue: POINTER(win32more.Windows.Win32.Foundation.BSTR)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(23)
    def get_Response(self, Encoding: win32more.Windows.Win32.Security.Cryptography.Certificates.EncodingType, pValue: POINTER(win32more.Windows.Win32.Foundation.BSTR)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(24)
    def get_CertificateFriendlyName(self, pValue: POINTER(win32more.Windows.Win32.Foundation.BSTR)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(25)
    def put_CertificateFriendlyName(self, strValue: win32more.Windows.Win32.Foundation.BSTR) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(26)
    def get_CertificateDescription(self, pValue: POINTER(win32more.Windows.Win32.Foundation.BSTR)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(27)
    def put_CertificateDescription(self, strValue: win32more.Windows.Win32.Foundation.BSTR) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(28)
    def get_RequestId(self, pValue: POINTER(Int32)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(29)
    def get_CAConfigString(self, pValue: POINTER(win32more.Windows.Win32.Foundation.BSTR)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
class IX509Enrollment2(ComPtr):
    extends: win32more.Windows.Win32.Security.Cryptography.Certificates.IX509Enrollment
    _iid_ = Guid('{728ab350-217d-11da-b2a4-000e7bbb2b09}')
    @commethod(30)
    def InitializeFromTemplate(self, context: win32more.Windows.Win32.Security.Cryptography.Certificates.X509CertificateEnrollmentContext, pPolicyServer: win32more.Windows.Win32.Security.Cryptography.Certificates.IX509EnrollmentPolicyServer, pTemplate: win32more.Windows.Win32.Security.Cryptography.Certificates.IX509CertificateTemplate) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(31)
    def InstallResponse2(self, Restrictions: win32more.Windows.Win32.Security.Cryptography.Certificates.InstallResponseRestrictionFlags, strResponse: win32more.Windows.Win32.Foundation.BSTR, Encoding: win32more.Windows.Win32.Security.Cryptography.Certificates.EncodingType, strPassword: win32more.Windows.Win32.Foundation.BSTR, strEnrollmentPolicyServerUrl: win32more.Windows.Win32.Foundation.BSTR, strEnrollmentPolicyServerID: win32more.Windows.Win32.Foundation.BSTR, EnrollmentPolicyServerFlags: win32more.Windows.Win32.Security.Cryptography.Certificates.PolicyServerUrlFlags, authFlags: win32more.Windows.Win32.Security.Cryptography.Certificates.X509EnrollmentAuthFlags) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(32)
    def get_PolicyServer(self, ppPolicyServer: POINTER(win32more.Windows.Win32.Security.Cryptography.Certificates.IX509EnrollmentPolicyServer)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(33)
    def get_Template(self, ppTemplate: POINTER(win32more.Windows.Win32.Security.Cryptography.Certificates.IX509CertificateTemplate)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(34)
    def get_RequestIdString(self, pValue: POINTER(win32more.Windows.Win32.Foundation.BSTR)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
class IX509EnrollmentHelper(ComPtr):
    extends: win32more.Windows.Win32.System.Com.IDispatch
    _iid_ = Guid('{728ab351-217d-11da-b2a4-000e7bbb2b09}')
    @commethod(7)
    def AddPolicyServer(self, strEnrollmentPolicyServerURI: win32more.Windows.Win32.Foundation.BSTR, strEnrollmentPolicyID: win32more.Windows.Win32.Foundation.BSTR, EnrollmentPolicyServerFlags: win32more.Windows.Win32.Security.Cryptography.Certificates.PolicyServerUrlFlags, authFlags: win32more.Windows.Win32.Security.Cryptography.Certificates.X509EnrollmentAuthFlags, strCredential: win32more.Windows.Win32.Foundation.BSTR, strPassword: win32more.Windows.Win32.Foundation.BSTR) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(8)
    def AddEnrollmentServer(self, strEnrollmentServerURI: win32more.Windows.Win32.Foundation.BSTR, authFlags: win32more.Windows.Win32.Security.Cryptography.Certificates.X509EnrollmentAuthFlags, strCredential: win32more.Windows.Win32.Foundation.BSTR, strPassword: win32more.Windows.Win32.Foundation.BSTR) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(9)
    def Enroll(self, strEnrollmentPolicyServerURI: win32more.Windows.Win32.Foundation.BSTR, strTemplateName: win32more.Windows.Win32.Foundation.BSTR, Encoding: win32more.Windows.Win32.Security.Cryptography.Certificates.EncodingType, enrollFlags: win32more.Windows.Win32.Security.Cryptography.Certificates.WebEnrollmentFlags, pstrCertificate: POINTER(win32more.Windows.Win32.Foundation.BSTR)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(10)
    def Initialize(self, Context: win32more.Windows.Win32.Security.Cryptography.Certificates.X509CertificateEnrollmentContext) -> win32more.Windows.Win32.Foundation.HRESULT: ...
class IX509EnrollmentPolicyServer(ComPtr):
    extends: win32more.Windows.Win32.System.Com.IDispatch
    _iid_ = Guid('{13b79026-2181-11da-b2a4-000e7bbb2b09}')
    @commethod(7)
    def Initialize(self, bstrPolicyServerUrl: win32more.Windows.Win32.Foundation.BSTR, bstrPolicyServerId: win32more.Windows.Win32.Foundation.BSTR, authFlags: win32more.Windows.Win32.Security.Cryptography.Certificates.X509EnrollmentAuthFlags, fIsUnTrusted: win32more.Windows.Win32.Foundation.VARIANT_BOOL, context: win32more.Windows.Win32.Security.Cryptography.Certificates.X509CertificateEnrollmentContext) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(8)
    def LoadPolicy(self, option: win32more.Windows.Win32.Security.Cryptography.Certificates.X509EnrollmentPolicyLoadOption) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(9)
    def GetTemplates(self, pTemplates: POINTER(win32more.Windows.Win32.Security.Cryptography.Certificates.IX509CertificateTemplates)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(10)
    def GetCAsForTemplate(self, pTemplate: win32more.Windows.Win32.Security.Cryptography.Certificates.IX509CertificateTemplate, ppCAs: POINTER(win32more.Windows.Win32.Security.Cryptography.Certificates.ICertificationAuthorities)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(11)
    def GetCAs(self, ppCAs: POINTER(win32more.Windows.Win32.Security.Cryptography.Certificates.ICertificationAuthorities)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(12)
    def Validate(self) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(13)
    def GetCustomOids(self, ppObjectIds: POINTER(win32more.Windows.Win32.Security.Cryptography.Certificates.IObjectIds)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(14)
    def GetNextUpdateTime(self, pDate: POINTER(Double)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(15)
    def GetLastUpdateTime(self, pDate: POINTER(Double)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(16)
    def GetPolicyServerUrl(self, pValue: POINTER(win32more.Windows.Win32.Foundation.BSTR)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(17)
    def GetPolicyServerId(self, pValue: POINTER(win32more.Windows.Win32.Foundation.BSTR)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(18)
    def GetFriendlyName(self, pValue: POINTER(win32more.Windows.Win32.Foundation.BSTR)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(19)
    def GetIsDefaultCEP(self, pValue: POINTER(win32more.Windows.Win32.Foundation.VARIANT_BOOL)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(20)
    def GetUseClientId(self, pValue: POINTER(win32more.Windows.Win32.Foundation.VARIANT_BOOL)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(21)
    def GetAllowUnTrustedCA(self, pValue: POINTER(win32more.Windows.Win32.Foundation.VARIANT_BOOL)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(22)
    def GetCachePath(self, pValue: POINTER(win32more.Windows.Win32.Foundation.BSTR)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(23)
    def GetCacheDir(self, pValue: POINTER(win32more.Windows.Win32.Foundation.BSTR)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(24)
    def GetAuthFlags(self, pValue: POINTER(win32more.Windows.Win32.Security.Cryptography.Certificates.X509EnrollmentAuthFlags)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(25)
    def SetCredential(self, hWndParent: Int32, flag: win32more.Windows.Win32.Security.Cryptography.Certificates.X509EnrollmentAuthFlags, strCredential: win32more.Windows.Win32.Foundation.BSTR, strPassword: win32more.Windows.Win32.Foundation.BSTR) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(26)
    def QueryChanges(self, pValue: POINTER(win32more.Windows.Win32.Foundation.VARIANT_BOOL)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(27)
    def InitializeImport(self, val: win32more.Windows.Win32.System.Variant.VARIANT) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(28)
    def Export(self, exportFlags: win32more.Windows.Win32.Security.Cryptography.Certificates.X509EnrollmentPolicyExportFlags, pVal: POINTER(win32more.Windows.Win32.System.Variant.VARIANT)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(29)
    def get_Cost(self, pValue: POINTER(UInt32)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(30)
    def put_Cost(self, value: UInt32) -> win32more.Windows.Win32.Foundation.HRESULT: ...
class IX509EnrollmentStatus(ComPtr):
    extends: win32more.Windows.Win32.System.Com.IDispatch
    _iid_ = Guid('{728ab304-217d-11da-b2a4-000e7bbb2b09}')
    @commethod(7)
    def AppendText(self, strText: win32more.Windows.Win32.Foundation.BSTR) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(8)
    def get_Text(self, pValue: POINTER(win32more.Windows.Win32.Foundation.BSTR)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(9)
    def put_Text(self, Value: win32more.Windows.Win32.Foundation.BSTR) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(10)
    def get_Selected(self, pValue: POINTER(win32more.Windows.Win32.Security.Cryptography.Certificates.EnrollmentSelectionStatus)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(11)
    def put_Selected(self, Value: win32more.Windows.Win32.Security.Cryptography.Certificates.EnrollmentSelectionStatus) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(12)
    def get_Display(self, pValue: POINTER(win32more.Windows.Win32.Security.Cryptography.Certificates.EnrollmentDisplayStatus)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(13)
    def put_Display(self, Value: win32more.Windows.Win32.Security.Cryptography.Certificates.EnrollmentDisplayStatus) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(14)
    def get_Status(self, pValue: POINTER(win32more.Windows.Win32.Security.Cryptography.Certificates.EnrollmentEnrollStatus)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(15)
    def put_Status(self, Value: win32more.Windows.Win32.Security.Cryptography.Certificates.EnrollmentEnrollStatus) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(16)
    def get_Error(self, pValue: POINTER(win32more.Windows.Win32.Foundation.HRESULT)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(17)
    def put_Error(self, Value: win32more.Windows.Win32.Foundation.HRESULT) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(18)
    def get_ErrorText(self, pValue: POINTER(win32more.Windows.Win32.Foundation.BSTR)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
class IX509EnrollmentWebClassFactory(ComPtr):
    extends: win32more.Windows.Win32.System.Com.IDispatch
    _iid_ = Guid('{728ab349-217d-11da-b2a4-000e7bbb2b09}')
    @commethod(7)
    def CreateObject(self, strProgID: win32more.Windows.Win32.Foundation.BSTR, ppIUnknown: POINTER(win32more.Windows.Win32.System.Com.IUnknown)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
class IX509Extension(ComPtr):
    extends: win32more.Windows.Win32.System.Com.IDispatch
    _iid_ = Guid('{728ab30d-217d-11da-b2a4-000e7bbb2b09}')
    @commethod(7)
    def Initialize(self, pObjectId: win32more.Windows.Win32.Security.Cryptography.Certificates.IObjectId, Encoding: win32more.Windows.Win32.Security.Cryptography.Certificates.EncodingType, strEncodedData: win32more.Windows.Win32.Foundation.BSTR) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(8)
    def get_ObjectId(self, ppValue: POINTER(win32more.Windows.Win32.Security.Cryptography.Certificates.IObjectId)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(9)
    def get_RawData(self, Encoding: win32more.Windows.Win32.Security.Cryptography.Certificates.EncodingType, pValue: POINTER(win32more.Windows.Win32.Foundation.BSTR)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(10)
    def get_Critical(self, pValue: POINTER(win32more.Windows.Win32.Foundation.VARIANT_BOOL)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(11)
    def put_Critical(self, Value: win32more.Windows.Win32.Foundation.VARIANT_BOOL) -> win32more.Windows.Win32.Foundation.HRESULT: ...
class IX509ExtensionAlternativeNames(ComPtr):
    extends: win32more.Windows.Win32.Security.Cryptography.Certificates.IX509Extension
    _iid_ = Guid('{728ab315-217d-11da-b2a4-000e7bbb2b09}')
    @commethod(12)
    def InitializeEncode(self, pValue: win32more.Windows.Win32.Security.Cryptography.Certificates.IAlternativeNames) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(13)
    def InitializeDecode(self, Encoding: win32more.Windows.Win32.Security.Cryptography.Certificates.EncodingType, strEncodedData: win32more.Windows.Win32.Foundation.BSTR) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(14)
    def get_AlternativeNames(self, ppValue: POINTER(win32more.Windows.Win32.Security.Cryptography.Certificates.IAlternativeNames)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
class IX509ExtensionAuthorityKeyIdentifier(ComPtr):
    extends: win32more.Windows.Win32.Security.Cryptography.Certificates.IX509Extension
    _iid_ = Guid('{728ab318-217d-11da-b2a4-000e7bbb2b09}')
    @commethod(12)
    def InitializeEncode(self, Encoding: win32more.Windows.Win32.Security.Cryptography.Certificates.EncodingType, strKeyIdentifier: win32more.Windows.Win32.Foundation.BSTR) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(13)
    def InitializeDecode(self, Encoding: win32more.Windows.Win32.Security.Cryptography.Certificates.EncodingType, strEncodedData: win32more.Windows.Win32.Foundation.BSTR) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(14)
    def get_AuthorityKeyIdentifier(self, Encoding: win32more.Windows.Win32.Security.Cryptography.Certificates.EncodingType, pValue: POINTER(win32more.Windows.Win32.Foundation.BSTR)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
class IX509ExtensionBasicConstraints(ComPtr):
    extends: win32more.Windows.Win32.Security.Cryptography.Certificates.IX509Extension
    _iid_ = Guid('{728ab316-217d-11da-b2a4-000e7bbb2b09}')
    @commethod(12)
    def InitializeEncode(self, IsCA: win32more.Windows.Win32.Foundation.VARIANT_BOOL, PathLenConstraint: Int32) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(13)
    def InitializeDecode(self, Encoding: win32more.Windows.Win32.Security.Cryptography.Certificates.EncodingType, strEncodedData: win32more.Windows.Win32.Foundation.BSTR) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(14)
    def get_IsCA(self, pValue: POINTER(win32more.Windows.Win32.Foundation.VARIANT_BOOL)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(15)
    def get_PathLenConstraint(self, pValue: POINTER(Int32)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
class IX509ExtensionCertificatePolicies(ComPtr):
    extends: win32more.Windows.Win32.Security.Cryptography.Certificates.IX509Extension
    _iid_ = Guid('{728ab320-217d-11da-b2a4-000e7bbb2b09}')
    @commethod(12)
    def InitializeEncode(self, pValue: win32more.Windows.Win32.Security.Cryptography.Certificates.ICertificatePolicies) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(13)
    def InitializeDecode(self, Encoding: win32more.Windows.Win32.Security.Cryptography.Certificates.EncodingType, strEncodedData: win32more.Windows.Win32.Foundation.BSTR) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(14)
    def get_Policies(self, ppValue: POINTER(win32more.Windows.Win32.Security.Cryptography.Certificates.ICertificatePolicies)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
class IX509ExtensionEnhancedKeyUsage(ComPtr):
    extends: win32more.Windows.Win32.Security.Cryptography.Certificates.IX509Extension
    _iid_ = Guid('{728ab310-217d-11da-b2a4-000e7bbb2b09}')
    @commethod(12)
    def InitializeEncode(self, pValue: win32more.Windows.Win32.Security.Cryptography.Certificates.IObjectIds) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(13)
    def InitializeDecode(self, Encoding: win32more.Windows.Win32.Security.Cryptography.Certificates.EncodingType, strEncodedData: win32more.Windows.Win32.Foundation.BSTR) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(14)
    def get_EnhancedKeyUsage(self, ppValue: POINTER(win32more.Windows.Win32.Security.Cryptography.Certificates.IObjectIds)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
class IX509ExtensionKeyUsage(ComPtr):
    extends: win32more.Windows.Win32.Security.Cryptography.Certificates.IX509Extension
    _iid_ = Guid('{728ab30f-217d-11da-b2a4-000e7bbb2b09}')
    @commethod(12)
    def InitializeEncode(self, UsageFlags: win32more.Windows.Win32.Security.Cryptography.Certificates.X509KeyUsageFlags) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(13)
    def InitializeDecode(self, Encoding: win32more.Windows.Win32.Security.Cryptography.Certificates.EncodingType, strEncodedData: win32more.Windows.Win32.Foundation.BSTR) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(14)
    def get_KeyUsage(self, pValue: POINTER(win32more.Windows.Win32.Security.Cryptography.Certificates.X509KeyUsageFlags)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
class IX509ExtensionMSApplicationPolicies(ComPtr):
    extends: win32more.Windows.Win32.Security.Cryptography.Certificates.IX509Extension
    _iid_ = Guid('{728ab321-217d-11da-b2a4-000e7bbb2b09}')
    @commethod(12)
    def InitializeEncode(self, pValue: win32more.Windows.Win32.Security.Cryptography.Certificates.ICertificatePolicies) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(13)
    def InitializeDecode(self, Encoding: win32more.Windows.Win32.Security.Cryptography.Certificates.EncodingType, strEncodedData: win32more.Windows.Win32.Foundation.BSTR) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(14)
    def get_Policies(self, ppValue: POINTER(win32more.Windows.Win32.Security.Cryptography.Certificates.ICertificatePolicies)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
class IX509ExtensionSmimeCapabilities(ComPtr):
    extends: win32more.Windows.Win32.Security.Cryptography.Certificates.IX509Extension
    _iid_ = Guid('{728ab31b-217d-11da-b2a4-000e7bbb2b09}')
    @commethod(12)
    def InitializeEncode(self, pValue: win32more.Windows.Win32.Security.Cryptography.Certificates.ISmimeCapabilities) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(13)
    def InitializeDecode(self, Encoding: win32more.Windows.Win32.Security.Cryptography.Certificates.EncodingType, strEncodedData: win32more.Windows.Win32.Foundation.BSTR) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(14)
    def get_SmimeCapabilities(self, ppValue: POINTER(win32more.Windows.Win32.Security.Cryptography.Certificates.ISmimeCapabilities)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
class IX509ExtensionSubjectKeyIdentifier(ComPtr):
    extends: win32more.Windows.Win32.Security.Cryptography.Certificates.IX509Extension
    _iid_ = Guid('{728ab317-217d-11da-b2a4-000e7bbb2b09}')
    @commethod(12)
    def InitializeEncode(self, Encoding: win32more.Windows.Win32.Security.Cryptography.Certificates.EncodingType, strKeyIdentifier: win32more.Windows.Win32.Foundation.BSTR) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(13)
    def InitializeDecode(self, Encoding: win32more.Windows.Win32.Security.Cryptography.Certificates.EncodingType, strEncodedData: win32more.Windows.Win32.Foundation.BSTR) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(14)
    def get_SubjectKeyIdentifier(self, Encoding: win32more.Windows.Win32.Security.Cryptography.Certificates.EncodingType, pValue: POINTER(win32more.Windows.Win32.Foundation.BSTR)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
class IX509ExtensionTemplate(ComPtr):
    extends: win32more.Windows.Win32.Security.Cryptography.Certificates.IX509Extension
    _iid_ = Guid('{728ab312-217d-11da-b2a4-000e7bbb2b09}')
    @commethod(12)
    def InitializeEncode(self, pTemplateOid: win32more.Windows.Win32.Security.Cryptography.Certificates.IObjectId, MajorVersion: Int32, MinorVersion: Int32) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(13)
    def InitializeDecode(self, Encoding: win32more.Windows.Win32.Security.Cryptography.Certificates.EncodingType, strEncodedData: win32more.Windows.Win32.Foundation.BSTR) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(14)
    def get_TemplateOid(self, ppValue: POINTER(win32more.Windows.Win32.Security.Cryptography.Certificates.IObjectId)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(15)
    def get_MajorVersion(self, pValue: POINTER(Int32)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(16)
    def get_MinorVersion(self, pValue: POINTER(Int32)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
class IX509ExtensionTemplateName(ComPtr):
    extends: win32more.Windows.Win32.Security.Cryptography.Certificates.IX509Extension
    _iid_ = Guid('{728ab311-217d-11da-b2a4-000e7bbb2b09}')
    @commethod(12)
    def InitializeEncode(self, strTemplateName: win32more.Windows.Win32.Foundation.BSTR) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(13)
    def InitializeDecode(self, Encoding: win32more.Windows.Win32.Security.Cryptography.Certificates.EncodingType, strEncodedData: win32more.Windows.Win32.Foundation.BSTR) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(14)
    def get_TemplateName(self, pValue: POINTER(win32more.Windows.Win32.Foundation.BSTR)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
class IX509Extensions(ComPtr):
    extends: win32more.Windows.Win32.System.Com.IDispatch
    _iid_ = Guid('{728ab30e-217d-11da-b2a4-000e7bbb2b09}')
    @commethod(7)
    def get_ItemByIndex(self, Index: Int32, pVal: POINTER(win32more.Windows.Win32.Security.Cryptography.Certificates.IX509Extension)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(8)
    def get_Count(self, pVal: POINTER(Int32)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(9)
    def get__NewEnum(self, pVal: POINTER(win32more.Windows.Win32.System.Com.IUnknown)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(10)
    def Add(self, pVal: win32more.Windows.Win32.Security.Cryptography.Certificates.IX509Extension) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(11)
    def Remove(self, Index: Int32) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(12)
    def Clear(self) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(13)
    def get_IndexByObjectId(self, pObjectId: win32more.Windows.Win32.Security.Cryptography.Certificates.IObjectId, pIndex: POINTER(Int32)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(14)
    def AddRange(self, pValue: win32more.Windows.Win32.Security.Cryptography.Certificates.IX509Extensions) -> win32more.Windows.Win32.Foundation.HRESULT: ...
class IX509MachineEnrollmentFactory(ComPtr):
    extends: win32more.Windows.Win32.System.Com.IDispatch
    _iid_ = Guid('{728ab352-217d-11da-b2a4-000e7bbb2b09}')
    @commethod(7)
    def CreateObject(self, strProgID: win32more.Windows.Win32.Foundation.BSTR, ppIHelper: POINTER(win32more.Windows.Win32.Security.Cryptography.Certificates.IX509EnrollmentHelper)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
class IX509NameValuePair(ComPtr):
    extends: win32more.Windows.Win32.System.Com.IDispatch
    _iid_ = Guid('{728ab33f-217d-11da-b2a4-000e7bbb2b09}')
    @commethod(7)
    def Initialize(self, strName: win32more.Windows.Win32.Foundation.BSTR, strValue: win32more.Windows.Win32.Foundation.BSTR) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(8)
    def get_Value(self, pValue: POINTER(win32more.Windows.Win32.Foundation.BSTR)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(9)
    def get_Name(self, pValue: POINTER(win32more.Windows.Win32.Foundation.BSTR)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
class IX509NameValuePairs(ComPtr):
    extends: win32more.Windows.Win32.System.Com.IDispatch
    _iid_ = Guid('{728ab340-217d-11da-b2a4-000e7bbb2b09}')
    @commethod(7)
    def get_ItemByIndex(self, Index: Int32, pVal: POINTER(win32more.Windows.Win32.Security.Cryptography.Certificates.IX509NameValuePair)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(8)
    def get_Count(self, pVal: POINTER(Int32)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(9)
    def get__NewEnum(self, pVal: POINTER(win32more.Windows.Win32.System.Com.IUnknown)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(10)
    def Add(self, pVal: win32more.Windows.Win32.Security.Cryptography.Certificates.IX509NameValuePair) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(11)
    def Remove(self, Index: Int32) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(12)
    def Clear(self) -> win32more.Windows.Win32.Foundation.HRESULT: ...
class IX509PolicyServerListManager(ComPtr):
    extends: win32more.Windows.Win32.System.Com.IDispatch
    _iid_ = Guid('{884e204b-217d-11da-b2a4-000e7bbb2b09}')
    @commethod(7)
    def get_ItemByIndex(self, Index: Int32, pVal: POINTER(win32more.Windows.Win32.Security.Cryptography.Certificates.IX509PolicyServerUrl)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(8)
    def get_Count(self, pVal: POINTER(Int32)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(9)
    def get__NewEnum(self, pVal: POINTER(win32more.Windows.Win32.System.Com.IUnknown)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(10)
    def Add(self, pVal: win32more.Windows.Win32.Security.Cryptography.Certificates.IX509PolicyServerUrl) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(11)
    def Remove(self, Index: Int32) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(12)
    def Clear(self) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(13)
    def Initialize(self, context: win32more.Windows.Win32.Security.Cryptography.Certificates.X509CertificateEnrollmentContext, Flags: win32more.Windows.Win32.Security.Cryptography.Certificates.PolicyServerUrlFlags) -> win32more.Windows.Win32.Foundation.HRESULT: ...
class IX509PolicyServerUrl(ComPtr):
    extends: win32more.Windows.Win32.System.Com.IDispatch
    _iid_ = Guid('{884e204a-217d-11da-b2a4-000e7bbb2b09}')
    @commethod(7)
    def Initialize(self, context: win32more.Windows.Win32.Security.Cryptography.Certificates.X509CertificateEnrollmentContext) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(8)
    def get_Url(self, ppValue: POINTER(win32more.Windows.Win32.Foundation.BSTR)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(9)
    def put_Url(self, pValue: win32more.Windows.Win32.Foundation.BSTR) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(10)
    def get_Default(self, pValue: POINTER(win32more.Windows.Win32.Foundation.VARIANT_BOOL)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(11)
    def put_Default(self, value: win32more.Windows.Win32.Foundation.VARIANT_BOOL) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(12)
    def get_Flags(self, pValue: POINTER(win32more.Windows.Win32.Security.Cryptography.Certificates.PolicyServerUrlFlags)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(13)
    def put_Flags(self, Flags: win32more.Windows.Win32.Security.Cryptography.Certificates.PolicyServerUrlFlags) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(14)
    def get_AuthFlags(self, pValue: POINTER(win32more.Windows.Win32.Security.Cryptography.Certificates.X509EnrollmentAuthFlags)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(15)
    def put_AuthFlags(self, Flags: win32more.Windows.Win32.Security.Cryptography.Certificates.X509EnrollmentAuthFlags) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(16)
    def get_Cost(self, pValue: POINTER(UInt32)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(17)
    def put_Cost(self, value: UInt32) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(18)
    def GetStringProperty(self, propertyId: win32more.Windows.Win32.Security.Cryptography.Certificates.PolicyServerUrlPropertyID, ppValue: POINTER(win32more.Windows.Win32.Foundation.BSTR)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(19)
    def SetStringProperty(self, propertyId: win32more.Windows.Win32.Security.Cryptography.Certificates.PolicyServerUrlPropertyID, pValue: win32more.Windows.Win32.Foundation.BSTR) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(20)
    def UpdateRegistry(self, context: win32more.Windows.Win32.Security.Cryptography.Certificates.X509CertificateEnrollmentContext) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(21)
    def RemoveFromRegistry(self, context: win32more.Windows.Win32.Security.Cryptography.Certificates.X509CertificateEnrollmentContext) -> win32more.Windows.Win32.Foundation.HRESULT: ...
class IX509PrivateKey(ComPtr):
    extends: win32more.Windows.Win32.System.Com.IDispatch
    _iid_ = Guid('{728ab30c-217d-11da-b2a4-000e7bbb2b09}')
    @commethod(7)
    def Open(self) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(8)
    def Create(self) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(9)
    def Close(self) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(10)
    def Delete(self) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(11)
    def Verify(self, VerifyType: win32more.Windows.Win32.Security.Cryptography.Certificates.X509PrivateKeyVerify) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(12)
    def Import(self, strExportType: win32more.Windows.Win32.Foundation.BSTR, strEncodedKey: win32more.Windows.Win32.Foundation.BSTR, Encoding: win32more.Windows.Win32.Security.Cryptography.Certificates.EncodingType) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(13)
    def Export(self, strExportType: win32more.Windows.Win32.Foundation.BSTR, Encoding: win32more.Windows.Win32.Security.Cryptography.Certificates.EncodingType, pstrEncodedKey: POINTER(win32more.Windows.Win32.Foundation.BSTR)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(14)
    def ExportPublicKey(self, ppPublicKey: POINTER(win32more.Windows.Win32.Security.Cryptography.Certificates.IX509PublicKey)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(15)
    def get_ContainerName(self, pValue: POINTER(win32more.Windows.Win32.Foundation.BSTR)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(16)
    def put_ContainerName(self, Value: win32more.Windows.Win32.Foundation.BSTR) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(17)
    def get_ContainerNamePrefix(self, pValue: POINTER(win32more.Windows.Win32.Foundation.BSTR)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(18)
    def put_ContainerNamePrefix(self, Value: win32more.Windows.Win32.Foundation.BSTR) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(19)
    def get_ReaderName(self, pValue: POINTER(win32more.Windows.Win32.Foundation.BSTR)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(20)
    def put_ReaderName(self, Value: win32more.Windows.Win32.Foundation.BSTR) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(21)
    def get_CspInformations(self, ppValue: POINTER(win32more.Windows.Win32.Security.Cryptography.Certificates.ICspInformations)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(22)
    def put_CspInformations(self, pValue: win32more.Windows.Win32.Security.Cryptography.Certificates.ICspInformations) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(23)
    def get_CspStatus(self, ppValue: POINTER(win32more.Windows.Win32.Security.Cryptography.Certificates.ICspStatus)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(24)
    def put_CspStatus(self, pValue: win32more.Windows.Win32.Security.Cryptography.Certificates.ICspStatus) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(25)
    def get_ProviderName(self, pValue: POINTER(win32more.Windows.Win32.Foundation.BSTR)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(26)
    def put_ProviderName(self, Value: win32more.Windows.Win32.Foundation.BSTR) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(27)
    def get_ProviderType(self, pValue: POINTER(win32more.Windows.Win32.Security.Cryptography.Certificates.X509ProviderType)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(28)
    def put_ProviderType(self, Value: win32more.Windows.Win32.Security.Cryptography.Certificates.X509ProviderType) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(29)
    def get_LegacyCsp(self, pValue: POINTER(win32more.Windows.Win32.Foundation.VARIANT_BOOL)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(30)
    def put_LegacyCsp(self, Value: win32more.Windows.Win32.Foundation.VARIANT_BOOL) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(31)
    def get_Algorithm(self, ppValue: POINTER(win32more.Windows.Win32.Security.Cryptography.Certificates.IObjectId)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(32)
    def put_Algorithm(self, pValue: win32more.Windows.Win32.Security.Cryptography.Certificates.IObjectId) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(33)
    def get_KeySpec(self, pValue: POINTER(win32more.Windows.Win32.Security.Cryptography.Certificates.X509KeySpec)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(34)
    def put_KeySpec(self, Value: win32more.Windows.Win32.Security.Cryptography.Certificates.X509KeySpec) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(35)
    def get_Length(self, pValue: POINTER(Int32)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(36)
    def put_Length(self, Value: Int32) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(37)
    def get_ExportPolicy(self, pValue: POINTER(win32more.Windows.Win32.Security.Cryptography.Certificates.X509PrivateKeyExportFlags)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(38)
    def put_ExportPolicy(self, Value: win32more.Windows.Win32.Security.Cryptography.Certificates.X509PrivateKeyExportFlags) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(39)
    def get_KeyUsage(self, pValue: POINTER(win32more.Windows.Win32.Security.Cryptography.Certificates.X509PrivateKeyUsageFlags)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(40)
    def put_KeyUsage(self, Value: win32more.Windows.Win32.Security.Cryptography.Certificates.X509PrivateKeyUsageFlags) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(41)
    def get_KeyProtection(self, pValue: POINTER(win32more.Windows.Win32.Security.Cryptography.Certificates.X509PrivateKeyProtection)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(42)
    def put_KeyProtection(self, Value: win32more.Windows.Win32.Security.Cryptography.Certificates.X509PrivateKeyProtection) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(43)
    def get_MachineContext(self, pValue: POINTER(win32more.Windows.Win32.Foundation.VARIANT_BOOL)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(44)
    def put_MachineContext(self, Value: win32more.Windows.Win32.Foundation.VARIANT_BOOL) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(45)
    def get_SecurityDescriptor(self, pValue: POINTER(win32more.Windows.Win32.Foundation.BSTR)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(46)
    def put_SecurityDescriptor(self, Value: win32more.Windows.Win32.Foundation.BSTR) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(47)
    def get_Certificate(self, Encoding: win32more.Windows.Win32.Security.Cryptography.Certificates.EncodingType, pValue: POINTER(win32more.Windows.Win32.Foundation.BSTR)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(48)
    def put_Certificate(self, Encoding: win32more.Windows.Win32.Security.Cryptography.Certificates.EncodingType, Value: win32more.Windows.Win32.Foundation.BSTR) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(49)
    def get_UniqueContainerName(self, pValue: POINTER(win32more.Windows.Win32.Foundation.BSTR)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(50)
    def get_Opened(self, pValue: POINTER(win32more.Windows.Win32.Foundation.VARIANT_BOOL)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(51)
    def get_DefaultContainer(self, pValue: POINTER(win32more.Windows.Win32.Foundation.VARIANT_BOOL)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(52)
    def get_Existing(self, pValue: POINTER(win32more.Windows.Win32.Foundation.VARIANT_BOOL)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(53)
    def put_Existing(self, Value: win32more.Windows.Win32.Foundation.VARIANT_BOOL) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(54)
    def get_Silent(self, pValue: POINTER(win32more.Windows.Win32.Foundation.VARIANT_BOOL)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(55)
    def put_Silent(self, Value: win32more.Windows.Win32.Foundation.VARIANT_BOOL) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(56)
    def get_ParentWindow(self, pValue: POINTER(Int32)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(57)
    def put_ParentWindow(self, Value: Int32) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(58)
    def get_UIContextMessage(self, pValue: POINTER(win32more.Windows.Win32.Foundation.BSTR)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(59)
    def put_UIContextMessage(self, Value: win32more.Windows.Win32.Foundation.BSTR) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(60)
    def put_Pin(self, Value: win32more.Windows.Win32.Foundation.BSTR) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(61)
    def get_FriendlyName(self, pValue: POINTER(win32more.Windows.Win32.Foundation.BSTR)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(62)
    def put_FriendlyName(self, Value: win32more.Windows.Win32.Foundation.BSTR) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(63)
    def get_Description(self, pValue: POINTER(win32more.Windows.Win32.Foundation.BSTR)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(64)
    def put_Description(self, Value: win32more.Windows.Win32.Foundation.BSTR) -> win32more.Windows.Win32.Foundation.HRESULT: ...
class IX509PrivateKey2(ComPtr):
    extends: win32more.Windows.Win32.Security.Cryptography.Certificates.IX509PrivateKey
    _iid_ = Guid('{728ab362-217d-11da-b2a4-000e7bbb2b09}')
    @commethod(65)
    def get_HardwareKeyUsage(self, pValue: POINTER(win32more.Windows.Win32.Security.Cryptography.Certificates.X509HardwareKeyUsageFlags)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(66)
    def put_HardwareKeyUsage(self, Value: win32more.Windows.Win32.Security.Cryptography.Certificates.X509HardwareKeyUsageFlags) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(67)
    def get_AlternateStorageLocation(self, pValue: POINTER(win32more.Windows.Win32.Foundation.BSTR)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(68)
    def put_AlternateStorageLocation(self, Value: win32more.Windows.Win32.Foundation.BSTR) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(69)
    def get_AlgorithmName(self, pValue: POINTER(win32more.Windows.Win32.Foundation.BSTR)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(70)
    def put_AlgorithmName(self, Value: win32more.Windows.Win32.Foundation.BSTR) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(71)
    def get_AlgorithmParameters(self, Encoding: win32more.Windows.Win32.Security.Cryptography.Certificates.EncodingType, pValue: POINTER(win32more.Windows.Win32.Foundation.BSTR)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(72)
    def put_AlgorithmParameters(self, Encoding: win32more.Windows.Win32.Security.Cryptography.Certificates.EncodingType, Value: win32more.Windows.Win32.Foundation.BSTR) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(73)
    def get_ParametersExportType(self, pValue: POINTER(win32more.Windows.Win32.Security.Cryptography.Certificates.X509KeyParametersExportType)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(74)
    def put_ParametersExportType(self, Value: win32more.Windows.Win32.Security.Cryptography.Certificates.X509KeyParametersExportType) -> win32more.Windows.Win32.Foundation.HRESULT: ...
class IX509PublicKey(ComPtr):
    extends: win32more.Windows.Win32.System.Com.IDispatch
    _iid_ = Guid('{728ab30b-217d-11da-b2a4-000e7bbb2b09}')
    @commethod(7)
    def Initialize(self, pObjectId: win32more.Windows.Win32.Security.Cryptography.Certificates.IObjectId, strEncodedKey: win32more.Windows.Win32.Foundation.BSTR, strEncodedParameters: win32more.Windows.Win32.Foundation.BSTR, Encoding: win32more.Windows.Win32.Security.Cryptography.Certificates.EncodingType) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(8)
    def InitializeFromEncodedPublicKeyInfo(self, strEncodedPublicKeyInfo: win32more.Windows.Win32.Foundation.BSTR, Encoding: win32more.Windows.Win32.Security.Cryptography.Certificates.EncodingType) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(9)
    def get_Algorithm(self, ppValue: POINTER(win32more.Windows.Win32.Security.Cryptography.Certificates.IObjectId)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(10)
    def get_Length(self, pValue: POINTER(Int32)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(11)
    def get_EncodedKey(self, Encoding: win32more.Windows.Win32.Security.Cryptography.Certificates.EncodingType, pValue: POINTER(win32more.Windows.Win32.Foundation.BSTR)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(12)
    def get_EncodedParameters(self, Encoding: win32more.Windows.Win32.Security.Cryptography.Certificates.EncodingType, pValue: POINTER(win32more.Windows.Win32.Foundation.BSTR)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(13)
    def ComputeKeyIdentifier(self, Algorithm: win32more.Windows.Win32.Security.Cryptography.Certificates.KeyIdentifierHashAlgorithm, Encoding: win32more.Windows.Win32.Security.Cryptography.Certificates.EncodingType, pValue: POINTER(win32more.Windows.Win32.Foundation.BSTR)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
class IX509SCEPEnrollment(ComPtr):
    extends: win32more.Windows.Win32.System.Com.IDispatch
    _iid_ = Guid('{728ab361-217d-11da-b2a4-000e7bbb2b09}')
    @commethod(7)
    def Initialize(self, pRequest: win32more.Windows.Win32.Security.Cryptography.Certificates.IX509CertificateRequestPkcs10, strThumbprint: win32more.Windows.Win32.Foundation.BSTR, ThumprintEncoding: win32more.Windows.Win32.Security.Cryptography.Certificates.EncodingType, strServerCertificates: win32more.Windows.Win32.Foundation.BSTR, Encoding: win32more.Windows.Win32.Security.Cryptography.Certificates.EncodingType) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(8)
    def InitializeForPending(self, Context: win32more.Windows.Win32.Security.Cryptography.Certificates.X509CertificateEnrollmentContext) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(9)
    def CreateRequestMessage(self, Encoding: win32more.Windows.Win32.Security.Cryptography.Certificates.EncodingType, pValue: POINTER(win32more.Windows.Win32.Foundation.BSTR)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(10)
    def CreateRetrievePendingMessage(self, Encoding: win32more.Windows.Win32.Security.Cryptography.Certificates.EncodingType, pValue: POINTER(win32more.Windows.Win32.Foundation.BSTR)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(11)
    def CreateRetrieveCertificateMessage(self, Context: win32more.Windows.Win32.Security.Cryptography.Certificates.X509CertificateEnrollmentContext, strIssuer: win32more.Windows.Win32.Foundation.BSTR, IssuerEncoding: win32more.Windows.Win32.Security.Cryptography.Certificates.EncodingType, strSerialNumber: win32more.Windows.Win32.Foundation.BSTR, SerialNumberEncoding: win32more.Windows.Win32.Security.Cryptography.Certificates.EncodingType, Encoding: win32more.Windows.Win32.Security.Cryptography.Certificates.EncodingType, pValue: POINTER(win32more.Windows.Win32.Foundation.BSTR)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(12)
    def ProcessResponseMessage(self, strResponse: win32more.Windows.Win32.Foundation.BSTR, Encoding: win32more.Windows.Win32.Security.Cryptography.Certificates.EncodingType, pDisposition: POINTER(win32more.Windows.Win32.Security.Cryptography.Certificates.X509SCEPDisposition)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(13)
    def put_ServerCapabilities(self, Value: win32more.Windows.Win32.Foundation.BSTR) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(14)
    def get_FailInfo(self, pValue: POINTER(win32more.Windows.Win32.Security.Cryptography.Certificates.X509SCEPFailInfo)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(15)
    def get_SignerCertificate(self, ppValue: POINTER(win32more.Windows.Win32.Security.Cryptography.Certificates.ISignerCertificate)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(16)
    def put_SignerCertificate(self, pValue: win32more.Windows.Win32.Security.Cryptography.Certificates.ISignerCertificate) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(17)
    def get_OldCertificate(self, ppValue: POINTER(win32more.Windows.Win32.Security.Cryptography.Certificates.ISignerCertificate)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(18)
    def put_OldCertificate(self, pValue: win32more.Windows.Win32.Security.Cryptography.Certificates.ISignerCertificate) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(19)
    def get_TransactionId(self, Encoding: win32more.Windows.Win32.Security.Cryptography.Certificates.EncodingType, pValue: POINTER(win32more.Windows.Win32.Foundation.BSTR)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(20)
    def put_TransactionId(self, Encoding: win32more.Windows.Win32.Security.Cryptography.Certificates.EncodingType, Value: win32more.Windows.Win32.Foundation.BSTR) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(21)
    def get_Request(self, ppValue: POINTER(win32more.Windows.Win32.Security.Cryptography.Certificates.IX509CertificateRequestPkcs10)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(22)
    def get_CertificateFriendlyName(self, pValue: POINTER(win32more.Windows.Win32.Foundation.BSTR)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(23)
    def put_CertificateFriendlyName(self, Value: win32more.Windows.Win32.Foundation.BSTR) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(24)
    def get_Status(self, ppValue: POINTER(win32more.Windows.Win32.Security.Cryptography.Certificates.IX509EnrollmentStatus)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(25)
    def get_Certificate(self, Encoding: win32more.Windows.Win32.Security.Cryptography.Certificates.EncodingType, pValue: POINTER(win32more.Windows.Win32.Foundation.BSTR)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(26)
    def get_Silent(self, pValue: POINTER(win32more.Windows.Win32.Foundation.VARIANT_BOOL)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(27)
    def put_Silent(self, Value: win32more.Windows.Win32.Foundation.VARIANT_BOOL) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(28)
    def DeleteRequest(self) -> win32more.Windows.Win32.Foundation.HRESULT: ...
class IX509SCEPEnrollment2(ComPtr):
    extends: win32more.Windows.Win32.Security.Cryptography.Certificates.IX509SCEPEnrollment
    _iid_ = Guid('{728ab364-217d-11da-b2a4-000e7bbb2b09}')
    @commethod(29)
    def CreateChallengeAnswerMessage(self, Encoding: win32more.Windows.Win32.Security.Cryptography.Certificates.EncodingType, pValue: POINTER(win32more.Windows.Win32.Foundation.BSTR)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(30)
    def ProcessResponseMessage2(self, Flags: win32more.Windows.Win32.Security.Cryptography.Certificates.X509SCEPProcessMessageFlags, strResponse: win32more.Windows.Win32.Foundation.BSTR, Encoding: win32more.Windows.Win32.Security.Cryptography.Certificates.EncodingType, pDisposition: POINTER(win32more.Windows.Win32.Security.Cryptography.Certificates.X509SCEPDisposition)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(31)
    def get_ResultMessageText(self, pValue: POINTER(win32more.Windows.Win32.Foundation.BSTR)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(32)
    def get_DelayRetry(self, pValue: POINTER(win32more.Windows.Win32.Security.Cryptography.Certificates.DelayRetryAction)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(33)
    def get_ActivityId(self, pValue: POINTER(win32more.Windows.Win32.Foundation.BSTR)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(34)
    def put_ActivityId(self, Value: win32more.Windows.Win32.Foundation.BSTR) -> win32more.Windows.Win32.Foundation.HRESULT: ...
class IX509SCEPEnrollmentHelper(ComPtr):
    extends: win32more.Windows.Win32.System.Com.IDispatch
    _iid_ = Guid('{728ab365-217d-11da-b2a4-000e7bbb2b09}')
    @commethod(7)
    def Initialize(self, strServerUrl: win32more.Windows.Win32.Foundation.BSTR, strRequestHeaders: win32more.Windows.Win32.Foundation.BSTR, pRequest: win32more.Windows.Win32.Security.Cryptography.Certificates.IX509CertificateRequestPkcs10, strCACertificateThumbprint: win32more.Windows.Win32.Foundation.BSTR) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(8)
    def InitializeForPending(self, strServerUrl: win32more.Windows.Win32.Foundation.BSTR, strRequestHeaders: win32more.Windows.Win32.Foundation.BSTR, Context: win32more.Windows.Win32.Security.Cryptography.Certificates.X509CertificateEnrollmentContext, strTransactionId: win32more.Windows.Win32.Foundation.BSTR) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(9)
    def Enroll(self, ProcessFlags: win32more.Windows.Win32.Security.Cryptography.Certificates.X509SCEPProcessMessageFlags, pDisposition: POINTER(win32more.Windows.Win32.Security.Cryptography.Certificates.X509SCEPDisposition)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(10)
    def FetchPending(self, ProcessFlags: win32more.Windows.Win32.Security.Cryptography.Certificates.X509SCEPProcessMessageFlags, pDisposition: POINTER(win32more.Windows.Win32.Security.Cryptography.Certificates.X509SCEPDisposition)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(11)
    def get_X509SCEPEnrollment(self, ppValue: POINTER(win32more.Windows.Win32.Security.Cryptography.Certificates.IX509SCEPEnrollment)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(12)
    def get_ResultMessageText(self, pValue: POINTER(win32more.Windows.Win32.Foundation.BSTR)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
class IX509SignatureInformation(ComPtr):
    extends: win32more.Windows.Win32.System.Com.IDispatch
    _iid_ = Guid('{728ab33c-217d-11da-b2a4-000e7bbb2b09}')
    @commethod(7)
    def get_HashAlgorithm(self, ppValue: POINTER(win32more.Windows.Win32.Security.Cryptography.Certificates.IObjectId)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(8)
    def put_HashAlgorithm(self, pValue: win32more.Windows.Win32.Security.Cryptography.Certificates.IObjectId) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(9)
    def get_PublicKeyAlgorithm(self, ppValue: POINTER(win32more.Windows.Win32.Security.Cryptography.Certificates.IObjectId)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(10)
    def put_PublicKeyAlgorithm(self, pValue: win32more.Windows.Win32.Security.Cryptography.Certificates.IObjectId) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(11)
    def get_Parameters(self, Encoding: win32more.Windows.Win32.Security.Cryptography.Certificates.EncodingType, pValue: POINTER(win32more.Windows.Win32.Foundation.BSTR)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(12)
    def put_Parameters(self, Encoding: win32more.Windows.Win32.Security.Cryptography.Certificates.EncodingType, Value: win32more.Windows.Win32.Foundation.BSTR) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(13)
    def get_AlternateSignatureAlgorithm(self, pValue: POINTER(win32more.Windows.Win32.Foundation.VARIANT_BOOL)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(14)
    def put_AlternateSignatureAlgorithm(self, Value: win32more.Windows.Win32.Foundation.VARIANT_BOOL) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(15)
    def get_AlternateSignatureAlgorithmSet(self, pValue: POINTER(win32more.Windows.Win32.Foundation.VARIANT_BOOL)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(16)
    def get_NullSigned(self, pValue: POINTER(win32more.Windows.Win32.Foundation.VARIANT_BOOL)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(17)
    def put_NullSigned(self, Value: win32more.Windows.Win32.Foundation.VARIANT_BOOL) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(18)
    def GetSignatureAlgorithm(self, Pkcs7Signature: win32more.Windows.Win32.Foundation.VARIANT_BOOL, SignatureKey: win32more.Windows.Win32.Foundation.VARIANT_BOOL, ppValue: POINTER(win32more.Windows.Win32.Security.Cryptography.Certificates.IObjectId)) -> win32more.Windows.Win32.Foundation.HRESULT: ...
    @commethod(19)
    def SetDefaultValues(self) -> win32more.Windows.Win32.Foundation.HRESULT: ...
ImportPFXFlags = Int32
ImportNone: win32more.Windows.Win32.Security.Cryptography.Certificates.ImportPFXFlags = 0
ImportMachineContext: win32more.Windows.Win32.Security.Cryptography.Certificates.ImportPFXFlags = 1
ImportForceOverwrite: win32more.Windows.Win32.Security.Cryptography.Certificates.ImportPFXFlags = 2
ImportSilent: win32more.Windows.Win32.Security.Cryptography.Certificates.ImportPFXFlags = 4
ImportSaveProperties: win32more.Windows.Win32.Security.Cryptography.Certificates.ImportPFXFlags = 8
ImportExportable: win32more.Windows.Win32.Security.Cryptography.Certificates.ImportPFXFlags = 16
ImportExportableEncrypted: win32more.Windows.Win32.Security.Cryptography.Certificates.ImportPFXFlags = 32
ImportNoUserProtected: win32more.Windows.Win32.Security.Cryptography.Certificates.ImportPFXFlags = 64
ImportUserProtected: win32more.Windows.Win32.Security.Cryptography.Certificates.ImportPFXFlags = 128
ImportUserProtectedHigh: win32more.Windows.Win32.Security.Cryptography.Certificates.ImportPFXFlags = 256
ImportInstallCertificate: win32more.Windows.Win32.Security.Cryptography.Certificates.ImportPFXFlags = 512
ImportInstallChain: win32more.Windows.Win32.Security.Cryptography.Certificates.ImportPFXFlags = 1024
ImportInstallChainAndRoot: win32more.Windows.Win32.Security.Cryptography.Certificates.ImportPFXFlags = 2048
InnerRequestLevel = Int32
LevelInnermost: win32more.Windows.Win32.Security.Cryptography.Certificates.InnerRequestLevel = 0
LevelNext: win32more.Windows.Win32.Security.Cryptography.Certificates.InnerRequestLevel = 1
InstallResponseRestrictionFlags = Int32
AllowNone: win32more.Windows.Win32.Security.Cryptography.Certificates.InstallResponseRestrictionFlags = 0
AllowNoOutstandingRequest: win32more.Windows.Win32.Security.Cryptography.Certificates.InstallResponseRestrictionFlags = 1
AllowUntrustedCertificate: win32more.Windows.Win32.Security.Cryptography.Certificates.InstallResponseRestrictionFlags = 2
AllowUntrustedRoot: win32more.Windows.Win32.Security.Cryptography.Certificates.InstallResponseRestrictionFlags = 4
KeyAttestationClaimType = Int32
XCN_NCRYPT_CLAIM_NONE: win32more.Windows.Win32.Security.Cryptography.Certificates.KeyAttestationClaimType = 0
XCN_NCRYPT_CLAIM_AUTHORITY_AND_SUBJECT: win32more.Windows.Win32.Security.Cryptography.Certificates.KeyAttestationClaimType = 3
XCN_NCRYPT_CLAIM_AUTHORITY_ONLY: win32more.Windows.Win32.Security.Cryptography.Certificates.KeyAttestationClaimType = 1
XCN_NCRYPT_CLAIM_SUBJECT_ONLY: win32more.Windows.Win32.Security.Cryptography.Certificates.KeyAttestationClaimType = 2
XCN_NCRYPT_CLAIM_UNKNOWN: win32more.Windows.Win32.Security.Cryptography.Certificates.KeyAttestationClaimType = 4096
KeyIdentifierHashAlgorithm = Int32
SKIHashDefault: win32more.Windows.Win32.Security.Cryptography.Certificates.KeyIdentifierHashAlgorithm = 0
SKIHashSha1: win32more.Windows.Win32.Security.Cryptography.Certificates.KeyIdentifierHashAlgorithm = 1
SKIHashCapiSha1: win32more.Windows.Win32.Security.Cryptography.Certificates.KeyIdentifierHashAlgorithm = 2
SKIHashSha256: win32more.Windows.Win32.Security.Cryptography.Certificates.KeyIdentifierHashAlgorithm = 3
SKIHashHPKP: win32more.Windows.Win32.Security.Cryptography.Certificates.KeyIdentifierHashAlgorithm = 5
OCSPAdmin = Guid('{d3f73511-92c9-47cb-8ff2-8d891a7c4de4}')
OCSPPropertyCollection = Guid('{f935a528-ba8a-4dd9-ba79-f283275cb2de}')
OCSPRequestFlag = Int32
OCSP_RF_REJECT_SIGNED_REQUESTS: win32more.Windows.Win32.Security.Cryptography.Certificates.OCSPRequestFlag = 1
OCSPSigningFlag = Int32
OCSP_SF_SILENT: win32more.Windows.Win32.Security.Cryptography.Certificates.OCSPSigningFlag = 1
OCSP_SF_USE_CACERT: win32more.Windows.Win32.Security.Cryptography.Certificates.OCSPSigningFlag = 2
OCSP_SF_ALLOW_SIGNINGCERT_AUTORENEWAL: win32more.Windows.Win32.Security.Cryptography.Certificates.OCSPSigningFlag = 4
OCSP_SF_FORCE_SIGNINGCERT_ISSUER_ISCA: win32more.Windows.Win32.Security.Cryptography.Certificates.OCSPSigningFlag = 8
OCSP_SF_AUTODISCOVER_SIGNINGCERT: win32more.Windows.Win32.Security.Cryptography.Certificates.OCSPSigningFlag = 16
OCSP_SF_MANUAL_ASSIGN_SIGNINGCERT: win32more.Windows.Win32.Security.Cryptography.Certificates.OCSPSigningFlag = 32
OCSP_SF_RESPONDER_ID_KEYHASH: win32more.Windows.Win32.Security.Cryptography.Certificates.OCSPSigningFlag = 64
OCSP_SF_RESPONDER_ID_NAME: win32more.Windows.Win32.Security.Cryptography.Certificates.OCSPSigningFlag = 128
OCSP_SF_ALLOW_NONCE_EXTENSION: win32more.Windows.Win32.Security.Cryptography.Certificates.OCSPSigningFlag = 256
OCSP_SF_ALLOW_SIGNINGCERT_AUTOENROLLMENT: win32more.Windows.Win32.Security.Cryptography.Certificates.OCSPSigningFlag = 512
ObjectIdGroupId = Int32
XCN_CRYPT_ANY_GROUP_ID: win32more.Windows.Win32.Security.Cryptography.Certificates.ObjectIdGroupId = 0
XCN_CRYPT_HASH_ALG_OID_GROUP_ID: win32more.Windows.Win32.Security.Cryptography.Certificates.ObjectIdGroupId = 1
XCN_CRYPT_ENCRYPT_ALG_OID_GROUP_ID: win32more.Windows.Win32.Security.Cryptography.Certificates.ObjectIdGroupId = 2
XCN_CRYPT_PUBKEY_ALG_OID_GROUP_ID: win32more.Windows.Win32.Security.Cryptography.Certificates.ObjectIdGroupId = 3
XCN_CRYPT_SIGN_ALG_OID_GROUP_ID: win32more.Windows.Win32.Security.Cryptography.Certificates.ObjectIdGroupId = 4
XCN_CRYPT_RDN_ATTR_OID_GROUP_ID: win32more.Windows.Win32.Security.Cryptography.Certificates.ObjectIdGroupId = 5
XCN_CRYPT_EXT_OR_ATTR_OID_GROUP_ID: win32more.Windows.Win32.Security.Cryptography.Certificates.ObjectIdGroupId = 6
XCN_CRYPT_ENHKEY_USAGE_OID_GROUP_ID: win32more.Windows.Win32.Security.Cryptography.Certificates.ObjectIdGroupId = 7
XCN_CRYPT_POLICY_OID_GROUP_ID: win32more.Windows.Win32.Security.Cryptography.Certificates.ObjectIdGroupId = 8
XCN_CRYPT_TEMPLATE_OID_GROUP_ID: win32more.Windows.Win32.Security.Cryptography.Certificates.ObjectIdGroupId = 9
XCN_CRYPT_KDF_OID_GROUP_ID: win32more.Windows.Win32.Security.Cryptography.Certificates.ObjectIdGroupId = 10
XCN_CRYPT_LAST_OID_GROUP_ID: win32more.Windows.Win32.Security.Cryptography.Certificates.ObjectIdGroupId = 10
XCN_CRYPT_FIRST_ALG_OID_GROUP_ID: win32more.Windows.Win32.Security.Cryptography.Certificates.ObjectIdGroupId = 1
XCN_CRYPT_LAST_ALG_OID_GROUP_ID: win32more.Windows.Win32.Security.Cryptography.Certificates.ObjectIdGroupId = 4
XCN_CRYPT_GROUP_ID_MASK: win32more.Windows.Win32.Security.Cryptography.Certificates.ObjectIdGroupId = 65535
XCN_CRYPT_OID_PREFER_CNG_ALGID_FLAG: win32more.Windows.Win32.Security.Cryptography.Certificates.ObjectIdGroupId = 1073741824
XCN_CRYPT_OID_DISABLE_SEARCH_DS_FLAG: win32more.Windows.Win32.Security.Cryptography.Certificates.ObjectIdGroupId = -2147483648
XCN_CRYPT_OID_INFO_OID_GROUP_BIT_LEN_MASK: win32more.Windows.Win32.Security.Cryptography.Certificates.ObjectIdGroupId = 268369920
XCN_CRYPT_OID_INFO_OID_GROUP_BIT_LEN_SHIFT: win32more.Windows.Win32.Security.Cryptography.Certificates.ObjectIdGroupId = 16
XCN_CRYPT_KEY_LENGTH_MASK: win32more.Windows.Win32.Security.Cryptography.Certificates.ObjectIdGroupId = 268369920
ObjectIdPublicKeyFlags = Int32
XCN_CRYPT_OID_INFO_PUBKEY_ANY: win32more.Windows.Win32.Security.Cryptography.Certificates.ObjectIdPublicKeyFlags = 0
XCN_CRYPT_OID_INFO_PUBKEY_SIGN_KEY_FLAG: win32more.Windows.Win32.Security.Cryptography.Certificates.ObjectIdPublicKeyFlags = -2147483648
XCN_CRYPT_OID_INFO_PUBKEY_ENCRYPT_KEY_FLAG: win32more.Windows.Win32.Security.Cryptography.Certificates.ObjectIdPublicKeyFlags = 1073741824
PENDING_REQUEST_DESIRED_PROPERTY = Int32
XEPR_CADNS: win32more.Windows.Win32.Security.Cryptography.Certificates.PENDING_REQUEST_DESIRED_PROPERTY = 1
XEPR_CAFRIENDLYNAME: win32more.Windows.Win32.Security.Cryptography.Certificates.PENDING_REQUEST_DESIRED_PROPERTY = 3
XEPR_CANAME: win32more.Windows.Win32.Security.Cryptography.Certificates.PENDING_REQUEST_DESIRED_PROPERTY = 2
XEPR_HASH: win32more.Windows.Win32.Security.Cryptography.Certificates.PENDING_REQUEST_DESIRED_PROPERTY = 8
XEPR_REQUESTID: win32more.Windows.Win32.Security.Cryptography.Certificates.PENDING_REQUEST_DESIRED_PROPERTY = 4
PFXExportOptions = Int32
PFXExportEEOnly: win32more.Windows.Win32.Security.Cryptography.Certificates.PFXExportOptions = 0
PFXExportChainNoRoot: win32more.Windows.Win32.Security.Cryptography.Certificates.PFXExportOptions = 1
PFXExportChainWithRoot: win32more.Windows.Win32.Security.Cryptography.Certificates.PFXExportOptions = 2
Pkcs10AllowedSignatureTypes = Int32
AllowedKeySignature: win32more.Windows.Win32.Security.Cryptography.Certificates.Pkcs10AllowedSignatureTypes = 1
AllowedNullSignature: win32more.Windows.Win32.Security.Cryptography.Certificates.Pkcs10AllowedSignatureTypes = 2
PolicyQualifierType = Int32
PolicyQualifierTypeUnknown: win32more.Windows.Win32.Security.Cryptography.Certificates.PolicyQualifierType = 0
PolicyQualifierTypeUrl: win32more.Windows.Win32.Security.Cryptography.Certificates.PolicyQualifierType = 1
PolicyQualifierTypeUserNotice: win32more.Windows.Win32.Security.Cryptography.Certificates.PolicyQualifierType = 2
PolicyQualifierTypeFlags: win32more.Windows.Win32.Security.Cryptography.Certificates.PolicyQualifierType = 3
PolicyServerUrlFlags = Int32
PsfNone: win32more.Windows.Win32.Security.Cryptography.Certificates.PolicyServerUrlFlags = 0
PsfLocationGroupPolicy: win32more.Windows.Win32.Security.Cryptography.Certificates.PolicyServerUrlFlags = 1
PsfLocationRegistry: win32more.Windows.Win32.Security.Cryptography.Certificates.PolicyServerUrlFlags = 2
PsfUseClientId: win32more.Windows.Win32.Security.Cryptography.Certificates.PolicyServerUrlFlags = 4
PsfAutoEnrollmentEnabled: win32more.Windows.Win32.Security.Cryptography.Certificates.PolicyServerUrlFlags = 16
PsfAllowUnTrustedCA: win32more.Windows.Win32.Security.Cryptography.Certificates.PolicyServerUrlFlags = 32
PolicyServerUrlPropertyID = Int32
PsPolicyID: win32more.Windows.Win32.Security.Cryptography.Certificates.PolicyServerUrlPropertyID = 0
PsFriendlyName: win32more.Windows.Win32.Security.Cryptography.Certificates.PolicyServerUrlPropertyID = 1
RequestClientInfoClientId = Int32
ClientIdNone: win32more.Windows.Win32.Security.Cryptography.Certificates.RequestClientInfoClientId = 0
ClientIdXEnroll2003: win32more.Windows.Win32.Security.Cryptography.Certificates.RequestClientInfoClientId = 1
ClientIdAutoEnroll2003: win32more.Windows.Win32.Security.Cryptography.Certificates.RequestClientInfoClientId = 2
ClientIdWizard2003: win32more.Windows.Win32.Security.Cryptography.Certificates.RequestClientInfoClientId = 3
ClientIdCertReq2003: win32more.Windows.Win32.Security.Cryptography.Certificates.RequestClientInfoClientId = 4
ClientIdDefaultRequest: win32more.Windows.Win32.Security.Cryptography.Certificates.RequestClientInfoClientId = 5
ClientIdAutoEnroll: win32more.Windows.Win32.Security.Cryptography.Certificates.RequestClientInfoClientId = 6
ClientIdRequestWizard: win32more.Windows.Win32.Security.Cryptography.Certificates.RequestClientInfoClientId = 7
ClientIdEOBO: win32more.Windows.Win32.Security.Cryptography.Certificates.RequestClientInfoClientId = 8
ClientIdCertReq: win32more.Windows.Win32.Security.Cryptography.Certificates.RequestClientInfoClientId = 9
ClientIdTest: win32more.Windows.Win32.Security.Cryptography.Certificates.RequestClientInfoClientId = 10
ClientIdWinRT: win32more.Windows.Win32.Security.Cryptography.Certificates.RequestClientInfoClientId = 11
ClientIdUserStart: win32more.Windows.Win32.Security.Cryptography.Certificates.RequestClientInfoClientId = 1000
WebEnrollmentFlags = Int32
EnrollPrompt: win32more.Windows.Win32.Security.Cryptography.Certificates.WebEnrollmentFlags = 1
WebSecurityLevel = Int32
LevelUnsafe: win32more.Windows.Win32.Security.Cryptography.Certificates.WebSecurityLevel = 0
LevelSafe: win32more.Windows.Win32.Security.Cryptography.Certificates.WebSecurityLevel = 1
X500NameFlags = Int32
XCN_CERT_NAME_STR_NONE: win32more.Windows.Win32.Security.Cryptography.Certificates.X500NameFlags = 0
XCN_CERT_SIMPLE_NAME_STR: win32more.Windows.Win32.Security.Cryptography.Certificates.X500NameFlags = 1
XCN_CERT_OID_NAME_STR: win32more.Windows.Win32.Security.Cryptography.Certificates.X500NameFlags = 2
XCN_CERT_X500_NAME_STR: win32more.Windows.Win32.Security.Cryptography.Certificates.X500NameFlags = 3
XCN_CERT_XML_NAME_STR: win32more.Windows.Win32.Security.Cryptography.Certificates.X500NameFlags = 4
XCN_CERT_NAME_STR_SEMICOLON_FLAG: win32more.Windows.Win32.Security.Cryptography.Certificates.X500NameFlags = 1073741824
XCN_CERT_NAME_STR_NO_PLUS_FLAG: win32more.Windows.Win32.Security.Cryptography.Certificates.X500NameFlags = 536870912
XCN_CERT_NAME_STR_NO_QUOTING_FLAG: win32more.Windows.Win32.Security.Cryptography.Certificates.X500NameFlags = 268435456
XCN_CERT_NAME_STR_CRLF_FLAG: win32more.Windows.Win32.Security.Cryptography.Certificates.X500NameFlags = 134217728
XCN_CERT_NAME_STR_COMMA_FLAG: win32more.Windows.Win32.Security.Cryptography.Certificates.X500NameFlags = 67108864
XCN_CERT_NAME_STR_REVERSE_FLAG: win32more.Windows.Win32.Security.Cryptography.Certificates.X500NameFlags = 33554432
XCN_CERT_NAME_STR_FORWARD_FLAG: win32more.Windows.Win32.Security.Cryptography.Certificates.X500NameFlags = 16777216
XCN_CERT_NAME_STR_AMBIGUOUS_SEPARATOR_FLAGS: win32more.Windows.Win32.Security.Cryptography.Certificates.X500NameFlags = 1275068416
XCN_CERT_NAME_STR_DISABLE_IE4_UTF8_FLAG: win32more.Windows.Win32.Security.Cryptography.Certificates.X500NameFlags = 65536
XCN_CERT_NAME_STR_ENABLE_T61_UNICODE_FLAG: win32more.Windows.Win32.Security.Cryptography.Certificates.X500NameFlags = 131072
XCN_CERT_NAME_STR_ENABLE_UTF8_UNICODE_FLAG: win32more.Windows.Win32.Security.Cryptography.Certificates.X500NameFlags = 262144
XCN_CERT_NAME_STR_FORCE_UTF8_DIR_STR_FLAG: win32more.Windows.Win32.Security.Cryptography.Certificates.X500NameFlags = 524288
XCN_CERT_NAME_STR_DISABLE_UTF8_DIR_STR_FLAG: win32more.Windows.Win32.Security.Cryptography.Certificates.X500NameFlags = 1048576
XCN_CERT_NAME_STR_ENABLE_PUNYCODE_FLAG: win32more.Windows.Win32.Security.Cryptography.Certificates.X500NameFlags = 2097152
XCN_CERT_NAME_STR_DS_ESCAPED: win32more.Windows.Win32.Security.Cryptography.Certificates.X500NameFlags = 8388608
X509CertificateEnrollmentContext = Int32
ContextNone: win32more.Windows.Win32.Security.Cryptography.Certificates.X509CertificateEnrollmentContext = 0
ContextUser: win32more.Windows.Win32.Security.Cryptography.Certificates.X509CertificateEnrollmentContext = 1
ContextMachine: win32more.Windows.Win32.Security.Cryptography.Certificates.X509CertificateEnrollmentContext = 2
ContextAdministratorForceMachine: win32more.Windows.Win32.Security.Cryptography.Certificates.X509CertificateEnrollmentContext = 3
X509CertificateTemplateEnrollmentFlag = Int32
EnrollmentIncludeSymmetricAlgorithms: win32more.Windows.Win32.Security.Cryptography.Certificates.X509CertificateTemplateEnrollmentFlag = 1
EnrollmentPendAllRequests: win32more.Windows.Win32.Security.Cryptography.Certificates.X509CertificateTemplateEnrollmentFlag = 2
EnrollmentPublishToKRAContainer: win32more.Windows.Win32.Security.Cryptography.Certificates.X509CertificateTemplateEnrollmentFlag = 4
EnrollmentPublishToDS: win32more.Windows.Win32.Security.Cryptography.Certificates.X509CertificateTemplateEnrollmentFlag = 8
EnrollmentAutoEnrollmentCheckUserDSCertificate: win32more.Windows.Win32.Security.Cryptography.Certificates.X509CertificateTemplateEnrollmentFlag = 16
EnrollmentAutoEnrollment: win32more.Windows.Win32.Security.Cryptography.Certificates.X509CertificateTemplateEnrollmentFlag = 32
EnrollmentDomainAuthenticationNotRequired: win32more.Windows.Win32.Security.Cryptography.Certificates.X509CertificateTemplateEnrollmentFlag = 128
EnrollmentPreviousApprovalValidateReenrollment: win32more.Windows.Win32.Security.Cryptography.Certificates.X509CertificateTemplateEnrollmentFlag = 64
EnrollmentUserInteractionRequired: win32more.Windows.Win32.Security.Cryptography.Certificates.X509CertificateTemplateEnrollmentFlag = 256
EnrollmentAddTemplateName: win32more.Windows.Win32.Security.Cryptography.Certificates.X509CertificateTemplateEnrollmentFlag = 512
EnrollmentRemoveInvalidCertificateFromPersonalStore: win32more.Windows.Win32.Security.Cryptography.Certificates.X509CertificateTemplateEnrollmentFlag = 1024
EnrollmentAllowEnrollOnBehalfOf: win32more.Windows.Win32.Security.Cryptography.Certificates.X509CertificateTemplateEnrollmentFlag = 2048
EnrollmentAddOCSPNoCheck: win32more.Windows.Win32.Security.Cryptography.Certificates.X509CertificateTemplateEnrollmentFlag = 4096
EnrollmentReuseKeyOnFullSmartCard: win32more.Windows.Win32.Security.Cryptography.Certificates.X509CertificateTemplateEnrollmentFlag = 8192
EnrollmentNoRevocationInfoInCerts: win32more.Windows.Win32.Security.Cryptography.Certificates.X509CertificateTemplateEnrollmentFlag = 16384
EnrollmentIncludeBasicConstraintsForEECerts: win32more.Windows.Win32.Security.Cryptography.Certificates.X509CertificateTemplateEnrollmentFlag = 32768
EnrollmentPreviousApprovalKeyBasedValidateReenrollment: win32more.Windows.Win32.Security.Cryptography.Certificates.X509CertificateTemplateEnrollmentFlag = 65536
EnrollmentCertificateIssuancePoliciesFromRequest: win32more.Windows.Win32.Security.Cryptography.Certificates.X509CertificateTemplateEnrollmentFlag = 131072
EnrollmentSkipAutoRenewal: win32more.Windows.Win32.Security.Cryptography.Certificates.X509CertificateTemplateEnrollmentFlag = 262144
X509CertificateTemplateGeneralFlag = Int32
GeneralMachineType: win32more.Windows.Win32.Security.Cryptography.Certificates.X509CertificateTemplateGeneralFlag = 64
GeneralCA: win32more.Windows.Win32.Security.Cryptography.Certificates.X509CertificateTemplateGeneralFlag = 128
GeneralCrossCA: win32more.Windows.Win32.Security.Cryptography.Certificates.X509CertificateTemplateGeneralFlag = 2048
GeneralDefault: win32more.Windows.Win32.Security.Cryptography.Certificates.X509CertificateTemplateGeneralFlag = 65536
GeneralModified: win32more.Windows.Win32.Security.Cryptography.Certificates.X509CertificateTemplateGeneralFlag = 131072
GeneralDonotPersist: win32more.Windows.Win32.Security.Cryptography.Certificates.X509CertificateTemplateGeneralFlag = 4096
X509CertificateTemplatePrivateKeyFlag = Int32
PrivateKeyRequireArchival: win32more.Windows.Win32.Security.Cryptography.Certificates.X509CertificateTemplatePrivateKeyFlag = 1
PrivateKeyExportable: win32more.Windows.Win32.Security.Cryptography.Certificates.X509CertificateTemplatePrivateKeyFlag = 16
PrivateKeyRequireStrongKeyProtection: win32more.Windows.Win32.Security.Cryptography.Certificates.X509CertificateTemplatePrivateKeyFlag = 32
PrivateKeyRequireAlternateSignatureAlgorithm: win32more.Windows.Win32.Security.Cryptography.Certificates.X509CertificateTemplatePrivateKeyFlag = 64
PrivateKeyRequireSameKeyRenewal: win32more.Windows.Win32.Security.Cryptography.Certificates.X509CertificateTemplatePrivateKeyFlag = 128
PrivateKeyUseLegacyProvider: win32more.Windows.Win32.Security.Cryptography.Certificates.X509CertificateTemplatePrivateKeyFlag = 256
PrivateKeyEKTrustOnUse: win32more.Windows.Win32.Security.Cryptography.Certificates.X509CertificateTemplatePrivateKeyFlag = 512
PrivateKeyEKValidateCert: win32more.Windows.Win32.Security.Cryptography.Certificates.X509CertificateTemplatePrivateKeyFlag = 1024
PrivateKeyEKValidateKey: win32more.Windows.Win32.Security.Cryptography.Certificates.X509CertificateTemplatePrivateKeyFlag = 2048
PrivateKeyAttestNone: win32more.Windows.Win32.Security.Cryptography.Certificates.X509CertificateTemplatePrivateKeyFlag = 0
PrivateKeyAttestPreferred: win32more.Windows.Win32.Security.Cryptography.Certificates.X509CertificateTemplatePrivateKeyFlag = 4096
PrivateKeyAttestRequired: win32more.Windows.Win32.Security.Cryptography.Certificates.X509CertificateTemplatePrivateKeyFlag = 8192
PrivateKeyAttestMask: win32more.Windows.Win32.Security.Cryptography.Certificates.X509CertificateTemplatePrivateKeyFlag = 12288
PrivateKeyAttestWithoutPolicy: win32more.Windows.Win32.Security.Cryptography.Certificates.X509CertificateTemplatePrivateKeyFlag = 16384
PrivateKeyServerVersionMask: win32more.Windows.Win32.Security.Cryptography.Certificates.X509CertificateTemplatePrivateKeyFlag = 983040
PrivateKeyServerVersionShift: win32more.Windows.Win32.Security.Cryptography.Certificates.X509CertificateTemplatePrivateKeyFlag = 16
PrivateKeyHelloKspKey: win32more.Windows.Win32.Security.Cryptography.Certificates.X509CertificateTemplatePrivateKeyFlag = 1048576
PrivateKeyHelloLogonKey: win32more.Windows.Win32.Security.Cryptography.Certificates.X509CertificateTemplatePrivateKeyFlag = 2097152
PrivateKeyClientVersionMask: win32more.Windows.Win32.Security.Cryptography.Certificates.X509CertificateTemplatePrivateKeyFlag = 251658240
PrivateKeyClientVersionShift: win32more.Windows.Win32.Security.Cryptography.Certificates.X509CertificateTemplatePrivateKeyFlag = 24
X509CertificateTemplateSubjectNameFlag = Int32
SubjectNameEnrolleeSupplies: win32more.Windows.Win32.Security.Cryptography.Certificates.X509CertificateTemplateSubjectNameFlag = 1
SubjectNameRequireDirectoryPath: win32more.Windows.Win32.Security.Cryptography.Certificates.X509CertificateTemplateSubjectNameFlag = -2147483648
SubjectNameRequireCommonName: win32more.Windows.Win32.Security.Cryptography.Certificates.X509CertificateTemplateSubjectNameFlag = 1073741824
SubjectNameRequireEmail: win32more.Windows.Win32.Security.Cryptography.Certificates.X509CertificateTemplateSubjectNameFlag = 536870912
SubjectNameRequireDNS: win32more.Windows.Win32.Security.Cryptography.Certificates.X509CertificateTemplateSubjectNameFlag = 268435456
SubjectNameAndAlternativeNameOldCertSupplies: win32more.Windows.Win32.Security.Cryptography.Certificates.X509CertificateTemplateSubjectNameFlag = 8
SubjectAlternativeNameEnrolleeSupplies: win32more.Windows.Win32.Security.Cryptography.Certificates.X509CertificateTemplateSubjectNameFlag = 65536
SubjectAlternativeNameRequireDirectoryGUID: win32more.Windows.Win32.Security.Cryptography.Certificates.X509CertificateTemplateSubjectNameFlag = 16777216
SubjectAlternativeNameRequireUPN: win32more.Windows.Win32.Security.Cryptography.Certificates.X509CertificateTemplateSubjectNameFlag = 33554432
SubjectAlternativeNameRequireEmail: win32more.Windows.Win32.Security.Cryptography.Certificates.X509CertificateTemplateSubjectNameFlag = 67108864
SubjectAlternativeNameRequireSPN: win32more.Windows.Win32.Security.Cryptography.Certificates.X509CertificateTemplateSubjectNameFlag = 8388608
SubjectAlternativeNameRequireDNS: win32more.Windows.Win32.Security.Cryptography.Certificates.X509CertificateTemplateSubjectNameFlag = 134217728
SubjectAlternativeNameRequireDomainDNS: win32more.Windows.Win32.Security.Cryptography.Certificates.X509CertificateTemplateSubjectNameFlag = 4194304
X509EnrollmentAuthFlags = Int32
X509AuthNone: win32more.Windows.Win32.Security.Cryptography.Certificates.X509EnrollmentAuthFlags = 0
X509AuthAnonymous: win32more.Windows.Win32.Security.Cryptography.Certificates.X509EnrollmentAuthFlags = 1
X509AuthKerberos: win32more.Windows.Win32.Security.Cryptography.Certificates.X509EnrollmentAuthFlags = 2
X509AuthUsername: win32more.Windows.Win32.Security.Cryptography.Certificates.X509EnrollmentAuthFlags = 4
X509AuthCertificate: win32more.Windows.Win32.Security.Cryptography.Certificates.X509EnrollmentAuthFlags = 8
X509EnrollmentPolicyExportFlags = Int32
ExportTemplates: win32more.Windows.Win32.Security.Cryptography.Certificates.X509EnrollmentPolicyExportFlags = 1
ExportOIDs: win32more.Windows.Win32.Security.Cryptography.Certificates.X509EnrollmentPolicyExportFlags = 2
ExportCAs: win32more.Windows.Win32.Security.Cryptography.Certificates.X509EnrollmentPolicyExportFlags = 4
X509EnrollmentPolicyLoadOption = Int32
LoadOptionDefault: win32more.Windows.Win32.Security.Cryptography.Certificates.X509EnrollmentPolicyLoadOption = 0
LoadOptionCacheOnly: win32more.Windows.Win32.Security.Cryptography.Certificates.X509EnrollmentPolicyLoadOption = 1
LoadOptionReload: win32more.Windows.Win32.Security.Cryptography.Certificates.X509EnrollmentPolicyLoadOption = 2
LoadOptionRegisterForADChanges: win32more.Windows.Win32.Security.Cryptography.Certificates.X509EnrollmentPolicyLoadOption = 4
X509HardwareKeyUsageFlags = Int32
XCN_NCRYPT_PCP_NONE: win32more.Windows.Win32.Security.Cryptography.Certificates.X509HardwareKeyUsageFlags = 0
XCN_NCRYPT_TPM12_PROVIDER: win32more.Windows.Win32.Security.Cryptography.Certificates.X509HardwareKeyUsageFlags = 65536
XCN_NCRYPT_PCP_SIGNATURE_KEY: win32more.Windows.Win32.Security.Cryptography.Certificates.X509HardwareKeyUsageFlags = 1
XCN_NCRYPT_PCP_ENCRYPTION_KEY: win32more.Windows.Win32.Security.Cryptography.Certificates.X509HardwareKeyUsageFlags = 2
XCN_NCRYPT_PCP_GENERIC_KEY: win32more.Windows.Win32.Security.Cryptography.Certificates.X509HardwareKeyUsageFlags = 3
XCN_NCRYPT_PCP_STORAGE_KEY: win32more.Windows.Win32.Security.Cryptography.Certificates.X509HardwareKeyUsageFlags = 4
XCN_NCRYPT_PCP_IDENTITY_KEY: win32more.Windows.Win32.Security.Cryptography.Certificates.X509HardwareKeyUsageFlags = 8
X509KeyParametersExportType = Int32
XCN_CRYPT_OID_USE_CURVE_NONE: win32more.Windows.Win32.Security.Cryptography.Certificates.X509KeyParametersExportType = 0
XCN_CRYPT_OID_USE_CURVE_NAME_FOR_ENCODE_FLAG: win32more.Windows.Win32.Security.Cryptography.Certificates.X509KeyParametersExportType = 536870912
XCN_CRYPT_OID_USE_CURVE_PARAMETERS_FOR_ENCODE_FLAG: win32more.Windows.Win32.Security.Cryptography.Certificates.X509KeyParametersExportType = 268435456
X509KeySpec = Int32
XCN_AT_NONE: win32more.Windows.Win32.Security.Cryptography.Certificates.X509KeySpec = 0
XCN_AT_KEYEXCHANGE: win32more.Windows.Win32.Security.Cryptography.Certificates.X509KeySpec = 1
XCN_AT_SIGNATURE: win32more.Windows.Win32.Security.Cryptography.Certificates.X509KeySpec = 2
X509KeyUsageFlags = Int32
XCN_CERT_NO_KEY_USAGE: win32more.Windows.Win32.Security.Cryptography.Certificates.X509KeyUsageFlags = 0
XCN_CERT_DIGITAL_SIGNATURE_KEY_USAGE: win32more.Windows.Win32.Security.Cryptography.Certificates.X509KeyUsageFlags = 128
XCN_CERT_NON_REPUDIATION_KEY_USAGE: win32more.Windows.Win32.Security.Cryptography.Certificates.X509KeyUsageFlags = 64
XCN_CERT_KEY_ENCIPHERMENT_KEY_USAGE: win32more.Windows.Win32.Security.Cryptography.Certificates.X509KeyUsageFlags = 32
XCN_CERT_DATA_ENCIPHERMENT_KEY_USAGE: win32more.Windows.Win32.Security.Cryptography.Certificates.X509KeyUsageFlags = 16
XCN_CERT_KEY_AGREEMENT_KEY_USAGE: win32more.Windows.Win32.Security.Cryptography.Certificates.X509KeyUsageFlags = 8
XCN_CERT_KEY_CERT_SIGN_KEY_USAGE: win32more.Windows.Win32.Security.Cryptography.Certificates.X509KeyUsageFlags = 4
XCN_CERT_OFFLINE_CRL_SIGN_KEY_USAGE: win32more.Windows.Win32.Security.Cryptography.Certificates.X509KeyUsageFlags = 2
XCN_CERT_CRL_SIGN_KEY_USAGE: win32more.Windows.Win32.Security.Cryptography.Certificates.X509KeyUsageFlags = 2
XCN_CERT_ENCIPHER_ONLY_KEY_USAGE: win32more.Windows.Win32.Security.Cryptography.Certificates.X509KeyUsageFlags = 1
XCN_CERT_DECIPHER_ONLY_KEY_USAGE: win32more.Windows.Win32.Security.Cryptography.Certificates.X509KeyUsageFlags = 32768
X509PrivateKeyExportFlags = Int32
XCN_NCRYPT_ALLOW_EXPORT_NONE: win32more.Windows.Win32.Security.Cryptography.Certificates.X509PrivateKeyExportFlags = 0
XCN_NCRYPT_ALLOW_EXPORT_FLAG: win32more.Windows.Win32.Security.Cryptography.Certificates.X509PrivateKeyExportFlags = 1
XCN_NCRYPT_ALLOW_PLAINTEXT_EXPORT_FLAG: win32more.Windows.Win32.Security.Cryptography.Certificates.X509PrivateKeyExportFlags = 2
XCN_NCRYPT_ALLOW_ARCHIVING_FLAG: win32more.Windows.Win32.Security.Cryptography.Certificates.X509PrivateKeyExportFlags = 4
XCN_NCRYPT_ALLOW_PLAINTEXT_ARCHIVING_FLAG: win32more.Windows.Win32.Security.Cryptography.Certificates.X509PrivateKeyExportFlags = 8
X509PrivateKeyProtection = Int32
XCN_NCRYPT_UI_NO_PROTECTION_FLAG: win32more.Windows.Win32.Security.Cryptography.Certificates.X509PrivateKeyProtection = 0
XCN_NCRYPT_UI_PROTECT_KEY_FLAG: win32more.Windows.Win32.Security.Cryptography.Certificates.X509PrivateKeyProtection = 1
XCN_NCRYPT_UI_FORCE_HIGH_PROTECTION_FLAG: win32more.Windows.Win32.Security.Cryptography.Certificates.X509PrivateKeyProtection = 2
XCN_NCRYPT_UI_FINGERPRINT_PROTECTION_FLAG: win32more.Windows.Win32.Security.Cryptography.Certificates.X509PrivateKeyProtection = 4
XCN_NCRYPT_UI_APPCONTAINER_ACCESS_MEDIUM_FLAG: win32more.Windows.Win32.Security.Cryptography.Certificates.X509PrivateKeyProtection = 8
X509PrivateKeyUsageFlags = Int32
XCN_NCRYPT_ALLOW_USAGES_NONE: win32more.Windows.Win32.Security.Cryptography.Certificates.X509PrivateKeyUsageFlags = 0
XCN_NCRYPT_ALLOW_DECRYPT_FLAG: win32more.Windows.Win32.Security.Cryptography.Certificates.X509PrivateKeyUsageFlags = 1
XCN_NCRYPT_ALLOW_SIGNING_FLAG: win32more.Windows.Win32.Security.Cryptography.Certificates.X509PrivateKeyUsageFlags = 2
XCN_NCRYPT_ALLOW_KEY_AGREEMENT_FLAG: win32more.Windows.Win32.Security.Cryptography.Certificates.X509PrivateKeyUsageFlags = 4
XCN_NCRYPT_ALLOW_KEY_IMPORT_FLAG: win32more.Windows.Win32.Security.Cryptography.Certificates.X509PrivateKeyUsageFlags = 8
XCN_NCRYPT_ALLOW_ALL_USAGES: win32more.Windows.Win32.Security.Cryptography.Certificates.X509PrivateKeyUsageFlags = 16777215
X509PrivateKeyVerify = Int32
VerifyNone: win32more.Windows.Win32.Security.Cryptography.Certificates.X509PrivateKeyVerify = 0
VerifySilent: win32more.Windows.Win32.Security.Cryptography.Certificates.X509PrivateKeyVerify = 1
VerifySmartCardNone: win32more.Windows.Win32.Security.Cryptography.Certificates.X509PrivateKeyVerify = 2
VerifySmartCardSilent: win32more.Windows.Win32.Security.Cryptography.Certificates.X509PrivateKeyVerify = 3
VerifyAllowUI: win32more.Windows.Win32.Security.Cryptography.Certificates.X509PrivateKeyVerify = 4
X509ProviderType = Int32
XCN_PROV_NONE: win32more.Windows.Win32.Security.Cryptography.Certificates.X509ProviderType = 0
XCN_PROV_RSA_FULL: win32more.Windows.Win32.Security.Cryptography.Certificates.X509ProviderType = 1
XCN_PROV_RSA_SIG: win32more.Windows.Win32.Security.Cryptography.Certificates.X509ProviderType = 2
XCN_PROV_DSS: win32more.Windows.Win32.Security.Cryptography.Certificates.X509ProviderType = 3
XCN_PROV_FORTEZZA: win32more.Windows.Win32.Security.Cryptography.Certificates.X509ProviderType = 4
XCN_PROV_MS_EXCHANGE: win32more.Windows.Win32.Security.Cryptography.Certificates.X509ProviderType = 5
XCN_PROV_SSL: win32more.Windows.Win32.Security.Cryptography.Certificates.X509ProviderType = 6
XCN_PROV_RSA_SCHANNEL: win32more.Windows.Win32.Security.Cryptography.Certificates.X509ProviderType = 12
XCN_PROV_DSS_DH: win32more.Windows.Win32.Security.Cryptography.Certificates.X509ProviderType = 13
XCN_PROV_EC_ECDSA_SIG: win32more.Windows.Win32.Security.Cryptography.Certificates.X509ProviderType = 14
XCN_PROV_EC_ECNRA_SIG: win32more.Windows.Win32.Security.Cryptography.Certificates.X509ProviderType = 15
XCN_PROV_EC_ECDSA_FULL: win32more.Windows.Win32.Security.Cryptography.Certificates.X509ProviderType = 16
XCN_PROV_EC_ECNRA_FULL: win32more.Windows.Win32.Security.Cryptography.Certificates.X509ProviderType = 17
XCN_PROV_DH_SCHANNEL: win32more.Windows.Win32.Security.Cryptography.Certificates.X509ProviderType = 18
XCN_PROV_SPYRUS_LYNKS: win32more.Windows.Win32.Security.Cryptography.Certificates.X509ProviderType = 20
XCN_PROV_RNG: win32more.Windows.Win32.Security.Cryptography.Certificates.X509ProviderType = 21
XCN_PROV_INTEL_SEC: win32more.Windows.Win32.Security.Cryptography.Certificates.X509ProviderType = 22
XCN_PROV_REPLACE_OWF: win32more.Windows.Win32.Security.Cryptography.Certificates.X509ProviderType = 23
XCN_PROV_RSA_AES: win32more.Windows.Win32.Security.Cryptography.Certificates.X509ProviderType = 24
X509RequestInheritOptions = Int32
InheritDefault: win32more.Windows.Win32.Security.Cryptography.Certificates.X509RequestInheritOptions = 0
InheritNewDefaultKey: win32more.Windows.Win32.Security.Cryptography.Certificates.X509RequestInheritOptions = 1
InheritNewSimilarKey: win32more.Windows.Win32.Security.Cryptography.Certificates.X509RequestInheritOptions = 2
InheritPrivateKey: win32more.Windows.Win32.Security.Cryptography.Certificates.X509RequestInheritOptions = 3
InheritPublicKey: win32more.Windows.Win32.Security.Cryptography.Certificates.X509RequestInheritOptions = 4
InheritKeyMask: win32more.Windows.Win32.Security.Cryptography.Certificates.X509RequestInheritOptions = 15
InheritNone: win32more.Windows.Win32.Security.Cryptography.Certificates.X509RequestInheritOptions = 16
InheritRenewalCertificateFlag: win32more.Windows.Win32.Security.Cryptography.Certificates.X509RequestInheritOptions = 32
InheritTemplateFlag: win32more.Windows.Win32.Security.Cryptography.Certificates.X509RequestInheritOptions = 64
InheritSubjectFlag: win32more.Windows.Win32.Security.Cryptography.Certificates.X509RequestInheritOptions = 128
InheritExtensionsFlag: win32more.Windows.Win32.Security.Cryptography.Certificates.X509RequestInheritOptions = 256
InheritSubjectAltNameFlag: win32more.Windows.Win32.Security.Cryptography.Certificates.X509RequestInheritOptions = 512
InheritValidityPeriodFlag: win32more.Windows.Win32.Security.Cryptography.Certificates.X509RequestInheritOptions = 1024
InheritReserved80000000: win32more.Windows.Win32.Security.Cryptography.Certificates.X509RequestInheritOptions = -2147483648
X509RequestType = Int32
TypeAny: win32more.Windows.Win32.Security.Cryptography.Certificates.X509RequestType = 0
TypePkcs10: win32more.Windows.Win32.Security.Cryptography.Certificates.X509RequestType = 1
TypePkcs7: win32more.Windows.Win32.Security.Cryptography.Certificates.X509RequestType = 2
TypeCmc: win32more.Windows.Win32.Security.Cryptography.Certificates.X509RequestType = 3
TypeCertificate: win32more.Windows.Win32.Security.Cryptography.Certificates.X509RequestType = 4
X509SCEPDisposition = Int32
SCEPDispositionUnknown: win32more.Windows.Win32.Security.Cryptography.Certificates.X509SCEPDisposition = -1
SCEPDispositionSuccess: win32more.Windows.Win32.Security.Cryptography.Certificates.X509SCEPDisposition = 0
SCEPDispositionFailure: win32more.Windows.Win32.Security.Cryptography.Certificates.X509SCEPDisposition = 2
SCEPDispositionPending: win32more.Windows.Win32.Security.Cryptography.Certificates.X509SCEPDisposition = 3
SCEPDispositionPendingChallenge: win32more.Windows.Win32.Security.Cryptography.Certificates.X509SCEPDisposition = 11
X509SCEPFailInfo = Int32
SCEPFailUnknown: win32more.Windows.Win32.Security.Cryptography.Certificates.X509SCEPFailInfo = -1
SCEPFailBadAlgorithm: win32more.Windows.Win32.Security.Cryptography.Certificates.X509SCEPFailInfo = 0
SCEPFailBadMessageCheck: win32more.Windows.Win32.Security.Cryptography.Certificates.X509SCEPFailInfo = 1
SCEPFailBadRequest: win32more.Windows.Win32.Security.Cryptography.Certificates.X509SCEPFailInfo = 2
SCEPFailBadTime: win32more.Windows.Win32.Security.Cryptography.Certificates.X509SCEPFailInfo = 3
SCEPFailBadCertId: win32more.Windows.Win32.Security.Cryptography.Certificates.X509SCEPFailInfo = 4
X509SCEPMessageType = Int32
SCEPMessageUnknown: win32more.Windows.Win32.Security.Cryptography.Certificates.X509SCEPMessageType = -1
SCEPMessageCertResponse: win32more.Windows.Win32.Security.Cryptography.Certificates.X509SCEPMessageType = 3
SCEPMessagePKCSRequest: win32more.Windows.Win32.Security.Cryptography.Certificates.X509SCEPMessageType = 19
SCEPMessageGetCertInitial: win32more.Windows.Win32.Security.Cryptography.Certificates.X509SCEPMessageType = 20
SCEPMessageGetCert: win32more.Windows.Win32.Security.Cryptography.Certificates.X509SCEPMessageType = 21
SCEPMessageGetCRL: win32more.Windows.Win32.Security.Cryptography.Certificates.X509SCEPMessageType = 22
SCEPMessageClaimChallengeAnswer: win32more.Windows.Win32.Security.Cryptography.Certificates.X509SCEPMessageType = 41
X509SCEPProcessMessageFlags = Int32
SCEPProcessDefault: win32more.Windows.Win32.Security.Cryptography.Certificates.X509SCEPProcessMessageFlags = 0
SCEPProcessSkipCertInstall: win32more.Windows.Win32.Security.Cryptography.Certificates.X509SCEPProcessMessageFlags = 1
XEKL_KEYSIZE = Int32
XEKL_KEYSIZE_MIN: win32more.Windows.Win32.Security.Cryptography.Certificates.XEKL_KEYSIZE = 1
XEKL_KEYSIZE_MAX: win32more.Windows.Win32.Security.Cryptography.Certificates.XEKL_KEYSIZE = 2
XEKL_KEYSIZE_INC: win32more.Windows.Win32.Security.Cryptography.Certificates.XEKL_KEYSIZE = 3
XEKL_KEYSPEC = Int32
XEKL_KEYSPEC_KEYX: win32more.Windows.Win32.Security.Cryptography.Certificates.XEKL_KEYSPEC = 1
XEKL_KEYSPEC_SIG: win32more.Windows.Win32.Security.Cryptography.Certificates.XEKL_KEYSPEC = 2


make_ready(__name__)
